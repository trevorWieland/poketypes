{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to the Poketypes Docs!","text":"<p>This site contains the project documentation for the <code>poketypes</code> project, whose goal is to provide clear, consistent, correct data about Pokemon, using the same base data as Pokemon Showdown.</p>"},{"location":"#table-of-contents","title":"Table Of Contents","text":"<p>This package provides two very useful modules for handling Pokemon data:</p> <ul> <li><code>dex</code>: contains Pokemon Enums, Data Classes, and an instantiated information center <code>Gen</code></li> <li><code>showdown</code>: provides two main classes <code>Message</code> and <code>BattleMessage</code>, for processing showdown communications</li> </ul> <p>Based on the needs of your project, you may need one or both of these.</p> <p>There is also the module <code>protos</code>, which contains the logic for generating the <code>DexClass</code> core Enums used in <code>dex</code>. As an end-user of the typing and data structures in ths package, you don't need to access anything in <code>protos</code>, however, if you want to have data-structure / enum support for more niche showdown mods, contributions to the <code>protos</code> class  would be greatly appreciated.</p>"},{"location":"#project-overview","title":"Project Overview","text":"<p>Fully type-hinted, consistently labeled, feature rich information about Pokemon.</p> Modules exported by this package <ul> <li><code>dex</code>: Contains Enums and BaseModels for all things pokemon data related.</li> <li><code>showdown</code>: Contains models related to showdown message processing.</li> <li><code>protos</code>: Contains tools related to protobuf generation.</li> </ul>"},{"location":"about/about/","title":"The Core Team","text":""},{"location":"about/changelog/","title":"Changelog","text":"<p>Changelog will not be 100% accurate until the official 1.0.0 release. Right now each release is a mash-up of various message tweaks, documenation additions, field reworkings, etc..</p> <p>I'll try to keep a generally accurate log until then mostly for my own benefit, but take it with a grain of salt</p>"},{"location":"about/changelog/#021","title":"0.2.1","text":""},{"location":"about/changelog/#changed","title":"Changed","text":"<ul> <li>Remaining docstrings have been added</li> <li>flake8 linting detects 0 issues!</li> <li>Showdown reference pages for general messages and battle messages are updated</li> </ul>"},{"location":"about/changelog/#020","title":"0.2.0","text":""},{"location":"about/changelog/#added","title":"Added","text":"<ul> <li>mkdocs documentation generation</li> <li>flake8 linting (with pydoclint and pydocstyle extensions)</li> <li>This changelog!</li> </ul>"},{"location":"about/changelog/#changed_1","title":"Changed","text":"<ul> <li>Lots of docstrings added/tweaked following google style guide</li> </ul>"},{"location":"about/changelog/#010","title":"0.1.0","text":""},{"location":"about/changelog/#added_1","title":"Added","text":"<ul> <li><code>dex</code>, <code>showdown</code>, and <code>protos</code> modules with base functionality</li> <li>project folder structure</li> <li>poetry dependency setup</li> </ul>"},{"location":"about/license/","title":"License","text":"<p>MIT License</p> <p>Copyright (c) 2023 Trevor Wieland</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"dex/","title":"Dex Intro","text":""},{"location":"dex/#5-minute-summary","title":"5-Minute Summary","text":"<p>In the <code>poketypes</code> package, we include the module <code>dex</code>, which contains two different types of data structures, so-called DexClass Enums, which contain uniquely enumerated labels for everything from pokemon formes to items to moves and more. The other contained data structure is the PokedexClass BaseModel, which are pydantic BaseModels, meant for holding reference material about a specific corresponding DexClass label. </p> <p>For example, one specific DexClass is the <code>DexPokemon</code>, an Enum which maps every distinct pokemon forme (base, cosmetic, temporary, etc.) to a unique integer. So we have things like <code>DexPokemon.POKEMON_MAGIKARP</code>, which is mapped to the integer 129000. Then, we have the <code>PokedexPokemon</code> BaseModel, whose purpose would be to store all useful information about each specific corresponding <code>DexPokemon</code> id, such as the types of the pokemon (each stored as a <code>DexType</code>), the learnset of the pokemon (stored as <code>DexMove</code>), etc..</p> <p>This means that if you are building logic for interpretting a pokemon battle, rather than relying on string comparisons which can both be slow and inconsistent, you can instead use included functions such as <code>cast2dex</code>, which can take input strings and a relevant DexClass, and return the correct label to use.</p> <p>These extra layers of labeling may seem cumbersome to work with at first, but since we provide all of the cleaning functions you could need to transform between them, the trade-off for using just a few extra lines of code is 100% guarunteed label consistency and accuracy, with minimal risk of typos.</p> <p>For instance, you might care about checking if an opponent pokemon can potentially have the ability levitate. Then you could directly use <code>DexAbility.ABILITY_LEVITATE</code>, checking if this label exists in the corresponding <code>PokedexPokemon.abilities</code>. Since no string comparisons are happening, there's no risk of accidentally spelling levitate wrong since the type hinting will inform you.</p> <p>Lastly, there is the actual pokedex instances, which are accessed by calling <code>dex.gen()</code>. This returns a pydantic object that has a pre-instantiated dictionary for Pokemon, Moves, and Items, which each map from their corresponding DexClass to their corresponding PokedexClass. For example, <code>dex.gen(5).pokemon[DexPokemon.POKEMON_MAGIKARP]</code> will return the <code>PokedexPokemon</code> object for Magikarp, will all the details already filled out, as it was in generation 5. If you leave out the gen number, it will automatically use the latest generation available.</p>"},{"location":"dex/#reference-links","title":"Reference Links","text":"<p>For details on all the different kinds of DexClasses, see the reference page here</p> <p>For details on all the different kinds of PokedexClasses, see the reference page here</p> <p>For details on all the different cleaning utilities, see the reference page here</p> <p>For details on the gen function, see the reference page here</p>"},{"location":"dex/reference/dex-classes/","title":"The DexClass","text":"<p><code>poketypes.dex.dexdata_pb2</code> OR directly import from <code>poketypes.dex</code></p>"},{"location":"dex/reference/dex-classes/#basics","title":"Basics","text":"<p>Each DexClass is an auto-generated Enum using google's protobuf library, and the <code>poketypes.protos</code> module. In order to use these Enums, you do not need to have the library installed, however if you want to generate your own Enums in this way, or modify how the existing ones are generating, you will need to do so.</p> <p>Follow the steps in the contributing to get your local environment setup if you want to develop changes for these Enums.</p>"},{"location":"dex/reference/dex-classes/#reference","title":"Reference","text":"<p>Generated protocol buffer code.</p>"},{"location":"dex/reference/dex-classes/#poketypes.dex.dexdata_pb2.DexStat","title":"<code>DexStat</code>","text":"<p>Represents possible stats</p> <p>Options:</p> <ul> <li>0: Unassigned</li> <li>1: Attack</li> <li>2: Defence</li> <li>3: Special Attack</li> <li>4: Special Defence</li> <li>5: Speed</li> <li>6: Health</li> <li>7: Evasion</li> <li>8: Accuracy</li> </ul>"},{"location":"dex/reference/dex-classes/#poketypes.dex.dexdata_pb2.DexGen","title":"<code>DexGen</code>","text":"<p>Represents supported Generations</p> <p>Each integer gen is represented as its integer value.</p>"},{"location":"dex/reference/dex-classes/#poketypes.dex.dexdata_pb2.DexMoveCategory","title":"<code>DexMoveCategory</code>","text":"<p>Represents possible move categories</p> <p>Options:</p> <ul> <li>0: Unassigned</li> <li>1: Physical</li> <li>2: Special</li> <li>3: Status</li> </ul>"},{"location":"dex/reference/dex-classes/#poketypes.dex.dexdata_pb2.DexMoveTarget","title":"<code>DexMoveTarget</code>","text":"<p>Represents possible move targets</p> <p>Options:</p> <ul> <li>0: Unassigned</li> <li>1: Self</li> <li>2: Adjacent Ally</li> <li>3: Adjacent Ally or Self</li> <li>4: All</li> <li>5: All Adjacent</li> <li>6: All Adjacent Foes</li> <li>7: Allies</li> <li>8: Ally Side</li> <li>9: Ally Team</li> <li>10: Any</li> <li>11: Foe Side</li> <li>12: Normal</li> <li>13: Random Normal</li> <li>14: Scripted</li> <li>15: Adjacent Foe</li> </ul>"},{"location":"dex/reference/dex-classes/#poketypes.dex.dexdata_pb2.DexType","title":"<code>DexType</code>","text":"<p>Auto-Generated by protogen.py Contains data for Gen 9</p> <p>Represents possible Types</p> <p>Options:</p> <ul> <li>1: BUG</li> <li>2: DARK</li> <li>3: DRAGON</li> <li>4: ELECTRIC</li> <li>5: FAIRY</li> <li>6: FIGHTING</li> <li>7: FIRE</li> <li>8: FLYING</li> <li>9: GHOST</li> <li>10: GRASS</li> <li>11: GROUND</li> <li>12: ICE</li> <li>13: NORMAL</li> <li>14: POISON</li> <li>15: PSYCHIC</li> <li>16: ROCK</li> <li>17: STEEL</li> <li>18: WATER</li> </ul>"},{"location":"dex/reference/dex-classes/#poketypes.dex.dexdata_pb2.DexNature","title":"<code>DexNature</code>","text":"<p>Represents possible Natures</p> <p>Options:</p> <ul> <li>1: ADAMANT</li> <li>2: BASHFUL</li> <li>3: BOLD</li> <li>4: BRAVE</li> <li>5: CALM</li> <li>6: CAREFUL</li> <li>7: DOCILE</li> <li>8: GENTLE</li> <li>9: HARDY</li> <li>10: HASTY</li> <li>11: IMPISH</li> <li>12: JOLLY</li> <li>13: LAX</li> <li>14: LONELY</li> <li>15: MILD</li> <li>16: MODEST</li> <li>17: NAIVE</li> <li>18: NAUGHTY</li> <li>19: QUIET</li> <li>20: QUIRKY</li> <li>21: RASH</li> <li>22: RELAXED</li> <li>23: SASSY</li> <li>24: SERIOUS</li> <li>25: TIMID</li> </ul>"},{"location":"dex/reference/dex-classes/#poketypes.dex.dexdata_pb2.DexPokemon","title":"<code>DexPokemon</code>","text":"<p>Represents possible Pokemons</p> <p>Options:</p> <ul> <li>1000: BULBASAUR</li> <li>2000: IVYSAUR</li> <li>3000: VENUSAUR</li> <li>3001: VENUSAURMEGA</li> <li>3002: VENUSAURGMAX</li> <li>4000: CHARMANDER</li> <li>5000: CHARMELEON</li> <li>6000: CHARIZARD</li> <li>6001: CHARIZARDMEGAX</li> <li>6002: CHARIZARDMEGAY</li> <li>6003: CHARIZARDGMAX</li> <li>7000: SQUIRTLE</li> <li>8000: WARTORTLE</li> <li>9000: BLASTOISE</li> <li>9001: BLASTOISEMEGA</li> <li>9002: BLASTOISEGMAX</li> <li>10000: CATERPIE</li> <li>11000: METAPOD</li> <li>12000: BUTTERFREE</li> <li>12001: BUTTERFREEGMAX</li> <li>13000: WEEDLE</li> <li>14000: KAKUNA</li> <li>15000: BEEDRILL</li> <li>15001: BEEDRILLMEGA</li> <li>16000: PIDGEY</li> <li>17000: PIDGEOTTO</li> <li>18000: PIDGEOT</li> <li>18001: PIDGEOTMEGA</li> <li>19000: RATTATA</li> <li>19001: RATTATAALOLA</li> <li>20000: RATICATE</li> <li>20001: RATICATEALOLA</li> <li>20002: RATICATEALOLATOTEM</li> <li>21000: SPEAROW</li> <li>22000: FEAROW</li> <li>23000: EKANS</li> <li>24000: ARBOK</li> <li>25000: PIKACHU</li> <li>25001: PIKACHUCOSPLAY</li> <li>25002: PIKACHUROCKSTAR</li> <li>25003: PIKACHUBELLE</li> <li>25004: PIKACHUPOPSTAR</li> <li>25005: PIKACHUPHD</li> <li>25006: PIKACHULIBRE</li> <li>25007: PIKACHUORIGINAL</li> <li>25008: PIKACHUHOENN</li> <li>25009: PIKACHUSINNOH</li> <li>25010: PIKACHUUNOVA</li> <li>25011: PIKACHUKALOS</li> <li>25012: PIKACHUALOLA</li> <li>25013: PIKACHUPARTNER</li> <li>25014: PIKACHUSTARTER</li> <li>25015: PIKACHUGMAX</li> <li>25016: PIKACHUWORLD</li> <li>26000: RAICHU</li> <li>26001: RAICHUALOLA</li> <li>27000: SANDSHREW</li> <li>27001: SANDSHREWALOLA</li> <li>28000: SANDSLASH</li> <li>28001: SANDSLASHALOLA</li> <li>29000: NIDORANF</li> <li>30000: NIDORINA</li> <li>31000: NIDOQUEEN</li> <li>32000: NIDORANM</li> <li>33000: NIDORINO</li> <li>34000: NIDOKING</li> <li>35000: CLEFAIRY</li> <li>36000: CLEFABLE</li> <li>37000: VULPIX</li> <li>37001: VULPIXALOLA</li> <li>38000: NINETALES</li> <li>38001: NINETALESALOLA</li> <li>39000: JIGGLYPUFF</li> <li>40000: WIGGLYTUFF</li> <li>41000: ZUBAT</li> <li>42000: GOLBAT</li> <li>43000: ODDISH</li> <li>44000: GLOOM</li> <li>45000: VILEPLUME</li> <li>46000: PARAS</li> <li>47000: PARASECT</li> <li>48000: VENONAT</li> <li>49000: VENOMOTH</li> <li>50000: DIGLETT</li> <li>50001: DIGLETTALOLA</li> <li>51000: DUGTRIO</li> <li>51001: DUGTRIOALOLA</li> <li>52000: MEOWTH</li> <li>52001: MEOWTHALOLA</li> <li>52002: MEOWTHGALAR</li> <li>52003: MEOWTHGMAX</li> <li>53000: PERSIAN</li> <li>53001: PERSIANALOLA</li> <li>54000: PSYDUCK</li> <li>55000: GOLDUCK</li> <li>56000: MANKEY</li> <li>57000: PRIMEAPE</li> <li>58000: GROWLITHE</li> <li>58001: GROWLITHEHISUI</li> <li>59000: ARCANINE</li> <li>59001: ARCANINEHISUI</li> <li>60000: POLIWAG</li> <li>61000: POLIWHIRL</li> <li>62000: POLIWRATH</li> <li>63000: ABRA</li> <li>64000: KADABRA</li> <li>65000: ALAKAZAM</li> <li>65001: ALAKAZAMMEGA</li> <li>66000: MACHOP</li> <li>67000: MACHOKE</li> <li>68000: MACHAMP</li> <li>68001: MACHAMPGMAX</li> <li>69000: BELLSPROUT</li> <li>70000: WEEPINBELL</li> <li>71000: VICTREEBEL</li> <li>72000: TENTACOOL</li> <li>73000: TENTACRUEL</li> <li>74000: GEODUDE</li> <li>74001: GEODUDEALOLA</li> <li>75000: GRAVELER</li> <li>75001: GRAVELERALOLA</li> <li>76000: GOLEM</li> <li>76001: GOLEMALOLA</li> <li>77000: PONYTA</li> <li>77001: PONYTAGALAR</li> <li>78000: RAPIDASH</li> <li>78001: RAPIDASHGALAR</li> <li>79000: SLOWPOKE</li> <li>79001: SLOWPOKEGALAR</li> <li>80000: SLOWBRO</li> <li>80001: SLOWBROMEGA</li> <li>80002: SLOWBROGALAR</li> <li>81000: MAGNEMITE</li> <li>82000: MAGNETON</li> <li>83000: FARFETCHD</li> <li>83001: FARFETCHDGALAR</li> <li>84000: DODUO</li> <li>85000: DODRIO</li> <li>86000: SEEL</li> <li>87000: DEWGONG</li> <li>88000: GRIMER</li> <li>88001: GRIMERALOLA</li> <li>89000: MUK</li> <li>89001: MUKALOLA</li> <li>90000: SHELLDER</li> <li>91000: CLOYSTER</li> <li>92000: GASTLY</li> <li>93000: HAUNTER</li> <li>94000: GENGAR</li> <li>94001: GENGARMEGA</li> <li>94002: GENGARGMAX</li> <li>95000: ONIX</li> <li>96000: DROWZEE</li> <li>97000: HYPNO</li> <li>98000: KRABBY</li> <li>99000: KINGLER</li> <li>99001: KINGLERGMAX</li> <li>100000: VOLTORB</li> <li>100001: VOLTORBHISUI</li> <li>101000: ELECTRODE</li> <li>101001: ELECTRODEHISUI</li> <li>102000: EXEGGCUTE</li> <li>103000: EXEGGUTOR</li> <li>103001: EXEGGUTORALOLA</li> <li>104000: CUBONE</li> <li>105000: MAROWAK</li> <li>105001: MAROWAKALOLA</li> <li>105002: MAROWAKALOLATOTEM</li> <li>106000: HITMONLEE</li> <li>107000: HITMONCHAN</li> <li>108000: LICKITUNG</li> <li>109000: KOFFING</li> <li>110000: WEEZING</li> <li>110001: WEEZINGGALAR</li> <li>111000: RHYHORN</li> <li>112000: RHYDON</li> <li>113000: CHANSEY</li> <li>114000: TANGELA</li> <li>115000: KANGASKHAN</li> <li>115001: KANGASKHANMEGA</li> <li>116000: HORSEA</li> <li>117000: SEADRA</li> <li>118000: GOLDEEN</li> <li>119000: SEAKING</li> <li>120000: STARYU</li> <li>121000: STARMIE</li> <li>122000: MRMIME</li> <li>122001: MRMIMEGALAR</li> <li>123000: SCYTHER</li> <li>124000: JYNX</li> <li>125000: ELECTABUZZ</li> <li>126000: MAGMAR</li> <li>127000: PINSIR</li> <li>127001: PINSIRMEGA</li> <li>128000: TAUROS</li> <li>128001: TAUROSPALDEACOMBAT</li> <li>128002: TAUROSPALDEABLAZE</li> <li>128003: TAUROSPALDEAAQUA</li> <li>129000: MAGIKARP</li> <li>130000: GYARADOS</li> <li>130001: GYARADOSMEGA</li> <li>131000: LAPRAS</li> <li>131001: LAPRASGMAX</li> <li>132000: DITTO</li> <li>133000: EEVEE</li> <li>133001: EEVEESTARTER</li> <li>133002: EEVEEGMAX</li> <li>134000: VAPOREON</li> <li>135000: JOLTEON</li> <li>136000: FLAREON</li> <li>137000: PORYGON</li> <li>138000: OMANYTE</li> <li>139000: OMASTAR</li> <li>140000: KABUTO</li> <li>141000: KABUTOPS</li> <li>142000: AERODACTYL</li> <li>142001: AERODACTYLMEGA</li> <li>143000: SNORLAX</li> <li>143001: SNORLAXGMAX</li> <li>144000: ARTICUNO</li> <li>144001: ARTICUNOGALAR</li> <li>145000: ZAPDOS</li> <li>145001: ZAPDOSGALAR</li> <li>146000: MOLTRES</li> <li>146001: MOLTRESGALAR</li> <li>147000: DRATINI</li> <li>148000: DRAGONAIR</li> <li>149000: DRAGONITE</li> <li>150000: MEWTWO</li> <li>150001: MEWTWOMEGAX</li> <li>150002: MEWTWOMEGAY</li> <li>151000: MEW</li> <li>152000: CHIKORITA</li> <li>153000: BAYLEEF</li> <li>154000: MEGANIUM</li> <li>155000: CYNDAQUIL</li> <li>156000: QUILAVA</li> <li>157000: TYPHLOSION</li> <li>157001: TYPHLOSIONHISUI</li> <li>158000: TOTODILE</li> <li>159000: CROCONAW</li> <li>160000: FERALIGATR</li> <li>161000: SENTRET</li> <li>162000: FURRET</li> <li>163000: HOOTHOOT</li> <li>164000: NOCTOWL</li> <li>165000: LEDYBA</li> <li>166000: LEDIAN</li> <li>167000: SPINARAK</li> <li>168000: ARIADOS</li> <li>169000: CROBAT</li> <li>170000: CHINCHOU</li> <li>171000: LANTURN</li> <li>172000: PICHU</li> <li>172001: PICHUSPIKYEARED</li> <li>173000: CLEFFA</li> <li>174000: IGGLYBUFF</li> <li>175000: TOGEPI</li> <li>176000: TOGETIC</li> <li>177000: NATU</li> <li>178000: XATU</li> <li>179000: MAREEP</li> <li>180000: FLAAFFY</li> <li>181000: AMPHAROS</li> <li>181001: AMPHAROSMEGA</li> <li>182000: BELLOSSOM</li> <li>183000: MARILL</li> <li>184000: AZUMARILL</li> <li>185000: SUDOWOODO</li> <li>186000: POLITOED</li> <li>187000: HOPPIP</li> <li>188000: SKIPLOOM</li> <li>189000: JUMPLUFF</li> <li>190000: AIPOM</li> <li>191000: SUNKERN</li> <li>192000: SUNFLORA</li> <li>193000: YANMA</li> <li>194000: WOOPER</li> <li>194001: WOOPERPALDEA</li> <li>195000: QUAGSIRE</li> <li>196000: ESPEON</li> <li>197000: UMBREON</li> <li>198000: MURKROW</li> <li>199000: SLOWKING</li> <li>199001: SLOWKINGGALAR</li> <li>200000: MISDREAVUS</li> <li>201000: UNOWN</li> <li>201001: UNOWNB</li> <li>201002: UNOWNC</li> <li>201003: UNOWND</li> <li>201004: UNOWNE</li> <li>201005: UNOWNF</li> <li>201006: UNOWNG</li> <li>201007: UNOWNH</li> <li>201008: UNOWNI</li> <li>201009: UNOWNJ</li> <li>201010: UNOWNK</li> <li>201011: UNOWNL</li> <li>201012: UNOWNM</li> <li>201013: UNOWNN</li> <li>201014: UNOWNO</li> <li>201015: UNOWNP</li> <li>201016: UNOWNQ</li> <li>201017: UNOWNR</li> <li>201018: UNOWNS</li> <li>201019: UNOWNT</li> <li>201020: UNOWNU</li> <li>201021: UNOWNV</li> <li>201022: UNOWNW</li> <li>201023: UNOWNX</li> <li>201024: UNOWNY</li> <li>201025: UNOWNZ</li> <li>201026: UNOWNEXCLAMATION</li> <li>201027: UNOWNQUESTION</li> <li>202000: WOBBUFFET</li> <li>203000: GIRAFARIG</li> <li>204000: PINECO</li> <li>205000: FORRETRESS</li> <li>206000: DUNSPARCE</li> <li>207000: GLIGAR</li> <li>208000: STEELIX</li> <li>208001: STEELIXMEGA</li> <li>209000: SNUBBULL</li> <li>210000: GRANBULL</li> <li>211000: QWILFISH</li> <li>211001: QWILFISHHISUI</li> <li>212000: SCIZOR</li> <li>212001: SCIZORMEGA</li> <li>213000: SHUCKLE</li> <li>214000: HERACROSS</li> <li>214001: HERACROSSMEGA</li> <li>215000: SNEASEL</li> <li>215001: SNEASELHISUI</li> <li>216000: TEDDIURSA</li> <li>217000: URSARING</li> <li>218000: SLUGMA</li> <li>219000: MAGCARGO</li> <li>220000: SWINUB</li> <li>221000: PILOSWINE</li> <li>222000: CORSOLA</li> <li>222001: CORSOLAGALAR</li> <li>223000: REMORAID</li> <li>224000: OCTILLERY</li> <li>225000: DELIBIRD</li> <li>226000: MANTINE</li> <li>227000: SKARMORY</li> <li>228000: HOUNDOUR</li> <li>229000: HOUNDOOM</li> <li>229001: HOUNDOOMMEGA</li> <li>230000: KINGDRA</li> <li>231000: PHANPY</li> <li>232000: DONPHAN</li> <li>233000: PORYGON2</li> <li>234000: STANTLER</li> <li>235000: SMEARGLE</li> <li>236000: TYROGUE</li> <li>237000: HITMONTOP</li> <li>238000: SMOOCHUM</li> <li>239000: ELEKID</li> <li>240000: MAGBY</li> <li>241000: MILTANK</li> <li>242000: BLISSEY</li> <li>243000: RAIKOU</li> <li>244000: ENTEI</li> <li>245000: SUICUNE</li> <li>246000: LARVITAR</li> <li>247000: PUPITAR</li> <li>248000: TYRANITAR</li> <li>248001: TYRANITARMEGA</li> <li>249000: LUGIA</li> <li>250000: HOOH</li> <li>251000: CELEBI</li> <li>252000: TREECKO</li> <li>253000: GROVYLE</li> <li>254000: SCEPTILE</li> <li>254001: SCEPTILEMEGA</li> <li>255000: TORCHIC</li> <li>256000: COMBUSKEN</li> <li>257000: BLAZIKEN</li> <li>257001: BLAZIKENMEGA</li> <li>258000: MUDKIP</li> <li>259000: MARSHTOMP</li> <li>260000: SWAMPERT</li> <li>260001: SWAMPERTMEGA</li> <li>261000: POOCHYENA</li> <li>262000: MIGHTYENA</li> <li>263000: ZIGZAGOON</li> <li>263001: ZIGZAGOONGALAR</li> <li>264000: LINOONE</li> <li>264001: LINOONEGALAR</li> <li>265000: WURMPLE</li> <li>266000: SILCOON</li> <li>267000: BEAUTIFLY</li> <li>268000: CASCOON</li> <li>269000: DUSTOX</li> <li>270000: LOTAD</li> <li>271000: LOMBRE</li> <li>272000: LUDICOLO</li> <li>273000: SEEDOT</li> <li>274000: NUZLEAF</li> <li>275000: SHIFTRY</li> <li>276000: TAILLOW</li> <li>277000: SWELLOW</li> <li>278000: WINGULL</li> <li>279000: PELIPPER</li> <li>280000: RALTS</li> <li>281000: KIRLIA</li> <li>282000: GARDEVOIR</li> <li>282001: GARDEVOIRMEGA</li> <li>283000: SURSKIT</li> <li>284000: MASQUERAIN</li> <li>285000: SHROOMISH</li> <li>286000: BRELOOM</li> <li>287000: SLAKOTH</li> <li>288000: VIGOROTH</li> <li>289000: SLAKING</li> <li>290000: NINCADA</li> <li>291000: NINJASK</li> <li>292000: SHEDINJA</li> <li>293000: WHISMUR</li> <li>294000: LOUDRED</li> <li>295000: EXPLOUD</li> <li>296000: MAKUHITA</li> <li>297000: HARIYAMA</li> <li>298000: AZURILL</li> <li>299000: NOSEPASS</li> <li>300000: SKITTY</li> <li>301000: DELCATTY</li> <li>302000: SABLEYE</li> <li>302001: SABLEYEMEGA</li> <li>303000: MAWILE</li> <li>303001: MAWILEMEGA</li> <li>304000: ARON</li> <li>305000: LAIRON</li> <li>306000: AGGRON</li> <li>306001: AGGRONMEGA</li> <li>307000: MEDITITE</li> <li>308000: MEDICHAM</li> <li>308001: MEDICHAMMEGA</li> <li>309000: ELECTRIKE</li> <li>310000: MANECTRIC</li> <li>310001: MANECTRICMEGA</li> <li>311000: PLUSLE</li> <li>312000: MINUN</li> <li>313000: VOLBEAT</li> <li>314000: ILLUMISE</li> <li>315000: ROSELIA</li> <li>316000: GULPIN</li> <li>317000: SWALOT</li> <li>318000: CARVANHA</li> <li>319000: SHARPEDO</li> <li>319001: SHARPEDOMEGA</li> <li>320000: WAILMER</li> <li>321000: WAILORD</li> <li>322000: NUMEL</li> <li>323000: CAMERUPT</li> <li>323001: CAMERUPTMEGA</li> <li>324000: TORKOAL</li> <li>325000: SPOINK</li> <li>326000: GRUMPIG</li> <li>327000: SPINDA</li> <li>328000: TRAPINCH</li> <li>329000: VIBRAVA</li> <li>330000: FLYGON</li> <li>331000: CACNEA</li> <li>332000: CACTURNE</li> <li>333000: SWABLU</li> <li>334000: ALTARIA</li> <li>334001: ALTARIAMEGA</li> <li>335000: ZANGOOSE</li> <li>336000: SEVIPER</li> <li>337000: LUNATONE</li> <li>338000: SOLROCK</li> <li>339000: BARBOACH</li> <li>340000: WHISCASH</li> <li>341000: CORPHISH</li> <li>342000: CRAWDAUNT</li> <li>343000: BALTOY</li> <li>344000: CLAYDOL</li> <li>345000: LILEEP</li> <li>346000: CRADILY</li> <li>347000: ANORITH</li> <li>348000: ARMALDO</li> <li>349000: FEEBAS</li> <li>350000: MILOTIC</li> <li>351000: CASTFORM</li> <li>351001: CASTFORMSUNNY</li> <li>351002: CASTFORMRAINY</li> <li>351003: CASTFORMSNOWY</li> <li>352000: KECLEON</li> <li>353000: SHUPPET</li> <li>354000: BANETTE</li> <li>354001: BANETTEMEGA</li> <li>355000: DUSKULL</li> <li>356000: DUSCLOPS</li> <li>357000: TROPIUS</li> <li>358000: CHIMECHO</li> <li>359000: ABSOL</li> <li>359001: ABSOLMEGA</li> <li>360000: WYNAUT</li> <li>361000: SNORUNT</li> <li>362000: GLALIE</li> <li>362001: GLALIEMEGA</li> <li>363000: SPHEAL</li> <li>364000: SEALEO</li> <li>365000: WALREIN</li> <li>366000: CLAMPERL</li> <li>367000: HUNTAIL</li> <li>368000: GOREBYSS</li> <li>369000: RELICANTH</li> <li>370000: LUVDISC</li> <li>371000: BAGON</li> <li>372000: SHELGON</li> <li>373000: SALAMENCE</li> <li>373001: SALAMENCEMEGA</li> <li>374000: BELDUM</li> <li>375000: METANG</li> <li>376000: METAGROSS</li> <li>376001: METAGROSSMEGA</li> <li>377000: REGIROCK</li> <li>378000: REGICE</li> <li>379000: REGISTEEL</li> <li>380000: LATIAS</li> <li>380001: LATIASMEGA</li> <li>381000: LATIOS</li> <li>381001: LATIOSMEGA</li> <li>382000: KYOGRE</li> <li>382001: KYOGREPRIMAL</li> <li>383000: GROUDON</li> <li>383001: GROUDONPRIMAL</li> <li>384000: RAYQUAZA</li> <li>384001: RAYQUAZAMEGA</li> <li>385000: JIRACHI</li> <li>386000: DEOXYS</li> <li>386001: DEOXYSATTACK</li> <li>386002: DEOXYSDEFENSE</li> <li>386003: DEOXYSSPEED</li> <li>387000: TURTWIG</li> <li>388000: GROTLE</li> <li>389000: TORTERRA</li> <li>390000: CHIMCHAR</li> <li>391000: MONFERNO</li> <li>392000: INFERNAPE</li> <li>393000: PIPLUP</li> <li>394000: PRINPLUP</li> <li>395000: EMPOLEON</li> <li>396000: STARLY</li> <li>397000: STARAVIA</li> <li>398000: STARAPTOR</li> <li>399000: BIDOOF</li> <li>400000: BIBAREL</li> <li>401000: KRICKETOT</li> <li>402000: KRICKETUNE</li> <li>403000: SHINX</li> <li>404000: LUXIO</li> <li>405000: LUXRAY</li> <li>406000: BUDEW</li> <li>407000: ROSERADE</li> <li>408000: CRANIDOS</li> <li>409000: RAMPARDOS</li> <li>410000: SHIELDON</li> <li>411000: BASTIODON</li> <li>412000: BURMY</li> <li>412001: BURMYSANDY</li> <li>412002: BURMYTRASH</li> <li>413000: WORMADAM</li> <li>413001: WORMADAMSANDY</li> <li>413002: WORMADAMTRASH</li> <li>414000: MOTHIM</li> <li>415000: COMBEE</li> <li>416000: VESPIQUEN</li> <li>417000: PACHIRISU</li> <li>418000: BUIZEL</li> <li>419000: FLOATZEL</li> <li>420000: CHERUBI</li> <li>421000: CHERRIM</li> <li>421001: CHERRIMSUNSHINE</li> <li>422000: SHELLOS</li> <li>422001: SHELLOSEAST</li> <li>423000: GASTRODON</li> <li>423001: GASTRODONEAST</li> <li>424000: AMBIPOM</li> <li>425000: DRIFLOON</li> <li>426000: DRIFBLIM</li> <li>427000: BUNEARY</li> <li>428000: LOPUNNY</li> <li>428001: LOPUNNYMEGA</li> <li>429000: MISMAGIUS</li> <li>430000: HONCHKROW</li> <li>431000: GLAMEOW</li> <li>432000: PURUGLY</li> <li>433000: CHINGLING</li> <li>434000: STUNKY</li> <li>435000: SKUNTANK</li> <li>436000: BRONZOR</li> <li>437000: BRONZONG</li> <li>438000: BONSLY</li> <li>439000: MIMEJR</li> <li>440000: HAPPINY</li> <li>441000: CHATOT</li> <li>442000: SPIRITOMB</li> <li>443000: GIBLE</li> <li>444000: GABITE</li> <li>445000: GARCHOMP</li> <li>445001: GARCHOMPMEGA</li> <li>446000: MUNCHLAX</li> <li>447000: RIOLU</li> <li>448000: LUCARIO</li> <li>448001: LUCARIOMEGA</li> <li>449000: HIPPOPOTAS</li> <li>450000: HIPPOWDON</li> <li>451000: SKORUPI</li> <li>452000: DRAPION</li> <li>453000: CROAGUNK</li> <li>454000: TOXICROAK</li> <li>455000: CARNIVINE</li> <li>456000: FINNEON</li> <li>457000: LUMINEON</li> <li>458000: MANTYKE</li> <li>459000: SNOVER</li> <li>460000: ABOMASNOW</li> <li>460001: ABOMASNOWMEGA</li> <li>461000: WEAVILE</li> <li>462000: MAGNEZONE</li> <li>463000: LICKILICKY</li> <li>464000: RHYPERIOR</li> <li>465000: TANGROWTH</li> <li>466000: ELECTIVIRE</li> <li>467000: MAGMORTAR</li> <li>468000: TOGEKISS</li> <li>469000: YANMEGA</li> <li>470000: LEAFEON</li> <li>471000: GLACEON</li> <li>472000: GLISCOR</li> <li>473000: MAMOSWINE</li> <li>474000: PORYGONZ</li> <li>475000: GALLADE</li> <li>475001: GALLADEMEGA</li> <li>476000: PROBOPASS</li> <li>477000: DUSKNOIR</li> <li>478000: FROSLASS</li> <li>479000: ROTOM</li> <li>479001: ROTOMHEAT</li> <li>479002: ROTOMWASH</li> <li>479003: ROTOMFROST</li> <li>479004: ROTOMFAN</li> <li>479005: ROTOMMOW</li> <li>480000: UXIE</li> <li>481000: MESPRIT</li> <li>482000: AZELF</li> <li>483000: DIALGA</li> <li>483001: DIALGAORIGIN</li> <li>484000: PALKIA</li> <li>484001: PALKIAORIGIN</li> <li>485000: HEATRAN</li> <li>486000: REGIGIGAS</li> <li>487000: GIRATINA</li> <li>487001: GIRATINAORIGIN</li> <li>488000: CRESSELIA</li> <li>489000: PHIONE</li> <li>490000: MANAPHY</li> <li>491000: DARKRAI</li> <li>492000: SHAYMIN</li> <li>492001: SHAYMINSKY</li> <li>493000: ARCEUS</li> <li>493001: ARCEUSBUG</li> <li>493002: ARCEUSDARK</li> <li>493003: ARCEUSDRAGON</li> <li>493004: ARCEUSELECTRIC</li> <li>493005: ARCEUSFAIRY</li> <li>493006: ARCEUSFIGHTING</li> <li>493007: ARCEUSFIRE</li> <li>493008: ARCEUSFLYING</li> <li>493009: ARCEUSGHOST</li> <li>493010: ARCEUSGRASS</li> <li>493011: ARCEUSGROUND</li> <li>493012: ARCEUSICE</li> <li>493013: ARCEUSPOISON</li> <li>493014: ARCEUSPSYCHIC</li> <li>493015: ARCEUSROCK</li> <li>493016: ARCEUSSTEEL</li> <li>493017: ARCEUSWATER</li> <li>494000: VICTINI</li> <li>495000: SNIVY</li> <li>496000: SERVINE</li> <li>497000: SERPERIOR</li> <li>498000: TEPIG</li> <li>499000: PIGNITE</li> <li>500000: EMBOAR</li> <li>501000: OSHAWOTT</li> <li>502000: DEWOTT</li> <li>503000: SAMUROTT</li> <li>503001: SAMUROTTHISUI</li> <li>504000: PATRAT</li> <li>505000: WATCHOG</li> <li>506000: LILLIPUP</li> <li>507000: HERDIER</li> <li>508000: STOUTLAND</li> <li>509000: PURRLOIN</li> <li>510000: LIEPARD</li> <li>511000: PANSAGE</li> <li>512000: SIMISAGE</li> <li>513000: PANSEAR</li> <li>514000: SIMISEAR</li> <li>515000: PANPOUR</li> <li>516000: SIMIPOUR</li> <li>517000: MUNNA</li> <li>518000: MUSHARNA</li> <li>519000: PIDOVE</li> <li>520000: TRANQUILL</li> <li>521000: UNFEZANT</li> <li>522000: BLITZLE</li> <li>523000: ZEBSTRIKA</li> <li>524000: ROGGENROLA</li> <li>525000: BOLDORE</li> <li>526000: GIGALITH</li> <li>527000: WOOBAT</li> <li>528000: SWOOBAT</li> <li>529000: DRILBUR</li> <li>530000: EXCADRILL</li> <li>531000: AUDINO</li> <li>531001: AUDINOMEGA</li> <li>532000: TIMBURR</li> <li>533000: GURDURR</li> <li>534000: CONKELDURR</li> <li>535000: TYMPOLE</li> <li>536000: PALPITOAD</li> <li>537000: SEISMITOAD</li> <li>538000: THROH</li> <li>539000: SAWK</li> <li>540000: SEWADDLE</li> <li>541000: SWADLOON</li> <li>542000: LEAVANNY</li> <li>543000: VENIPEDE</li> <li>544000: WHIRLIPEDE</li> <li>545000: SCOLIPEDE</li> <li>546000: COTTONEE</li> <li>547000: WHIMSICOTT</li> <li>548000: PETILIL</li> <li>549000: LILLIGANT</li> <li>549001: LILLIGANTHISUI</li> <li>550000: BASCULIN</li> <li>550001: BASCULINBLUESTRIPED</li> <li>550002: BASCULINWHITESTRIPED</li> <li>551000: SANDILE</li> <li>552000: KROKOROK</li> <li>553000: KROOKODILE</li> <li>554000: DARUMAKA</li> <li>554001: DARUMAKAGALAR</li> <li>555000: DARMANITAN</li> <li>555001: DARMANITANZEN</li> <li>555002: DARMANITANGALAR</li> <li>555003: DARMANITANGALARZEN</li> <li>556000: MARACTUS</li> <li>557000: DWEBBLE</li> <li>558000: CRUSTLE</li> <li>559000: SCRAGGY</li> <li>560000: SCRAFTY</li> <li>561000: SIGILYPH</li> <li>562000: YAMASK</li> <li>562001: YAMASKGALAR</li> <li>563000: COFAGRIGUS</li> <li>564000: TIRTOUGA</li> <li>565000: CARRACOSTA</li> <li>566000: ARCHEN</li> <li>567000: ARCHEOPS</li> <li>568000: TRUBBISH</li> <li>569000: GARBODOR</li> <li>569001: GARBODORGMAX</li> <li>570000: ZORUA</li> <li>570001: ZORUAHISUI</li> <li>571000: ZOROARK</li> <li>571001: ZOROARKHISUI</li> <li>572000: MINCCINO</li> <li>573000: CINCCINO</li> <li>574000: GOTHITA</li> <li>575000: GOTHORITA</li> <li>576000: GOTHITELLE</li> <li>577000: SOLOSIS</li> <li>578000: DUOSION</li> <li>579000: REUNICLUS</li> <li>580000: DUCKLETT</li> <li>581000: SWANNA</li> <li>582000: VANILLITE</li> <li>583000: VANILLISH</li> <li>584000: VANILLUXE</li> <li>585000: DEERLING</li> <li>585001: DEERLINGSUMMER</li> <li>585002: DEERLINGAUTUMN</li> <li>585003: DEERLINGWINTER</li> <li>586000: SAWSBUCK</li> <li>586001: SAWSBUCKSUMMER</li> <li>586002: SAWSBUCKAUTUMN</li> <li>586003: SAWSBUCKWINTER</li> <li>587000: EMOLGA</li> <li>588000: KARRABLAST</li> <li>589000: ESCAVALIER</li> <li>590000: FOONGUS</li> <li>591000: AMOONGUSS</li> <li>592000: FRILLISH</li> <li>593000: JELLICENT</li> <li>594000: ALOMOMOLA</li> <li>595000: JOLTIK</li> <li>596000: GALVANTULA</li> <li>597000: FERROSEED</li> <li>598000: FERROTHORN</li> <li>599000: KLINK</li> <li>600000: KLANG</li> <li>601000: KLINKLANG</li> <li>602000: TYNAMO</li> <li>603000: EELEKTRIK</li> <li>604000: EELEKTROSS</li> <li>605000: ELGYEM</li> <li>606000: BEHEEYEM</li> <li>607000: LITWICK</li> <li>608000: LAMPENT</li> <li>609000: CHANDELURE</li> <li>610000: AXEW</li> <li>611000: FRAXURE</li> <li>612000: HAXORUS</li> <li>613000: CUBCHOO</li> <li>614000: BEARTIC</li> <li>615000: CRYOGONAL</li> <li>616000: SHELMET</li> <li>617000: ACCELGOR</li> <li>618000: STUNFISK</li> <li>618001: STUNFISKGALAR</li> <li>619000: MIENFOO</li> <li>620000: MIENSHAO</li> <li>621000: DRUDDIGON</li> <li>622000: GOLETT</li> <li>623000: GOLURK</li> <li>624000: PAWNIARD</li> <li>625000: BISHARP</li> <li>626000: BOUFFALANT</li> <li>627000: RUFFLET</li> <li>628000: BRAVIARY</li> <li>628001: BRAVIARYHISUI</li> <li>629000: VULLABY</li> <li>630000: MANDIBUZZ</li> <li>631000: HEATMOR</li> <li>632000: DURANT</li> <li>633000: DEINO</li> <li>634000: ZWEILOUS</li> <li>635000: HYDREIGON</li> <li>636000: LARVESTA</li> <li>637000: VOLCARONA</li> <li>638000: COBALION</li> <li>639000: TERRAKION</li> <li>640000: VIRIZION</li> <li>641000: TORNADUS</li> <li>641001: TORNADUSTHERIAN</li> <li>642000: THUNDURUS</li> <li>642001: THUNDURUSTHERIAN</li> <li>643000: RESHIRAM</li> <li>644000: ZEKROM</li> <li>645000: LANDORUS</li> <li>645001: LANDORUSTHERIAN</li> <li>646000: KYUREM</li> <li>646001: KYUREMBLACK</li> <li>646002: KYUREMWHITE</li> <li>647000: KELDEO</li> <li>647001: KELDEORESOLUTE</li> <li>648000: MELOETTA</li> <li>648001: MELOETTAPIROUETTE</li> <li>649000: GENESECT</li> <li>649001: GENESECTDOUSE</li> <li>649002: GENESECTSHOCK</li> <li>649003: GENESECTBURN</li> <li>649004: GENESECTCHILL</li> <li>650000: CHESPIN</li> <li>651000: QUILLADIN</li> <li>652000: CHESNAUGHT</li> <li>653000: FENNEKIN</li> <li>654000: BRAIXEN</li> <li>655000: DELPHOX</li> <li>656000: FROAKIE</li> <li>657000: FROGADIER</li> <li>658000: GRENINJA</li> <li>658001: GRENINJABOND</li> <li>658002: GRENINJAASH</li> <li>659000: BUNNELBY</li> <li>660000: DIGGERSBY</li> <li>661000: FLETCHLING</li> <li>662000: FLETCHINDER</li> <li>663000: TALONFLAME</li> <li>664000: SCATTERBUG</li> <li>665000: SPEWPA</li> <li>666000: VIVILLON</li> <li>666001: VIVILLONARCHIPELAGO</li> <li>666002: VIVILLONCONTINENTAL</li> <li>666003: VIVILLONELEGANT</li> <li>666004: VIVILLONGARDEN</li> <li>666005: VIVILLONHIGHPLAINS</li> <li>666006: VIVILLONICYSNOW</li> <li>666007: VIVILLONJUNGLE</li> <li>666008: VIVILLONMARINE</li> <li>666009: VIVILLONMODERN</li> <li>666010: VIVILLONMONSOON</li> <li>666011: VIVILLONOCEAN</li> <li>666012: VIVILLONPOLAR</li> <li>666013: VIVILLONRIVER</li> <li>666014: VIVILLONSANDSTORM</li> <li>666015: VIVILLONSAVANNA</li> <li>666016: VIVILLONSUN</li> <li>666017: VIVILLONTUNDRA</li> <li>666018: VIVILLONFANCY</li> <li>666019: VIVILLONPOKEBALL</li> <li>667000: LITLEO</li> <li>668000: PYROAR</li> <li>669000: FLABEBE</li> <li>669001: FLABEBEBLUE</li> <li>669002: FLABEBEORANGE</li> <li>669003: FLABEBEWHITE</li> <li>669004: FLABEBEYELLOW</li> <li>670000: FLOETTE</li> <li>670001: FLOETTEBLUE</li> <li>670002: FLOETTEORANGE</li> <li>670003: FLOETTEWHITE</li> <li>670004: FLOETTEYELLOW</li> <li>670005: FLOETTEETERNAL</li> <li>671000: FLORGES</li> <li>671001: FLORGESBLUE</li> <li>671002: FLORGESORANGE</li> <li>671003: FLORGESWHITE</li> <li>671004: FLORGESYELLOW</li> <li>672000: SKIDDO</li> <li>673000: GOGOAT</li> <li>674000: PANCHAM</li> <li>675000: PANGORO</li> <li>676000: FURFROU</li> <li>676001: FURFROUDANDY</li> <li>676002: FURFROUDEBUTANTE</li> <li>676003: FURFROUDIAMOND</li> <li>676004: FURFROUHEART</li> <li>676005: FURFROUKABUKI</li> <li>676006: FURFROULAREINE</li> <li>676007: FURFROUMATRON</li> <li>676008: FURFROUPHARAOH</li> <li>676009: FURFROUSTAR</li> <li>677000: ESPURR</li> <li>678000: MEOWSTIC</li> <li>678001: MEOWSTICF</li> <li>679000: HONEDGE</li> <li>680000: DOUBLADE</li> <li>681000: AEGISLASH</li> <li>681001: AEGISLASHBLADE</li> <li>682000: SPRITZEE</li> <li>683000: AROMATISSE</li> <li>684000: SWIRLIX</li> <li>685000: SLURPUFF</li> <li>686000: INKAY</li> <li>687000: MALAMAR</li> <li>688000: BINACLE</li> <li>689000: BARBARACLE</li> <li>690000: SKRELP</li> <li>691000: DRAGALGE</li> <li>692000: CLAUNCHER</li> <li>693000: CLAWITZER</li> <li>694000: HELIOPTILE</li> <li>695000: HELIOLISK</li> <li>696000: TYRUNT</li> <li>697000: TYRANTRUM</li> <li>698000: AMAURA</li> <li>699000: AURORUS</li> <li>700000: SYLVEON</li> <li>701000: HAWLUCHA</li> <li>702000: DEDENNE</li> <li>703000: CARBINK</li> <li>704000: GOOMY</li> <li>705000: SLIGGOO</li> <li>705001: SLIGGOOHISUI</li> <li>706000: GOODRA</li> <li>706001: GOODRAHISUI</li> <li>707000: KLEFKI</li> <li>708000: PHANTUMP</li> <li>709000: TREVENANT</li> <li>710000: PUMPKABOO</li> <li>710001: PUMPKABOOSMALL</li> <li>710002: PUMPKABOOLARGE</li> <li>710003: PUMPKABOOSUPER</li> <li>711000: GOURGEIST</li> <li>711001: GOURGEISTSMALL</li> <li>711002: GOURGEISTLARGE</li> <li>711003: GOURGEISTSUPER</li> <li>712000: BERGMITE</li> <li>713000: AVALUGG</li> <li>713001: AVALUGGHISUI</li> <li>714000: NOIBAT</li> <li>715000: NOIVERN</li> <li>716000: XERNEAS</li> <li>716001: XERNEASNEUTRAL</li> <li>717000: YVELTAL</li> <li>718000: ZYGARDE</li> <li>718001: ZYGARDE10</li> <li>718002: ZYGARDECOMPLETE</li> <li>719000: DIANCIE</li> <li>719001: DIANCIEMEGA</li> <li>720000: HOOPA</li> <li>720001: HOOPAUNBOUND</li> <li>721000: VOLCANION</li> <li>722000: ROWLET</li> <li>723000: DARTRIX</li> <li>724000: DECIDUEYE</li> <li>724001: DECIDUEYEHISUI</li> <li>725000: LITTEN</li> <li>726000: TORRACAT</li> <li>727000: INCINEROAR</li> <li>728000: POPPLIO</li> <li>729000: BRIONNE</li> <li>730000: PRIMARINA</li> <li>731000: PIKIPEK</li> <li>732000: TRUMBEAK</li> <li>733000: TOUCANNON</li> <li>734000: YUNGOOS</li> <li>735000: GUMSHOOS</li> <li>735001: GUMSHOOSTOTEM</li> <li>736000: GRUBBIN</li> <li>737000: CHARJABUG</li> <li>738000: VIKAVOLT</li> <li>738001: VIKAVOLTTOTEM</li> <li>739000: CRABRAWLER</li> <li>740000: CRABOMINABLE</li> <li>741000: ORICORIO</li> <li>741001: ORICORIOPOMPOM</li> <li>741002: ORICORIOPAU</li> <li>741003: ORICORIOSENSU</li> <li>742000: CUTIEFLY</li> <li>743000: RIBOMBEE</li> <li>743001: RIBOMBEETOTEM</li> <li>744000: ROCKRUFF</li> <li>745000: LYCANROC</li> <li>745001: LYCANROCMIDNIGHT</li> <li>745002: LYCANROCDUSK</li> <li>746000: WISHIWASHI</li> <li>746001: WISHIWASHISCHOOL</li> <li>747000: MAREANIE</li> <li>748000: TOXAPEX</li> <li>749000: MUDBRAY</li> <li>750000: MUDSDALE</li> <li>751000: DEWPIDER</li> <li>752000: ARAQUANID</li> <li>752001: ARAQUANIDTOTEM</li> <li>753000: FOMANTIS</li> <li>754000: LURANTIS</li> <li>754001: LURANTISTOTEM</li> <li>755000: MORELULL</li> <li>756000: SHIINOTIC</li> <li>757000: SALANDIT</li> <li>758000: SALAZZLE</li> <li>758001: SALAZZLETOTEM</li> <li>759000: STUFFUL</li> <li>760000: BEWEAR</li> <li>761000: BOUNSWEET</li> <li>762000: STEENEE</li> <li>763000: TSAREENA</li> <li>764000: COMFEY</li> <li>765000: ORANGURU</li> <li>766000: PASSIMIAN</li> <li>767000: WIMPOD</li> <li>768000: GOLISOPOD</li> <li>769000: SANDYGAST</li> <li>770000: PALOSSAND</li> <li>771000: PYUKUMUKU</li> <li>772000: TYPENULL</li> <li>773000: SILVALLY</li> <li>773001: SILVALLYBUG</li> <li>773002: SILVALLYDARK</li> <li>773003: SILVALLYDRAGON</li> <li>773004: SILVALLYELECTRIC</li> <li>773005: SILVALLYFAIRY</li> <li>773006: SILVALLYFIGHTING</li> <li>773007: SILVALLYFIRE</li> <li>773008: SILVALLYFLYING</li> <li>773009: SILVALLYGHOST</li> <li>773010: SILVALLYGRASS</li> <li>773011: SILVALLYGROUND</li> <li>773012: SILVALLYICE</li> <li>773013: SILVALLYPOISON</li> <li>773014: SILVALLYPSYCHIC</li> <li>773015: SILVALLYROCK</li> <li>773016: SILVALLYSTEEL</li> <li>773017: SILVALLYWATER</li> <li>774000: MINIOR</li> <li>774001: MINIORORANGE</li> <li>774002: MINIORYELLOW</li> <li>774003: MINIORGREEN</li> <li>774004: MINIORBLUE</li> <li>774005: MINIORINDIGO</li> <li>774006: MINIORVIOLET</li> <li>774007: MINIORMETEOR</li> <li>775000: KOMALA</li> <li>776000: TURTONATOR</li> <li>777000: TOGEDEMARU</li> <li>777001: TOGEDEMARUTOTEM</li> <li>778000: MIMIKYU</li> <li>778001: MIMIKYUBUSTED</li> <li>778002: MIMIKYUTOTEM</li> <li>778003: MIMIKYUBUSTEDTOTEM</li> <li>779000: BRUXISH</li> <li>780000: DRAMPA</li> <li>781000: DHELMISE</li> <li>782000: JANGMOO</li> <li>783000: HAKAMOO</li> <li>784000: KOMMOO</li> <li>784001: KOMMOOTOTEM</li> <li>785000: TAPUKOKO</li> <li>786000: TAPULELE</li> <li>787000: TAPUBULU</li> <li>788000: TAPUFINI</li> <li>789000: COSMOG</li> <li>790000: COSMOEM</li> <li>791000: SOLGALEO</li> <li>792000: LUNALA</li> <li>793000: NIHILEGO</li> <li>794000: BUZZWOLE</li> <li>795000: PHEROMOSA</li> <li>796000: XURKITREE</li> <li>797000: CELESTEELA</li> <li>798000: KARTANA</li> <li>799000: GUZZLORD</li> <li>800000: NECROZMA</li> <li>800001: NECROZMADUSKMANE</li> <li>800002: NECROZMADAWNWINGS</li> <li>800003: NECROZMAULTRA</li> <li>801000: MAGEARNA</li> <li>801001: MAGEARNAORIGINAL</li> <li>802000: MARSHADOW</li> <li>803000: POIPOLE</li> <li>804000: NAGANADEL</li> <li>805000: STAKATAKA</li> <li>806000: BLACEPHALON</li> <li>807000: ZERAORA</li> <li>808000: MELTAN</li> <li>809000: MELMETAL</li> <li>809001: MELMETALGMAX</li> <li>810000: GROOKEY</li> <li>811000: THWACKEY</li> <li>812000: RILLABOOM</li> <li>812001: RILLABOOMGMAX</li> <li>813000: SCORBUNNY</li> <li>814000: RABOOT</li> <li>815000: CINDERACE</li> <li>815001: CINDERACEGMAX</li> <li>816000: SOBBLE</li> <li>817000: DRIZZILE</li> <li>818000: INTELEON</li> <li>818001: INTELEONGMAX</li> <li>819000: SKWOVET</li> <li>820000: GREEDENT</li> <li>821000: ROOKIDEE</li> <li>822000: CORVISQUIRE</li> <li>823000: CORVIKNIGHT</li> <li>823001: CORVIKNIGHTGMAX</li> <li>824000: BLIPBUG</li> <li>825000: DOTTLER</li> <li>826000: ORBEETLE</li> <li>826001: ORBEETLEGMAX</li> <li>827000: NICKIT</li> <li>828000: THIEVUL</li> <li>829000: GOSSIFLEUR</li> <li>830000: ELDEGOSS</li> <li>831000: WOOLOO</li> <li>832000: DUBWOOL</li> <li>833000: CHEWTLE</li> <li>834000: DREDNAW</li> <li>834001: DREDNAWGMAX</li> <li>835000: YAMPER</li> <li>836000: BOLTUND</li> <li>837000: ROLYCOLY</li> <li>838000: CARKOL</li> <li>839000: COALOSSAL</li> <li>839001: COALOSSALGMAX</li> <li>840000: APPLIN</li> <li>841000: FLAPPLE</li> <li>841001: FLAPPLEGMAX</li> <li>842000: APPLETUN</li> <li>842001: APPLETUNGMAX</li> <li>843000: SILICOBRA</li> <li>844000: SANDACONDA</li> <li>844001: SANDACONDAGMAX</li> <li>845000: CRAMORANT</li> <li>845001: CRAMORANTGULPING</li> <li>845002: CRAMORANTGORGING</li> <li>846000: ARROKUDA</li> <li>847000: BARRASKEWDA</li> <li>848000: TOXEL</li> <li>849000: TOXTRICITY</li> <li>849001: TOXTRICITYLOWKEY</li> <li>849002: TOXTRICITYGMAX</li> <li>849003: TOXTRICITYLOWKEYGMAX</li> <li>850000: SIZZLIPEDE</li> <li>851000: CENTISKORCH</li> <li>851001: CENTISKORCHGMAX</li> <li>852000: CLOBBOPUS</li> <li>853000: GRAPPLOCT</li> <li>854000: SINISTEA</li> <li>854001: SINISTEAANTIQUE</li> <li>855000: POLTEAGEIST</li> <li>855001: POLTEAGEISTANTIQUE</li> <li>856000: HATENNA</li> <li>857000: HATTREM</li> <li>858000: HATTERENE</li> <li>858001: HATTERENEGMAX</li> <li>859000: IMPIDIMP</li> <li>860000: MORGREM</li> <li>861000: GRIMMSNARL</li> <li>861001: GRIMMSNARLGMAX</li> <li>862000: OBSTAGOON</li> <li>863000: PERRSERKER</li> <li>864000: CURSOLA</li> <li>865000: SIRFETCHD</li> <li>866000: MRRIME</li> <li>867000: RUNERIGUS</li> <li>868000: MILCERY</li> <li>869000: ALCREMIE</li> <li>869001: ALCREMIERUBYCREAM</li> <li>869002: ALCREMIEMATCHACREAM</li> <li>869003: ALCREMIEMINTCREAM</li> <li>869004: ALCREMIELEMONCREAM</li> <li>869005: ALCREMIESALTEDCREAM</li> <li>869006: ALCREMIERUBYSWIRL</li> <li>869007: ALCREMIECARAMELSWIRL</li> <li>869008: ALCREMIERAINBOWSWIRL</li> <li>869009: ALCREMIEGMAX</li> <li>870000: FALINKS</li> <li>871000: PINCURCHIN</li> <li>872000: SNOM</li> <li>873000: FROSMOTH</li> <li>874000: STONJOURNER</li> <li>875000: EISCUE</li> <li>875001: EISCUENOICE</li> <li>876000: INDEEDEE</li> <li>876001: INDEEDEEF</li> <li>877000: MORPEKO</li> <li>877001: MORPEKOHANGRY</li> <li>878000: CUFANT</li> <li>879000: COPPERAJAH</li> <li>879001: COPPERAJAHGMAX</li> <li>880000: DRACOZOLT</li> <li>881000: ARCTOZOLT</li> <li>882000: DRACOVISH</li> <li>883000: ARCTOVISH</li> <li>884000: DURALUDON</li> <li>884001: DURALUDONGMAX</li> <li>885000: DREEPY</li> <li>886000: DRAKLOAK</li> <li>887000: DRAGAPULT</li> <li>888000: ZACIAN</li> <li>888001: ZACIANCROWNED</li> <li>889000: ZAMAZENTA</li> <li>889001: ZAMAZENTACROWNED</li> <li>890000: ETERNATUS</li> <li>890001: ETERNATUSETERNAMAX</li> <li>891000: KUBFU</li> <li>892000: URSHIFU</li> <li>892001: URSHIFURAPIDSTRIKE</li> <li>892002: URSHIFUGMAX</li> <li>892003: URSHIFURAPIDSTRIKEGMAX</li> <li>893000: ZARUDE</li> <li>893001: ZARUDEDADA</li> <li>894000: REGIELEKI</li> <li>895000: REGIDRAGO</li> <li>896000: GLASTRIER</li> <li>897000: SPECTRIER</li> <li>898000: CALYREX</li> <li>898001: CALYREXICE</li> <li>898002: CALYREXSHADOW</li> <li>899000: WYRDEER</li> <li>900000: KLEAVOR</li> <li>901000: URSALUNA</li> <li>901001: URSALUNABLOODMOON</li> <li>902000: BASCULEGION</li> <li>902001: BASCULEGIONF</li> <li>903000: SNEASLER</li> <li>904000: OVERQWIL</li> <li>905000: ENAMORUS</li> <li>905001: ENAMORUSTHERIAN</li> <li>906000: SPRIGATITO</li> <li>907000: FLORAGATO</li> <li>908000: MEOWSCARADA</li> <li>909000: FUECOCO</li> <li>910000: CROCALOR</li> <li>911000: SKELEDIRGE</li> <li>912000: QUAXLY</li> <li>913000: QUAXWELL</li> <li>914000: QUAQUAVAL</li> <li>915000: LECHONK</li> <li>916000: OINKOLOGNE</li> <li>916001: OINKOLOGNEF</li> <li>917000: TAROUNTULA</li> <li>918000: SPIDOPS</li> <li>919000: NYMBLE</li> <li>920000: LOKIX</li> <li>921000: PAWMI</li> <li>922000: PAWMO</li> <li>923000: PAWMOT</li> <li>924000: TANDEMAUS</li> <li>925000: MAUSHOLD</li> <li>925001: MAUSHOLDFOUR</li> <li>926000: FIDOUGH</li> <li>927000: DACHSBUN</li> <li>928000: SMOLIV</li> <li>929000: DOLLIV</li> <li>930000: ARBOLIVA</li> <li>931000: SQUAWKABILLY</li> <li>931001: SQUAWKABILLYBLUE</li> <li>931002: SQUAWKABILLYYELLOW</li> <li>931003: SQUAWKABILLYWHITE</li> <li>932000: NACLI</li> <li>933000: NACLSTACK</li> <li>934000: GARGANACL</li> <li>935000: CHARCADET</li> <li>936000: ARMAROUGE</li> <li>937000: CERULEDGE</li> <li>938000: TADBULB</li> <li>939000: BELLIBOLT</li> <li>940000: WATTREL</li> <li>941000: KILOWATTREL</li> <li>942000: MASCHIFF</li> <li>943000: MABOSSTIFF</li> <li>944000: SHROODLE</li> <li>945000: GRAFAIAI</li> <li>946000: BRAMBLIN</li> <li>947000: BRAMBLEGHAST</li> <li>948000: TOEDSCOOL</li> <li>949000: TOEDSCRUEL</li> <li>950000: KLAWF</li> <li>951000: CAPSAKID</li> <li>952000: SCOVILLAIN</li> <li>953000: RELLOR</li> <li>954000: RABSCA</li> <li>955000: FLITTLE</li> <li>956000: ESPATHRA</li> <li>957000: TINKATINK</li> <li>958000: TINKATUFF</li> <li>959000: TINKATON</li> <li>960000: WIGLETT</li> <li>961000: WUGTRIO</li> <li>962000: BOMBIRDIER</li> <li>963000: FINIZEN</li> <li>964000: PALAFIN</li> <li>964001: PALAFINHERO</li> <li>965000: VAROOM</li> <li>966000: REVAVROOM</li> <li>967000: CYCLIZAR</li> <li>968000: ORTHWORM</li> <li>969000: GLIMMET</li> <li>970000: GLIMMORA</li> <li>971000: GREAVARD</li> <li>972000: HOUNDSTONE</li> <li>973000: FLAMIGO</li> <li>974000: CETODDLE</li> <li>975000: CETITAN</li> <li>976000: VELUZA</li> <li>977000: DONDOZO</li> <li>978000: TATSUGIRI</li> <li>978001: TATSUGIRIDROOPY</li> <li>978002: TATSUGIRISTRETCHY</li> <li>979000: ANNIHILAPE</li> <li>980000: CLODSIRE</li> <li>981000: FARIGIRAF</li> <li>982000: DUDUNSPARCE</li> <li>982001: DUDUNSPARCETHREESEGMENT</li> <li>983000: KINGAMBIT</li> <li>984000: GREATTUSK</li> <li>985000: SCREAMTAIL</li> <li>986000: BRUTEBONNET</li> <li>987000: FLUTTERMANE</li> <li>988000: SLITHERWING</li> <li>989000: SANDYSHOCKS</li> <li>990000: IRONTREADS</li> <li>991000: IRONBUNDLE</li> <li>992000: IRONHANDS</li> <li>993000: IRONJUGULIS</li> <li>994000: IRONMOTH</li> <li>995000: IRONTHORNS</li> <li>996000: FRIGIBAX</li> <li>997000: ARCTIBAX</li> <li>998000: BAXCALIBUR</li> <li>999000: GIMMIGHOUL</li> <li>999001: GIMMIGHOULROAMING</li> <li>1000000: GHOLDENGO</li> <li>1001000: WOCHIEN</li> <li>1002000: CHIENPAO</li> <li>1003000: TINGLU</li> <li>1004000: CHIYU</li> <li>1005000: ROARINGMOON</li> <li>1006000: IRONVALIANT</li> <li>1007000: KORAIDON</li> <li>1008000: MIRAIDON</li> <li>1009000: WALKINGWAKE</li> <li>1010000: IRONLEAVES</li> <li>1011000: DIPPLIN</li> <li>1012000: POLTCHAGEIST</li> <li>1012001: POLTCHAGEISTARTISAN</li> <li>1013000: SINISTCHA</li> <li>1013001: SINISTCHAMASTERPIECE</li> <li>1014000: OKIDOGI</li> <li>1015000: MUNKIDORI</li> <li>1016000: FEZANDIPITI</li> <li>1017000: OGERPON</li> <li>1017001: OGERPONWELLSPRING</li> <li>1017002: OGERPONHEARTHFLAME</li> <li>1017003: OGERPONCORNERSTONE</li> <li>1017004: OGERPONTEALTERA</li> <li>1017005: OGERPONWELLSPRINGTERA</li> <li>1017006: OGERPONHEARTHFLAMETERA</li> <li>1017007: OGERPONCORNERSTONETERA</li> </ul>"},{"location":"dex/reference/dex-classes/#poketypes.dex.dexdata_pb2.DexMove","title":"<code>DexMove</code>","text":"<p>Represents possible Moves</p> <p>Options:</p> <ul> <li>1: RECHARGE</li> <li>100: POUND</li> <li>200: KARATECHOP</li> <li>300: DOUBLESLAP</li> <li>400: COMETPUNCH</li> <li>500: MEGAPUNCH</li> <li>600: PAYDAY</li> <li>700: FIREPUNCH</li> <li>800: ICEPUNCH</li> <li>900: THUNDERPUNCH</li> <li>1000: SCRATCH</li> <li>1100: VISEGRIP</li> <li>1200: GUILLOTINE</li> <li>1300: RAZORWIND</li> <li>1400: SWORDSDANCE</li> <li>1500: CUT</li> <li>1600: GUST</li> <li>1700: WINGATTACK</li> <li>1800: WHIRLWIND</li> <li>1900: FLY</li> <li>2000: BIND</li> <li>2100: SLAM</li> <li>2200: VINEWHIP</li> <li>2300: STOMP</li> <li>2400: DOUBLEKICK</li> <li>2500: MEGAKICK</li> <li>2600: JUMPKICK</li> <li>2700: ROLLINGKICK</li> <li>2800: SANDATTACK</li> <li>2900: HEADBUTT</li> <li>3000: HORNATTACK</li> <li>3100: FURYATTACK</li> <li>3200: HORNDRILL</li> <li>3300: TACKLE</li> <li>3400: BODYSLAM</li> <li>3500: WRAP</li> <li>3600: TAKEDOWN</li> <li>3700: THRASH</li> <li>3800: DOUBLEEDGE</li> <li>3900: TAILWHIP</li> <li>4000: POISONSTING</li> <li>4100: TWINEEDLE</li> <li>4200: PINMISSILE</li> <li>4300: LEER</li> <li>4400: BITE</li> <li>4500: GROWL</li> <li>4600: ROAR</li> <li>4700: SING</li> <li>4800: SUPERSONIC</li> <li>4900: SONICBOOM</li> <li>5000: DISABLE</li> <li>5100: ACID</li> <li>5200: EMBER</li> <li>5300: FLAMETHROWER</li> <li>5400: MIST</li> <li>5500: WATERGUN</li> <li>5600: HYDROPUMP</li> <li>5700: SURF</li> <li>5800: ICEBEAM</li> <li>5900: BLIZZARD</li> <li>6000: PSYBEAM</li> <li>6100: BUBBLEBEAM</li> <li>6200: AURORABEAM</li> <li>6300: HYPERBEAM</li> <li>6400: PECK</li> <li>6500: DRILLPECK</li> <li>6600: SUBMISSION</li> <li>6700: LOWKICK</li> <li>6800: COUNTER</li> <li>6900: SEISMICTOSS</li> <li>7000: STRENGTH</li> <li>7100: ABSORB</li> <li>7200: MEGADRAIN</li> <li>7300: LEECHSEED</li> <li>7400: GROWTH</li> <li>7500: RAZORLEAF</li> <li>7600: SOLARBEAM</li> <li>7700: POISONPOWDER</li> <li>7800: STUNSPORE</li> <li>7900: SLEEPPOWDER</li> <li>8000: PETALDANCE</li> <li>8100: STRINGSHOT</li> <li>8200: DRAGONRAGE</li> <li>8300: FIRESPIN</li> <li>8400: THUNDERSHOCK</li> <li>8500: THUNDERBOLT</li> <li>8600: THUNDERWAVE</li> <li>8700: THUNDER</li> <li>8800: ROCKTHROW</li> <li>8900: EARTHQUAKE</li> <li>9000: FISSURE</li> <li>9100: DIG</li> <li>9200: TOXIC</li> <li>9300: CONFUSION</li> <li>9400: PSYCHIC</li> <li>9500: HYPNOSIS</li> <li>9600: MEDITATE</li> <li>9700: AGILITY</li> <li>9800: QUICKATTACK</li> <li>9900: RAGE</li> <li>10000: TELEPORT</li> <li>10100: NIGHTSHADE</li> <li>10200: MIMIC</li> <li>10300: SCREECH</li> <li>10400: DOUBLETEAM</li> <li>10500: RECOVER</li> <li>10600: HARDEN</li> <li>10700: MINIMIZE</li> <li>10800: SMOKESCREEN</li> <li>10900: CONFUSERAY</li> <li>11000: WITHDRAW</li> <li>11100: DEFENSECURL</li> <li>11200: BARRIER</li> <li>11300: LIGHTSCREEN</li> <li>11400: HAZE</li> <li>11500: REFLECT</li> <li>11600: FOCUSENERGY</li> <li>11700: BIDE</li> <li>11800: METRONOME</li> <li>11900: MIRRORMOVE</li> <li>12000: SELFDESTRUCT</li> <li>12100: EGGBOMB</li> <li>12200: LICK</li> <li>12300: SMOG</li> <li>12400: SLUDGE</li> <li>12500: BONECLUB</li> <li>12600: FIREBLAST</li> <li>12700: WATERFALL</li> <li>12800: CLAMP</li> <li>12900: SWIFT</li> <li>13000: SKULLBASH</li> <li>13100: SPIKECANNON</li> <li>13200: CONSTRICT</li> <li>13300: AMNESIA</li> <li>13400: KINESIS</li> <li>13500: SOFTBOILED</li> <li>13600: HIGHJUMPKICK</li> <li>13700: GLARE</li> <li>13800: DREAMEATER</li> <li>13900: POISONGAS</li> <li>14000: BARRAGE</li> <li>14100: LEECHLIFE</li> <li>14200: LOVELYKISS</li> <li>14300: SKYATTACK</li> <li>14400: TRANSFORM</li> <li>14500: BUBBLE</li> <li>14600: DIZZYPUNCH</li> <li>14700: SPORE</li> <li>14800: FLASH</li> <li>14900: PSYWAVE</li> <li>15000: SPLASH</li> <li>15100: ACIDARMOR</li> <li>15200: CRABHAMMER</li> <li>15300: EXPLOSION</li> <li>15400: FURYSWIPES</li> <li>15500: BONEMERANG</li> <li>15600: REST</li> <li>15700: ROCKSLIDE</li> <li>15800: HYPERFANG</li> <li>15900: SHARPEN</li> <li>16000: CONVERSION</li> <li>16100: TRIATTACK</li> <li>16200: SUPERFANG</li> <li>16300: SLASH</li> <li>16400: SUBSTITUTE</li> <li>16500: STRUGGLE</li> <li>16600: SKETCH</li> <li>16700: TRIPLEKICK</li> <li>16800: THIEF</li> <li>16900: SPIDERWEB</li> <li>17000: MINDREADER</li> <li>17100: NIGHTMARE</li> <li>17200: FLAMEWHEEL</li> <li>17300: SNORE</li> <li>17400: CURSE</li> <li>17500: FLAIL</li> <li>17600: CONVERSION2</li> <li>17700: AEROBLAST</li> <li>17800: COTTONSPORE</li> <li>17900: REVERSAL</li> <li>18000: SPITE</li> <li>18100: POWDERSNOW</li> <li>18200: PROTECT</li> <li>18300: MACHPUNCH</li> <li>18400: SCARYFACE</li> <li>18500: FEINTATTACK</li> <li>18600: SWEETKISS</li> <li>18700: BELLYDRUM</li> <li>18800: SLUDGEBOMB</li> <li>18900: MUDSLAP</li> <li>19000: OCTAZOOKA</li> <li>19100: SPIKES</li> <li>19200: ZAPCANNON</li> <li>19300: FORESIGHT</li> <li>19400: DESTINYBOND</li> <li>19500: PERISHSONG</li> <li>19600: ICYWIND</li> <li>19700: DETECT</li> <li>19800: BONERUSH</li> <li>19900: LOCKON</li> <li>20000: OUTRAGE</li> <li>20100: SANDSTORM</li> <li>20200: GIGADRAIN</li> <li>20300: ENDURE</li> <li>20400: CHARM</li> <li>20500: ROLLOUT</li> <li>20600: FALSESWIPE</li> <li>20700: SWAGGER</li> <li>20800: MILKDRINK</li> <li>20900: SPARK</li> <li>21000: FURYCUTTER</li> <li>21100: STEELWING</li> <li>21200: MEANLOOK</li> <li>21300: ATTRACT</li> <li>21400: SLEEPTALK</li> <li>21500: HEALBELL</li> <li>21600: RETURN</li> <li>21601: RETURN102</li> <li>21700: PRESENT</li> <li>21800: FRUSTRATION</li> <li>21900: SAFEGUARD</li> <li>22000: PAINSPLIT</li> <li>22100: SACREDFIRE</li> <li>22200: MAGNITUDE</li> <li>22300: DYNAMICPUNCH</li> <li>22400: MEGAHORN</li> <li>22500: DRAGONBREATH</li> <li>22600: BATONPASS</li> <li>22700: ENCORE</li> <li>22800: PURSUIT</li> <li>22900: RAPIDSPIN</li> <li>23000: SWEETSCENT</li> <li>23100: IRONTAIL</li> <li>23200: METALCLAW</li> <li>23300: VITALTHROW</li> <li>23400: MORNINGSUN</li> <li>23500: SYNTHESIS</li> <li>23600: MOONLIGHT</li> <li>23700: HIDDENPOWER</li> <li>23701: HIDDENPOWER60</li> <li>23702: HIDDENPOWERBUG</li> <li>23703: HIDDENPOWERBUG60</li> <li>23704: HIDDENPOWERDARK</li> <li>23705: HIDDENPOWERDARK60</li> <li>23706: HIDDENPOWERDRAGON</li> <li>23707: HIDDENPOWERDRAGON60</li> <li>23708: HIDDENPOWERELECTRIC</li> <li>23709: HIDDENPOWERELECTRIC60</li> <li>23710: HIDDENPOWERFIGHTING</li> <li>23711: HIDDENPOWERFIGHTING60</li> <li>23712: HIDDENPOWERFIRE</li> <li>23713: HIDDENPOWERFIRE60</li> <li>23714: HIDDENPOWERFLYING</li> <li>23715: HIDDENPOWERFLYING60</li> <li>23716: HIDDENPOWERGHOST</li> <li>23717: HIDDENPOWERGHOST60</li> <li>23718: HIDDENPOWERGRASS</li> <li>23719: HIDDENPOWERGRASS60</li> <li>23720: HIDDENPOWERGROUND</li> <li>23721: HIDDENPOWERGROUND60</li> <li>23722: HIDDENPOWERICE</li> <li>23723: HIDDENPOWERICE60</li> <li>23724: HIDDENPOWERPOISON</li> <li>23725: HIDDENPOWERPOISON60</li> <li>23726: HIDDENPOWERPSYCHIC</li> <li>23727: HIDDENPOWERPSYCHIC60</li> <li>23728: HIDDENPOWERROCK</li> <li>23729: HIDDENPOWERROCK60</li> <li>23730: HIDDENPOWERSTEEL</li> <li>23731: HIDDENPOWERSTEEL60</li> <li>23732: HIDDENPOWERWATER</li> <li>23733: HIDDENPOWERWATER60</li> <li>23800: CROSSCHOP</li> <li>23900: TWISTER</li> <li>24000: RAINDANCE</li> <li>24100: SUNNYDAY</li> <li>24200: CRUNCH</li> <li>24300: MIRRORCOAT</li> <li>24400: PSYCHUP</li> <li>24500: EXTREMESPEED</li> <li>24600: ANCIENTPOWER</li> <li>24700: SHADOWBALL</li> <li>24800: FUTURESIGHT</li> <li>24900: ROCKSMASH</li> <li>25000: WHIRLPOOL</li> <li>25100: BEATUP</li> <li>25200: FAKEOUT</li> <li>25300: UPROAR</li> <li>25400: STOCKPILE</li> <li>25500: SPITUP</li> <li>25600: SWALLOW</li> <li>25700: HEATWAVE</li> <li>25800: HAIL</li> <li>25900: TORMENT</li> <li>26000: FLATTER</li> <li>26100: WILLOWISP</li> <li>26200: MEMENTO</li> <li>26300: FACADE</li> <li>26400: FOCUSPUNCH</li> <li>26500: SMELLINGSALTS</li> <li>26600: FOLLOWME</li> <li>26700: NATUREPOWER</li> <li>26800: CHARGE</li> <li>26900: TAUNT</li> <li>27000: HELPINGHAND</li> <li>27100: TRICK</li> <li>27200: ROLEPLAY</li> <li>27300: WISH</li> <li>27400: ASSIST</li> <li>27500: INGRAIN</li> <li>27600: SUPERPOWER</li> <li>27700: MAGICCOAT</li> <li>27800: RECYCLE</li> <li>27900: REVENGE</li> <li>28000: BRICKBREAK</li> <li>28100: YAWN</li> <li>28200: KNOCKOFF</li> <li>28300: ENDEAVOR</li> <li>28400: ERUPTION</li> <li>28500: SKILLSWAP</li> <li>28600: IMPRISON</li> <li>28700: REFRESH</li> <li>28800: GRUDGE</li> <li>28900: SNATCH</li> <li>29000: SECRETPOWER</li> <li>29100: DIVE</li> <li>29200: ARMTHRUST</li> <li>29300: CAMOUFLAGE</li> <li>29400: TAILGLOW</li> <li>29500: LUSTERPURGE</li> <li>29600: MISTBALL</li> <li>29700: FEATHERDANCE</li> <li>29800: TEETERDANCE</li> <li>29900: BLAZEKICK</li> <li>30000: MUDSPORT</li> <li>30100: ICEBALL</li> <li>30200: NEEDLEARM</li> <li>30300: SLACKOFF</li> <li>30400: HYPERVOICE</li> <li>30500: POISONFANG</li> <li>30600: CRUSHCLAW</li> <li>30700: BLASTBURN</li> <li>30800: HYDROCANNON</li> <li>30900: METEORMASH</li> <li>31000: ASTONISH</li> <li>31100: WEATHERBALL</li> <li>31200: AROMATHERAPY</li> <li>31300: FAKETEARS</li> <li>31400: AIRCUTTER</li> <li>31500: OVERHEAT</li> <li>31600: ODORSLEUTH</li> <li>31700: ROCKTOMB</li> <li>31800: SILVERWIND</li> <li>31900: METALSOUND</li> <li>32000: GRASSWHISTLE</li> <li>32100: TICKLE</li> <li>32200: COSMICPOWER</li> <li>32300: WATERSPOUT</li> <li>32400: SIGNALBEAM</li> <li>32500: SHADOWPUNCH</li> <li>32600: EXTRASENSORY</li> <li>32700: SKYUPPERCUT</li> <li>32800: SANDTOMB</li> <li>32900: SHEERCOLD</li> <li>33000: MUDDYWATER</li> <li>33100: BULLETSEED</li> <li>33200: AERIALACE</li> <li>33300: ICICLESPEAR</li> <li>33400: IRONDEFENSE</li> <li>33500: BLOCK</li> <li>33600: HOWL</li> <li>33700: DRAGONCLAW</li> <li>33800: FRENZYPLANT</li> <li>33900: BULKUP</li> <li>34000: BOUNCE</li> <li>34100: MUDSHOT</li> <li>34200: POISONTAIL</li> <li>34300: COVET</li> <li>34400: VOLTTACKLE</li> <li>34500: MAGICALLEAF</li> <li>34600: WATERSPORT</li> <li>34700: CALMMIND</li> <li>34800: LEAFBLADE</li> <li>34900: DRAGONDANCE</li> <li>35000: ROCKBLAST</li> <li>35100: SHOCKWAVE</li> <li>35200: WATERPULSE</li> <li>35300: DOOMDESIRE</li> <li>35400: PSYCHOBOOST</li> <li>35500: ROOST</li> <li>35600: GRAVITY</li> <li>35700: MIRACLEEYE</li> <li>35800: WAKEUPSLAP</li> <li>35900: HAMMERARM</li> <li>36000: GYROBALL</li> <li>36100: HEALINGWISH</li> <li>36200: BRINE</li> <li>36300: NATURALGIFT</li> <li>36400: FEINT</li> <li>36500: PLUCK</li> <li>36600: TAILWIND</li> <li>36700: ACUPRESSURE</li> <li>36800: METALBURST</li> <li>36900: UTURN</li> <li>37000: CLOSECOMBAT</li> <li>37100: PAYBACK</li> <li>37200: ASSURANCE</li> <li>37300: EMBARGO</li> <li>37400: FLING</li> <li>37500: PSYCHOSHIFT</li> <li>37600: TRUMPCARD</li> <li>37700: HEALBLOCK</li> <li>37800: WRINGOUT</li> <li>37900: POWERTRICK</li> <li>38000: GASTROACID</li> <li>38100: LUCKYCHANT</li> <li>38200: MEFIRST</li> <li>38300: COPYCAT</li> <li>38400: POWERSWAP</li> <li>38500: GUARDSWAP</li> <li>38600: PUNISHMENT</li> <li>38700: LASTRESORT</li> <li>38800: WORRYSEED</li> <li>38900: SUCKERPUNCH</li> <li>39000: TOXICSPIKES</li> <li>39100: HEARTSWAP</li> <li>39200: AQUARING</li> <li>39300: MAGNETRISE</li> <li>39400: FLAREBLITZ</li> <li>39500: FORCEPALM</li> <li>39600: AURASPHERE</li> <li>39700: ROCKPOLISH</li> <li>39800: POISONJAB</li> <li>39900: DARKPULSE</li> <li>40000: NIGHTSLASH</li> <li>40100: AQUATAIL</li> <li>40200: SEEDBOMB</li> <li>40300: AIRSLASH</li> <li>40400: XSCISSOR</li> <li>40500: BUGBUZZ</li> <li>40600: DRAGONPULSE</li> <li>40700: DRAGONRUSH</li> <li>40800: POWERGEM</li> <li>40900: DRAINPUNCH</li> <li>41000: VACUUMWAVE</li> <li>41100: FOCUSBLAST</li> <li>41200: ENERGYBALL</li> <li>41300: BRAVEBIRD</li> <li>41400: EARTHPOWER</li> <li>41500: SWITCHEROO</li> <li>41600: GIGAIMPACT</li> <li>41700: NASTYPLOT</li> <li>41800: BULLETPUNCH</li> <li>41900: AVALANCHE</li> <li>42000: ICESHARD</li> <li>42100: SHADOWCLAW</li> <li>42200: THUNDERFANG</li> <li>42300: ICEFANG</li> <li>42400: FIREFANG</li> <li>42500: SHADOWSNEAK</li> <li>42600: MUDBOMB</li> <li>42700: PSYCHOCUT</li> <li>42800: ZENHEADBUTT</li> <li>42900: MIRRORSHOT</li> <li>43000: FLASHCANNON</li> <li>43100: ROCKCLIMB</li> <li>43200: DEFOG</li> <li>43300: TRICKROOM</li> <li>43400: DRACOMETEOR</li> <li>43500: DISCHARGE</li> <li>43600: LAVAPLUME</li> <li>43700: LEAFSTORM</li> <li>43800: POWERWHIP</li> <li>43900: ROCKWRECKER</li> <li>44000: CROSSPOISON</li> <li>44100: GUNKSHOT</li> <li>44200: IRONHEAD</li> <li>44300: MAGNETBOMB</li> <li>44400: STONEEDGE</li> <li>44500: CAPTIVATE</li> <li>44600: STEALTHROCK</li> <li>44700: GRASSKNOT</li> <li>44800: CHATTER</li> <li>44900: JUDGMENT</li> <li>45000: BUGBITE</li> <li>45100: CHARGEBEAM</li> <li>45200: WOODHAMMER</li> <li>45300: AQUAJET</li> <li>45400: ATTACKORDER</li> <li>45500: DEFENDORDER</li> <li>45600: HEALORDER</li> <li>45700: HEADSMASH</li> <li>45800: DOUBLEHIT</li> <li>45900: ROAROFTIME</li> <li>46000: SPACIALREND</li> <li>46100: LUNARDANCE</li> <li>46200: CRUSHGRIP</li> <li>46300: MAGMASTORM</li> <li>46400: DARKVOID</li> <li>46500: SEEDFLARE</li> <li>46600: OMINOUSWIND</li> <li>46700: SHADOWFORCE</li> <li>46800: HONECLAWS</li> <li>46900: WIDEGUARD</li> <li>47000: GUARDSPLIT</li> <li>47100: POWERSPLIT</li> <li>47200: WONDERROOM</li> <li>47300: PSYSHOCK</li> <li>47400: VENOSHOCK</li> <li>47500: AUTOTOMIZE</li> <li>47600: RAGEPOWDER</li> <li>47700: TELEKINESIS</li> <li>47800: MAGICROOM</li> <li>47900: SMACKDOWN</li> <li>48000: STORMTHROW</li> <li>48100: FLAMEBURST</li> <li>48200: SLUDGEWAVE</li> <li>48300: QUIVERDANCE</li> <li>48400: HEAVYSLAM</li> <li>48500: SYNCHRONOISE</li> <li>48600: ELECTROBALL</li> <li>48700: SOAK</li> <li>48800: FLAMECHARGE</li> <li>48900: COIL</li> <li>49000: LOWSWEEP</li> <li>49100: ACIDSPRAY</li> <li>49200: FOULPLAY</li> <li>49300: SIMPLEBEAM</li> <li>49400: ENTRAINMENT</li> <li>49500: AFTERYOU</li> <li>49600: ROUND</li> <li>49700: ECHOEDVOICE</li> <li>49800: CHIPAWAY</li> <li>49900: CLEARSMOG</li> <li>50000: STOREDPOWER</li> <li>50100: QUICKGUARD</li> <li>50200: ALLYSWITCH</li> <li>50300: SCALD</li> <li>50400: SHELLSMASH</li> <li>50500: HEALPULSE</li> <li>50600: HEX</li> <li>50700: SKYDROP</li> <li>50800: SHIFTGEAR</li> <li>50900: CIRCLETHROW</li> <li>51000: INCINERATE</li> <li>51100: QUASH</li> <li>51200: ACROBATICS</li> <li>51300: REFLECTTYPE</li> <li>51400: RETALIATE</li> <li>51500: FINALGAMBIT</li> <li>51600: BESTOW</li> <li>51700: INFERNO</li> <li>51800: WATERPLEDGE</li> <li>51900: FIREPLEDGE</li> <li>52000: GRASSPLEDGE</li> <li>52100: VOLTSWITCH</li> <li>52200: STRUGGLEBUG</li> <li>52300: BULLDOZE</li> <li>52400: FROSTBREATH</li> <li>52500: DRAGONTAIL</li> <li>52600: WORKUP</li> <li>52700: ELECTROWEB</li> <li>52800: WILDCHARGE</li> <li>52900: DRILLRUN</li> <li>53000: DUALCHOP</li> <li>53100: HEARTSTAMP</li> <li>53200: HORNLEECH</li> <li>53300: SACREDSWORD</li> <li>53400: RAZORSHELL</li> <li>53500: HEATCRASH</li> <li>53600: LEAFTORNADO</li> <li>53700: STEAMROLLER</li> <li>53800: COTTONGUARD</li> <li>53900: NIGHTDAZE</li> <li>54000: PSYSTRIKE</li> <li>54100: TAILSLAP</li> <li>54200: HURRICANE</li> <li>54300: HEADCHARGE</li> <li>54400: GEARGRIND</li> <li>54500: SEARINGSHOT</li> <li>54600: TECHNOBLAST</li> <li>54700: RELICSONG</li> <li>54800: SECRETSWORD</li> <li>54900: GLACIATE</li> <li>55000: BOLTSTRIKE</li> <li>55100: BLUEFLARE</li> <li>55200: FIERYDANCE</li> <li>55300: FREEZESHOCK</li> <li>55400: ICEBURN</li> <li>55500: SNARL</li> <li>55600: ICICLECRASH</li> <li>55700: VCREATE</li> <li>55800: FUSIONFLARE</li> <li>55900: FUSIONBOLT</li> <li>56000: FLYINGPRESS</li> <li>56100: MATBLOCK</li> <li>56200: BELCH</li> <li>56300: ROTOTILLER</li> <li>56400: STICKYWEB</li> <li>56500: FELLSTINGER</li> <li>56600: PHANTOMFORCE</li> <li>56700: TRICKORTREAT</li> <li>56800: NOBLEROAR</li> <li>56900: IONDELUGE</li> <li>57000: PARABOLICCHARGE</li> <li>57100: FORESTSCURSE</li> <li>57200: PETALBLIZZARD</li> <li>57300: FREEZEDRY</li> <li>57400: DISARMINGVOICE</li> <li>57500: PARTINGSHOT</li> <li>57600: TOPSYTURVY</li> <li>57700: DRAININGKISS</li> <li>57800: CRAFTYSHIELD</li> <li>57900: FLOWERSHIELD</li> <li>58000: GRASSYTERRAIN</li> <li>58100: MISTYTERRAIN</li> <li>58200: ELECTRIFY</li> <li>58300: PLAYROUGH</li> <li>58400: FAIRYWIND</li> <li>58500: MOONBLAST</li> <li>58600: BOOMBURST</li> <li>58700: FAIRYLOCK</li> <li>58800: KINGSSHIELD</li> <li>58900: PLAYNICE</li> <li>59000: CONFIDE</li> <li>59100: DIAMONDSTORM</li> <li>59200: STEAMERUPTION</li> <li>59300: HYPERSPACEHOLE</li> <li>59400: WATERSHURIKEN</li> <li>59500: MYSTICALFIRE</li> <li>59600: SPIKYSHIELD</li> <li>59700: AROMATICMIST</li> <li>59800: EERIEIMPULSE</li> <li>59900: VENOMDRENCH</li> <li>60000: POWDER</li> <li>60100: GEOMANCY</li> <li>60200: MAGNETICFLUX</li> <li>60300: HAPPYHOUR</li> <li>60400: ELECTRICTERRAIN</li> <li>60500: DAZZLINGGLEAM</li> <li>60600: CELEBRATE</li> <li>60700: HOLDHANDS</li> <li>60800: BABYDOLLEYES</li> <li>60900: NUZZLE</li> <li>61000: HOLDBACK</li> <li>61100: INFESTATION</li> <li>61200: POWERUPPUNCH</li> <li>61300: OBLIVIONWING</li> <li>61400: THOUSANDARROWS</li> <li>61500: THOUSANDWAVES</li> <li>61600: LANDSWRATH</li> <li>61700: LIGHTOFRUIN</li> <li>61800: ORIGINPULSE</li> <li>61900: PRECIPICEBLADES</li> <li>62000: DRAGONASCENT</li> <li>62100: HYPERSPACEFURY</li> <li>62200: BREAKNECKBLITZ</li> <li>62400: ALLOUTPUMMELING</li> <li>62600: SUPERSONICSKYSTRIKE</li> <li>62800: ACIDDOWNPOUR</li> <li>63000: TECTONICRAGE</li> <li>63200: CONTINENTALCRUSH</li> <li>63400: SAVAGESPINOUT</li> <li>63600: NEVERENDINGNIGHTMARE</li> <li>63800: CORKSCREWCRASH</li> <li>64000: INFERNOOVERDRIVE</li> <li>64200: HYDROVORTEX</li> <li>64400: BLOOMDOOM</li> <li>64600: GIGAVOLTHAVOC</li> <li>64800: SHATTEREDPSYCHE</li> <li>65000: SUBZEROSLAMMER</li> <li>65200: DEVASTATINGDRAKE</li> <li>65400: BLACKHOLEECLIPSE</li> <li>65600: TWINKLETACKLE</li> <li>65800: CATASTROPIKA</li> <li>65900: SHOREUP</li> <li>66000: FIRSTIMPRESSION</li> <li>66100: BANEFULBUNKER</li> <li>66200: SPIRITSHACKLE</li> <li>66300: DARKESTLARIAT</li> <li>66400: SPARKLINGARIA</li> <li>66500: ICEHAMMER</li> <li>66600: FLORALHEALING</li> <li>66700: HIGHHORSEPOWER</li> <li>66800: STRENGTHSAP</li> <li>66900: SOLARBLADE</li> <li>67000: LEAFAGE</li> <li>67100: SPOTLIGHT</li> <li>67200: TOXICTHREAD</li> <li>67300: LASERFOCUS</li> <li>67400: GEARUP</li> <li>67500: THROATCHOP</li> <li>67600: POLLENPUFF</li> <li>67700: ANCHORSHOT</li> <li>67800: PSYCHICTERRAIN</li> <li>67900: LUNGE</li> <li>68000: FIRELASH</li> <li>68100: POWERTRIP</li> <li>68200: BURNUP</li> <li>68300: SPEEDSWAP</li> <li>68400: SMARTSTRIKE</li> <li>68500: PURIFY</li> <li>68600: REVELATIONDANCE</li> <li>68700: COREENFORCER</li> <li>68800: TROPKICK</li> <li>68900: INSTRUCT</li> <li>69000: BEAKBLAST</li> <li>69100: CLANGINGSCALES</li> <li>69200: DRAGONHAMMER</li> <li>69300: BRUTALSWING</li> <li>69400: AURORAVEIL</li> <li>69500: SINISTERARROWRAID</li> <li>69600: MALICIOUSMOONSAULT</li> <li>69700: OCEANICOPERETTA</li> <li>69800: GUARDIANOFALOLA</li> <li>69900: SOULSTEALING7STARSTRIKE</li> <li>70000: STOKEDSPARKSURFER</li> <li>70100: PULVERIZINGPANCAKE</li> <li>70200: EXTREMEEVOBOOST</li> <li>70300: GENESISSUPERNOVA</li> <li>70400: SHELLTRAP</li> <li>70500: FLEURCANNON</li> <li>70600: PSYCHICFANGS</li> <li>70700: STOMPINGTANTRUM</li> <li>70800: SHADOWBONE</li> <li>70900: ACCELEROCK</li> <li>71000: LIQUIDATION</li> <li>71100: PRISMATICLASER</li> <li>71200: SPECTRALTHIEF</li> <li>71300: SUNSTEELSTRIKE</li> <li>71400: MOONGEISTBEAM</li> <li>71500: TEARFULLOOK</li> <li>71600: ZINGZAP</li> <li>71700: NATURESMADNESS</li> <li>71800: MULTIATTACK</li> <li>71900: 10000000VOLTTHUNDERBOLT</li> <li>72000: MINDBLOWN</li> <li>72100: PLASMAFISTS</li> <li>72200: PHOTONGEYSER</li> <li>72300: LIGHTTHATBURNSTHESKY</li> <li>72400: SEARINGSUNRAZESMASH</li> <li>72500: MENACINGMOONRAZEMAELSTROM</li> <li>72600: LETSSNUGGLEFOREVER</li> <li>72700: SPLINTEREDSTORMSHARDS</li> <li>72800: CLANGOROUSSOULBLAZE</li> <li>72900: ZIPPYZAP</li> <li>73000: SPLISHYSPLASH</li> <li>73100: FLOATYFALL</li> <li>73200: PIKAPAPOW</li> <li>73300: BOUNCYBUBBLE</li> <li>73400: BUZZYBUZZ</li> <li>73500: SIZZLYSLIDE</li> <li>73600: GLITZYGLOW</li> <li>73700: BADDYBAD</li> <li>73800: SAPPYSEED</li> <li>73900: FREEZYFROST</li> <li>74000: SPARKLYSWIRL</li> <li>74100: VEEVEEVOLLEY</li> <li>74200: DOUBLEIRONBASH</li> <li>74300: MAXGUARD</li> <li>74400: DYNAMAXCANNON</li> <li>74500: SNIPESHOT</li> <li>74600: JAWLOCK</li> <li>74700: STUFFCHEEKS</li> <li>74800: NORETREAT</li> <li>74900: TARSHOT</li> <li>75000: MAGICPOWDER</li> <li>75100: DRAGONDARTS</li> <li>75200: TEATIME</li> <li>75300: OCTOLOCK</li> <li>75400: BOLTBEAK</li> <li>75500: FISHIOUSREND</li> <li>75600: COURTCHANGE</li> <li>75700: MAXFLARE</li> <li>75800: MAXFLUTTERBY</li> <li>75900: MAXLIGHTNING</li> <li>76000: MAXSTRIKE</li> <li>76100: MAXKNUCKLE</li> <li>76200: MAXPHANTASM</li> <li>76300: MAXHAILSTORM</li> <li>76400: MAXOOZE</li> <li>76500: MAXGEYSER</li> <li>76600: MAXAIRSTREAM</li> <li>76700: MAXSTARFALL</li> <li>76800: MAXWYRMWIND</li> <li>76900: MAXMINDSTORM</li> <li>77000: MAXROCKFALL</li> <li>77100: MAXQUAKE</li> <li>77200: MAXDARKNESS</li> <li>77300: MAXOVERGROWTH</li> <li>77400: MAXSTEELSPIKE</li> <li>77500: CLANGOROUSSOUL</li> <li>77600: BODYPRESS</li> <li>77700: DECORATE</li> <li>77800: DRUMBEATING</li> <li>77900: SNAPTRAP</li> <li>78000: PYROBALL</li> <li>78100: BEHEMOTHBLADE</li> <li>78200: BEHEMOTHBASH</li> <li>78300: AURAWHEEL</li> <li>78400: BREAKINGSWIPE</li> <li>78500: BRANCHPOKE</li> <li>78600: OVERDRIVE</li> <li>78700: APPLEACID</li> <li>78800: GRAVAPPLE</li> <li>78900: SPIRITBREAK</li> <li>79000: STRANGESTEAM</li> <li>79100: LIFEDEW</li> <li>79200: OBSTRUCT</li> <li>79300: FALSESURRENDER</li> <li>79400: METEORASSAULT</li> <li>79500: ETERNABEAM</li> <li>79600: STEELBEAM</li> <li>79700: EXPANDINGFORCE</li> <li>79800: STEELROLLER</li> <li>79900: SCALESHOT</li> <li>80000: METEORBEAM</li> <li>80100: SHELLSIDEARM</li> <li>80200: MISTYEXPLOSION</li> <li>80300: GRASSYGLIDE</li> <li>80400: RISINGVOLTAGE</li> <li>80500: TERRAINPULSE</li> <li>80600: SKITTERSMACK</li> <li>80700: BURNINGJEALOUSY</li> <li>80800: LASHOUT</li> <li>80900: POLTERGEIST</li> <li>81000: CORROSIVEGAS</li> <li>81100: COACHING</li> <li>81200: FLIPTURN</li> <li>81300: TRIPLEAXEL</li> <li>81400: DUALWINGBEAT</li> <li>81500: SCORCHINGSANDS</li> <li>81600: JUNGLEHEALING</li> <li>81700: WICKEDBLOW</li> <li>81800: SURGINGSTRIKES</li> <li>81900: THUNDERCAGE</li> <li>82000: DRAGONENERGY</li> <li>82100: FREEZINGGLARE</li> <li>82200: FIERYWRATH</li> <li>82300: THUNDEROUSKICK</li> <li>82400: GLACIALLANCE</li> <li>82500: ASTRALBARRAGE</li> <li>82600: EERIESPELL</li> <li>82700: DIRECLAW</li> <li>82800: PSYSHIELDBASH</li> <li>82900: POWERSHIFT</li> <li>83000: STONEAXE</li> <li>83100: SPRINGTIDESTORM</li> <li>83200: MYSTICALPOWER</li> <li>83300: RAGINGFURY</li> <li>83400: WAVECRASH</li> <li>83500: CHLOROBLAST</li> <li>83600: MOUNTAINGALE</li> <li>83700: VICTORYDANCE</li> <li>83800: HEADLONGRUSH</li> <li>83900: BARBBARRAGE</li> <li>84000: ESPERWING</li> <li>84100: BITTERMALICE</li> <li>84200: SHELTER</li> <li>84300: TRIPLEARROWS</li> <li>84400: INFERNALPARADE</li> <li>84500: CEASELESSEDGE</li> <li>84600: BLEAKWINDSTORM</li> <li>84700: WILDBOLTSTORM</li> <li>84800: SANDSEARSTORM</li> <li>84900: LUNARBLESSING</li> <li>85000: TAKEHEART</li> <li>85100: TERABLAST</li> <li>85200: SILKTRAP</li> <li>85300: AXEKICK</li> <li>85400: LASTRESPECTS</li> <li>85500: LUMINACRASH</li> <li>85600: ORDERUP</li> <li>85700: JETPUNCH</li> <li>85800: SPICYEXTRACT</li> <li>85900: SPINOUT</li> <li>86000: POPULATIONBOMB</li> <li>86100: ICESPINNER</li> <li>86200: GLAIVERUSH</li> <li>86300: REVIVALBLESSING</li> <li>86400: SALTCURE</li> <li>86500: TRIPLEDIVE</li> <li>86600: MORTALSPIN</li> <li>86700: DOODLE</li> <li>86800: FILLETAWAY</li> <li>86900: KOWTOWCLEAVE</li> <li>87000: FLOWERTRICK</li> <li>87100: TORCHSONG</li> <li>87200: AQUASTEP</li> <li>87300: RAGINGBULL</li> <li>87400: MAKEITRAIN</li> <li>87500: PSYBLADE</li> <li>87600: HYDROSTEAM</li> <li>87700: RUINATION</li> <li>87800: COLLISIONCOURSE</li> <li>87900: ELECTRODRIFT</li> <li>88000: SHEDTAIL</li> <li>88100: CHILLYRECEPTION</li> <li>88200: TIDYUP</li> <li>88300: SNOWSCAPE</li> <li>88400: POUNCE</li> <li>88500: TRAILBLAZE</li> <li>88600: CHILLINGWATER</li> <li>88700: HYPERDRILL</li> <li>88800: TWINBEAM</li> <li>88900: RAGEFIST</li> <li>89000: ARMORCANNON</li> <li>89100: BITTERBLADE</li> <li>89200: DOUBLESHOCK</li> <li>89300: GIGATONHAMMER</li> <li>89400: COMEUPPANCE</li> <li>89500: AQUACUTTER</li> <li>89600: BLAZINGTORQUE</li> <li>89700: WICKEDTORQUE</li> <li>89800: NOXIOUSTORQUE</li> <li>89900: COMBATTORQUE</li> <li>90000: MAGICALTORQUE</li> <li>90100: BLOODMOON</li> <li>90200: MATCHAGOTCHA</li> <li>90300: SYRUPBOMB</li> <li>90400: IVYCUDGEL</li> <li>100000: GMAXBEFUDDLE</li> <li>100001: GMAXCANNONADE</li> <li>100002: GMAXCENTIFERNO</li> <li>100003: GMAXCHISTRIKE</li> <li>100004: GMAXCUDDLE</li> <li>100005: GMAXDEPLETION</li> <li>100006: GMAXDRUMSOLO</li> <li>100007: GMAXFINALE</li> <li>100008: GMAXFIREBALL</li> <li>100009: GMAXFOAMBURST</li> <li>100010: GMAXGOLDRUSH</li> <li>100011: GMAXGRAVITAS</li> <li>100012: GMAXHYDROSNIPE</li> <li>100013: GMAXMALODOR</li> <li>100014: GMAXMELTDOWN</li> <li>100015: GMAXONEBLOW</li> <li>100016: GMAXRAPIDFLOW</li> <li>100017: GMAXREPLENISH</li> <li>100018: GMAXRESONANCE</li> <li>100019: GMAXSANDBLAST</li> <li>100020: GMAXSMITE</li> <li>100021: GMAXSNOOZE</li> <li>100022: GMAXSTEELSURGE</li> <li>100023: GMAXSTONESURGE</li> <li>100024: GMAXSTUNSHOCK</li> <li>100025: GMAXSWEETNESS</li> <li>100026: GMAXTARTNESS</li> <li>100027: GMAXTERROR</li> <li>100028: GMAXVINELASH</li> <li>100029: GMAXVOLCALITH</li> <li>100030: GMAXVOLTCRASH</li> <li>100031: GMAXWILDFIRE</li> <li>100032: GMAXWINDRAGE</li> </ul>"},{"location":"dex/reference/dex-classes/#poketypes.dex.dexdata_pb2.DexItem","title":"<code>DexItem</code>","text":"<p>Represents possible Items</p> <p>Options:</p> <ul> <li>2: MASTERBALL</li> <li>3: ULTRABALL</li> <li>4: GREATBALL</li> <li>5: POKEBALL</li> <li>6: SAFARIBALL</li> <li>7: NETBALL</li> <li>8: DIVEBALL</li> <li>9: NESTBALL</li> <li>10: REPEATBALL</li> <li>11: TIMERBALL</li> <li>12: LUXURYBALL</li> <li>13: PREMIERBALL</li> <li>14: DUSKBALL</li> <li>15: HEALBALL</li> <li>16: QUICKBALL</li> <li>17: CHERISHBALL</li> <li>44: BERRYJUICE</li> <li>81: SUNSTONE</li> <li>82: MOONSTONE</li> <li>83: FIRESTONE</li> <li>84: THUNDERSTONE</li> <li>85: WATERSTONE</li> <li>86: LEAFSTONE</li> <li>100: ROOTFOSSIL</li> <li>101: CLAWFOSSIL</li> <li>102: HELIXFOSSIL</li> <li>103: DOMEFOSSIL</li> <li>104: OLDAMBER</li> <li>105: ARMORFOSSIL</li> <li>106: SKULLFOSSIL</li> <li>107: RAREBONE</li> <li>108: SHINYSTONE</li> <li>109: DUSKSTONE</li> <li>110: DAWNSTONE</li> <li>111: OVALSTONE</li> <li>113: GRISEOUSORB</li> <li>117: DOUSEDRIVE</li> <li>118: SHOCKDRIVE</li> <li>119: BURNDRIVE</li> <li>120: CHILLDRIVE</li> <li>136: ADAMANTORB</li> <li>137: LUSTROUSORB</li> <li>138: MAIL</li> <li>150: CHERIBERRY</li> <li>150: PRZCUREBERRY</li> <li>151: CHESTOBERRY</li> <li>151: MINTBERRY</li> <li>152: PECHABERRY</li> <li>152: PSNCUREBERRY</li> <li>153: RAWSTBERRY</li> <li>153: ICEBERRY</li> <li>154: ASPEARBERRY</li> <li>154: BURNTBERRY</li> <li>155: LEPPABERRY</li> <li>155: MYSTERYBERRY</li> <li>156: ORANBERRY</li> <li>156: BERRY</li> <li>157: PERSIMBERRY</li> <li>157: BITTERBERRY</li> <li>158: LUMBERRY</li> <li>158: MIRACLEBERRY</li> <li>159: SITRUSBERRY</li> <li>159: GOLDBERRY</li> <li>160: FIGYBERRY</li> <li>161: WIKIBERRY</li> <li>162: MAGOBERRY</li> <li>163: AGUAVBERRY</li> <li>164: IAPAPABERRY</li> <li>165: RAZZBERRY</li> <li>166: BLUKBERRY</li> <li>167: NANABBERRY</li> <li>168: WEPEARBERRY</li> <li>169: PINAPBERRY</li> <li>170: POMEGBERRY</li> <li>171: KELPSYBERRY</li> <li>172: QUALOTBERRY</li> <li>173: HONDEWBERRY</li> <li>174: GREPABERRY</li> <li>175: TAMATOBERRY</li> <li>176: CORNNBERRY</li> <li>177: MAGOSTBERRY</li> <li>178: RABUTABERRY</li> <li>179: NOMELBERRY</li> <li>180: SPELONBERRY</li> <li>181: PAMTREBERRY</li> <li>182: WATMELBERRY</li> <li>183: DURINBERRY</li> <li>184: BELUEBERRY</li> <li>185: OCCABERRY</li> <li>186: PASSHOBERRY</li> <li>187: WACANBERRY</li> <li>188: RINDOBERRY</li> <li>189: YACHEBERRY</li> <li>190: CHOPLEBERRY</li> <li>191: KEBIABERRY</li> <li>192: SHUCABERRY</li> <li>193: COBABERRY</li> <li>194: PAYAPABERRY</li> <li>195: TANGABERRY</li> <li>196: CHARTIBERRY</li> <li>197: KASIBBERRY</li> <li>198: HABANBERRY</li> <li>199: COLBURBERRY</li> <li>200: BABIRIBERRY</li> <li>201: CHILANBERRY</li> <li>202: LIECHIBERRY</li> <li>203: GANLONBERRY</li> <li>204: SALACBERRY</li> <li>205: PETAYABERRY</li> <li>206: APICOTBERRY</li> <li>207: LANSATBERRY</li> <li>208: STARFBERRY</li> <li>209: ENIGMABERRY</li> <li>210: MICLEBERRY</li> <li>211: CUSTAPBERRY</li> <li>212: JABOCABERRY</li> <li>213: ROWAPBERRY</li> <li>214: BRIGHTPOWDER</li> <li>215: WHITEHERB</li> <li>216: MACHOBRACE</li> <li>218: QUICKCLAW</li> <li>220: MENTALHERB</li> <li>221: CHOICEBAND</li> <li>222: KINGSROCK</li> <li>223: SILVERPOWDER</li> <li>226: SOULDEW</li> <li>227: DEEPSEATOOTH</li> <li>228: DEEPSEASCALE</li> <li>231: FOCUSBAND</li> <li>233: SCOPELENS</li> <li>234: METALCOAT</li> <li>235: LEFTOVERS</li> <li>236: DRAGONSCALE</li> <li>237: LIGHTBALL</li> <li>238: SOFTSAND</li> <li>239: HARDSTONE</li> <li>240: MIRACLESEED</li> <li>241: BLACKGLASSES</li> <li>242: BLACKBELT</li> <li>243: MAGNET</li> <li>244: MYSTICWATER</li> <li>245: SHARPBEAK</li> <li>246: POISONBARB</li> <li>247: NEVERMELTICE</li> <li>248: SPELLTAG</li> <li>249: TWISTEDSPOON</li> <li>250: CHARCOAL</li> <li>251: DRAGONFANG</li> <li>252: SILKSCARF</li> <li>252: PINKBOW</li> <li>252: POLKADOTBOW</li> <li>253: UPGRADE</li> <li>254: SHELLBELL</li> <li>255: SEAINCENSE</li> <li>256: LAXINCENSE</li> <li>257: LUCKYPUNCH</li> <li>258: METALPOWDER</li> <li>259: THICKCLUB</li> <li>260: LEEK</li> <li>260: STICK</li> <li>266: WIDELENS</li> <li>267: MUSCLEBAND</li> <li>268: WISEGLASSES</li> <li>269: EXPERTBELT</li> <li>270: LIGHTCLAY</li> <li>271: LIFEORB</li> <li>272: POWERHERB</li> <li>273: TOXICORB</li> <li>274: FLAMEORB</li> <li>275: QUICKPOWDER</li> <li>276: FOCUSSASH</li> <li>277: ZOOMLENS</li> <li>278: METRONOME</li> <li>279: IRONBALL</li> <li>280: LAGGINGTAIL</li> <li>281: DESTINYKNOT</li> <li>282: BLACKSLUDGE</li> <li>283: ICYROCK</li> <li>284: SMOOTHROCK</li> <li>285: HEATROCK</li> <li>286: DAMPROCK</li> <li>287: GRIPCLAW</li> <li>288: CHOICESCARF</li> <li>289: STICKYBARB</li> <li>290: POWERBRACER</li> <li>291: POWERBELT</li> <li>292: POWERLENS</li> <li>293: POWERBAND</li> <li>294: POWERANKLET</li> <li>295: POWERWEIGHT</li> <li>296: SHEDSHELL</li> <li>297: BIGROOT</li> <li>298: CHOICESPECS</li> <li>299: FLAMEPLATE</li> <li>300: SPLASHPLATE</li> <li>301: ZAPPLATE</li> <li>302: MEADOWPLATE</li> <li>303: ICICLEPLATE</li> <li>304: FISTPLATE</li> <li>305: TOXICPLATE</li> <li>306: EARTHPLATE</li> <li>307: SKYPLATE</li> <li>308: MINDPLATE</li> <li>309: INSECTPLATE</li> <li>310: STONEPLATE</li> <li>311: SPOOKYPLATE</li> <li>312: DRACOPLATE</li> <li>313: DREADPLATE</li> <li>314: IRONPLATE</li> <li>315: ODDINCENSE</li> <li>316: ROCKINCENSE</li> <li>317: FULLINCENSE</li> <li>318: WAVEINCENSE</li> <li>319: ROSEINCENSE</li> <li>322: PROTECTOR</li> <li>323: ELECTIRIZER</li> <li>324: MAGMARIZER</li> <li>325: DUBIOUSDISC</li> <li>326: REAPERCLOTH</li> <li>327: RAZORCLAW</li> <li>328: RAZORFANG</li> <li>493: FASTBALL</li> <li>494: LEVELBALL</li> <li>495: LUREBALL</li> <li>496: HEAVYBALL</li> <li>497: LOVEBALL</li> <li>498: FRIENDBALL</li> <li>499: MOONBALL</li> <li>500: SPORTBALL</li> <li>501: PARKBALL</li> <li>535: REDORB</li> <li>536: BLUEORB</li> <li>538: PRISMSCALE</li> <li>539: EVIOLITE</li> <li>540: FLOATSTONE</li> <li>541: ROCKYHELMET</li> <li>542: AIRBALLOON</li> <li>543: REDCARD</li> <li>544: RINGTARGET</li> <li>545: BINDINGBAND</li> <li>546: ABSORBBULB</li> <li>547: CELLBATTERY</li> <li>548: EJECTBUTTON</li> <li>549: FIREGEM</li> <li>550: WATERGEM</li> <li>551: ELECTRICGEM</li> <li>552: GRASSGEM</li> <li>553: ICEGEM</li> <li>554: FIGHTINGGEM</li> <li>555: POISONGEM</li> <li>556: GROUNDGEM</li> <li>557: FLYINGGEM</li> <li>558: PSYCHICGEM</li> <li>559: BUGGEM</li> <li>560: ROCKGEM</li> <li>561: GHOSTGEM</li> <li>562: DRAGONGEM</li> <li>563: DARKGEM</li> <li>564: STEELGEM</li> <li>565: NORMALGEM</li> <li>573: COVERFOSSIL</li> <li>574: PLUMEFOSSIL</li> <li>577: DREAMBALL</li> <li>582: BIGNUGGET</li> <li>640: WEAKNESSPOLICY</li> <li>641: ASSAULTVEST</li> <li>645: PIXIEPLATE</li> <li>647: WHIPPEDDREAM</li> <li>648: SACHET</li> <li>649: LUMINOUSMOSS</li> <li>650: SNOWBALL</li> <li>651: SAFETYGOGGLES</li> <li>657: GENGARITE</li> <li>658: GARDEVOIRITE</li> <li>659: AMPHAROSITE</li> <li>660: VENUSAURITE</li> <li>661: CHARIZARDITEX</li> <li>662: BLASTOISINITE</li> <li>663: MEWTWONITEX</li> <li>664: MEWTWONITEY</li> <li>665: BLAZIKENITE</li> <li>666: MEDICHAMITE</li> <li>667: HOUNDOOMINITE</li> <li>668: AGGRONITE</li> <li>669: BANETTITE</li> <li>670: TYRANITARITE</li> <li>671: SCIZORITE</li> <li>672: PINSIRITE</li> <li>673: AERODACTYLITE</li> <li>674: LUCARIONITE</li> <li>675: ABOMASITE</li> <li>676: KANGASKHANITE</li> <li>677: GYARADOSITE</li> <li>678: ABSOLITE</li> <li>679: CHARIZARDITEY</li> <li>680: ALAKAZITE</li> <li>681: HERACRONITE</li> <li>682: MAWILITE</li> <li>683: MANECTITE</li> <li>684: GARCHOMPITE</li> <li>685: LATIASITE</li> <li>686: LATIOSITE</li> <li>687: ROSELIBERRY</li> <li>688: KEEBERRY</li> <li>689: MARANGABERRY</li> <li>711: JAWFOSSIL</li> <li>712: SAILFOSSIL</li> <li>716: FAIRYGEM</li> <li>753: SWAMPERTITE</li> <li>754: SCEPTILITE</li> <li>755: SABLENITE</li> <li>756: ALTARIANITE</li> <li>757: GALLADITE</li> <li>758: AUDINITE</li> <li>759: METAGROSSITE</li> <li>760: SHARPEDONITE</li> <li>761: SLOWBRONITE</li> <li>762: STEELIXITE</li> <li>763: PIDGEOTITE</li> <li>764: GLALITITE</li> <li>765: DIANCITE</li> <li>768: CAMERUPTITE</li> <li>769: LOPUNNITE</li> <li>770: SALAMENCITE</li> <li>771: BEEDRILLITE</li> <li>777: NORMALIUMZ</li> <li>778: FIRIUMZ</li> <li>779: WATERIUMZ</li> <li>780: ELECTRIUMZ</li> <li>781: GRASSIUMZ</li> <li>782: ICIUMZ</li> <li>783: FIGHTINIUMZ</li> <li>784: POISONIUMZ</li> <li>785: GROUNDIUMZ</li> <li>786: FLYINIUMZ</li> <li>787: PSYCHIUMZ</li> <li>788: BUGINIUMZ</li> <li>789: ROCKIUMZ</li> <li>790: GHOSTIUMZ</li> <li>791: DRAGONIUMZ</li> <li>792: DARKINIUMZ</li> <li>793: STEELIUMZ</li> <li>794: FAIRIUMZ</li> <li>795: PIKANIUMZ</li> <li>796: BOTTLECAP</li> <li>797: GOLDBOTTLECAP</li> <li>799: DECIDIUMZ</li> <li>800: INCINIUMZ</li> <li>801: PRIMARIUMZ</li> <li>802: TAPUNIUMZ</li> <li>803: MARSHADIUMZ</li> <li>804: ALORAICHIUMZ</li> <li>805: SNORLIUMZ</li> <li>806: EEVIUMZ</li> <li>807: MEWNIUMZ</li> <li>837: PIKASHUNIUMZ</li> <li>847: ADRENALINEORB</li> <li>850: ICESTONE</li> <li>852: BEASTBALL</li> <li>880: TERRAINEXTENDER</li> <li>881: PROTECTIVEPADS</li> <li>882: ELECTRICSEED</li> <li>883: PSYCHICSEED</li> <li>884: MISTYSEED</li> <li>885: GRASSYSEED</li> <li>905: FIGHTINGMEMORY</li> <li>906: FLYINGMEMORY</li> <li>907: POISONMEMORY</li> <li>908: GROUNDMEMORY</li> <li>909: ROCKMEMORY</li> <li>910: BUGMEMORY</li> <li>911: GHOSTMEMORY</li> <li>912: STEELMEMORY</li> <li>913: FIREMEMORY</li> <li>914: WATERMEMORY</li> <li>915: GRASSMEMORY</li> <li>916: ELECTRICMEMORY</li> <li>917: PSYCHICMEMORY</li> <li>918: ICEMEMORY</li> <li>919: DRAGONMEMORY</li> <li>920: DARKMEMORY</li> <li>921: FAIRYMEMORY</li> <li>922: SOLGANIUMZ</li> <li>923: LUNALIUMZ</li> <li>924: ULTRANECROZIUMZ</li> <li>925: MIMIKIUMZ</li> <li>926: LYCANIUMZ</li> <li>927: KOMMONIUMZ</li> <li>1104: RUSTEDSWORD</li> <li>1105: RUSTEDSHIELD</li> <li>1106: FOSSILIZEDBIRD</li> <li>1107: FOSSILIZEDFISH</li> <li>1108: FOSSILIZEDDRAKE</li> <li>1109: FOSSILIZEDDINO</li> <li>1110: STRAWBERRYSWEET</li> <li>1111: LOVESWEET</li> <li>1112: BERRYSWEET</li> <li>1113: CLOVERSWEET</li> <li>1114: FLOWERSWEET</li> <li>1115: STARSWEET</li> <li>1116: RIBBONSWEET</li> <li>1117: SWEETAPPLE</li> <li>1118: TARTAPPLE</li> <li>1119: THROATSPRAY</li> <li>1120: EJECTPACK</li> <li>1121: HEAVYDUTYBOOTS</li> <li>1122: BLUNDERPOLICY</li> <li>1123: ROOMSERVICE</li> <li>1124: UTILITYUMBRELLA</li> <li>1131: TR00</li> <li>1132: TR01</li> <li>1133: TR02</li> <li>1134: TR03</li> <li>1135: TR04</li> <li>1136: TR05</li> <li>1137: TR06</li> <li>1138: TR07</li> <li>1139: TR08</li> <li>1140: TR09</li> <li>1141: TR10</li> <li>1142: TR11</li> <li>1143: TR12</li> <li>1144: TR13</li> <li>1145: TR14</li> <li>1146: TR15</li> <li>1147: TR16</li> <li>1148: TR17</li> <li>1149: TR18</li> <li>1150: TR19</li> <li>1151: TR20</li> <li>1152: TR21</li> <li>1153: TR22</li> <li>1154: TR23</li> <li>1155: TR24</li> <li>1156: TR25</li> <li>1157: TR26</li> <li>1158: TR27</li> <li>1159: TR28</li> <li>1160: TR29</li> <li>1161: TR30</li> <li>1162: TR31</li> <li>1163: TR32</li> <li>1164: TR33</li> <li>1165: TR34</li> <li>1166: TR35</li> <li>1167: TR36</li> <li>1168: TR37</li> <li>1169: TR38</li> <li>1170: TR39</li> <li>1171: TR40</li> <li>1172: TR41</li> <li>1173: TR42</li> <li>1174: TR43</li> <li>1175: TR44</li> <li>1176: TR45</li> <li>1177: TR46</li> <li>1178: TR47</li> <li>1179: TR48</li> <li>1180: TR49</li> <li>1181: TR50</li> <li>1182: TR51</li> <li>1183: TR52</li> <li>1184: TR53</li> <li>1185: TR54</li> <li>1186: TR55</li> <li>1187: TR56</li> <li>1188: TR57</li> <li>1189: TR58</li> <li>1190: TR59</li> <li>1191: TR60</li> <li>1192: TR61</li> <li>1193: TR62</li> <li>1194: TR63</li> <li>1195: TR64</li> <li>1196: TR65</li> <li>1197: TR66</li> <li>1198: TR67</li> <li>1199: TR68</li> <li>1200: TR69</li> <li>1201: TR70</li> <li>1202: TR71</li> <li>1203: TR72</li> <li>1204: TR73</li> <li>1205: TR74</li> <li>1206: TR75</li> <li>1207: TR76</li> <li>1208: TR77</li> <li>1209: TR78</li> <li>1210: TR79</li> <li>1211: TR80</li> <li>1212: TR81</li> <li>1213: TR82</li> <li>1214: TR83</li> <li>1215: TR84</li> <li>1216: TR85</li> <li>1217: TR86</li> <li>1218: TR87</li> <li>1219: TR88</li> <li>1220: TR89</li> <li>1221: TR90</li> <li>1222: TR91</li> <li>1223: TR92</li> <li>1224: TR93</li> <li>1225: TR94</li> <li>1226: TR95</li> <li>1227: TR96</li> <li>1228: TR97</li> <li>1229: TR98</li> <li>1230: TR99</li> <li>1254: CRACKEDPOT</li> <li>1255: CHIPPEDPOT</li> <li>1583: GALARICACUFF</li> <li>1593: GALARICAWREATH</li> <li>1778: ADAMANTCRYSTAL</li> <li>1779: LUSTROUSGLOBE</li> <li>1780: GRISEOUSCORE</li> <li>1786: STRANGEBALL</li> <li>1862: MALICIOUSARMOR</li> <li>1881: BOOSTERENERGY</li> <li>1882: ABILITYSHIELD</li> <li>1883: CLEARAMULET</li> <li>1884: MIRRORHERB</li> <li>1885: PUNCHINGGLOVE</li> <li>1886: COVERTCLOAK</li> <li>1887: LOADEDDICE</li> <li>2345: AUSPICIOUSARMOR</li> <li>2402: FAIRYFEATHER</li> <li>2403: SYRUPYAPPLE</li> <li>2404: UNREMARKABLETEACUP</li> <li>2405: MASTERPIECETEACUP</li> <li>2407: CORNERSTONEMASK</li> <li>2408: WELLSPRINGMASK</li> <li>2409: HEARTHFLAMEMASK</li> </ul>"},{"location":"dex/reference/dex-classes/#poketypes.dex.dexdata_pb2.DexStatus","title":"<code>DexStatus</code>","text":"<p>Represents possible Statuss</p> <p>Options:</p> <ul> <li>1: FNT</li> <li>2: BRN</li> <li>3: PAR</li> <li>4: SLP</li> <li>5: FRZ</li> <li>6: PSN</li> <li>7: TOX</li> </ul>"},{"location":"dex/reference/dex-classes/#poketypes.dex.dexdata_pb2.DexWeather","title":"<code>DexWeather</code>","text":"<p>Represents possible Weathers</p> <p>Options:</p> <ul> <li>1: NONE</li> <li>2: RAINDANCE</li> <li>3: PRIMORDIALSEA</li> <li>4: SUNNYDAY</li> <li>5: DESOLATELAND</li> <li>6: SANDSTORM</li> <li>7: HAIL</li> <li>8: SNOW</li> <li>9: DELTASTREAM</li> </ul>"},{"location":"dex/reference/dex-classes/#poketypes.dex.dexdata_pb2.DexCondition","title":"<code>DexCondition</code>","text":"<p>Represents possible Conditions</p> <p>Options:</p> <ul> <li>1: CONFUSION</li> <li>2: FLINCH</li> <li>3: TRAPPED</li> <li>4: TRAPPER</li> <li>5: PARTIALLYTRAPPED</li> <li>6: LOCKEDMOVE</li> <li>7: TWOTURNMOVE</li> <li>8: CHOICELOCK</li> <li>9: MUSTRECHARGE</li> <li>10: FUTUREMOVE</li> <li>11: HEALREPLACEMENT</li> <li>12: STALL</li> <li>13: GEM</li> <li>14: DYNAMAX</li> <li>15: COMMANDED</li> <li>16: COMMANDING</li> <li>17: ARCEUS</li> <li>18: SILVALLY</li> <li>19: ROLLOUTSTORAGE</li> </ul>"},{"location":"dex/reference/dex-classes/#poketypes.dex.dexdata_pb2.DexAbility","title":"<code>DexAbility</code>","text":"<p>Represents possible Abilitys</p> <p>Options:</p> <ul> <li>100: NOABILITY</li> <li>200: STENCH</li> <li>300: DRIZZLE</li> <li>400: SPEEDBOOST</li> <li>500: BATTLEARMOR</li> <li>600: STURDY</li> <li>700: DAMP</li> <li>800: LIMBER</li> <li>900: SANDVEIL</li> <li>1000: STATIC</li> <li>1100: VOLTABSORB</li> <li>1200: WATERABSORB</li> <li>1300: OBLIVIOUS</li> <li>1400: CLOUDNINE</li> <li>1500: COMPOUNDEYES</li> <li>1600: INSOMNIA</li> <li>1700: COLORCHANGE</li> <li>1800: IMMUNITY</li> <li>1900: FLASHFIRE</li> <li>2000: SHIELDDUST</li> <li>2100: OWNTEMPO</li> <li>2200: SUCTIONCUPS</li> <li>2300: INTIMIDATE</li> <li>2400: SHADOWTAG</li> <li>2500: ROUGHSKIN</li> <li>2600: WONDERGUARD</li> <li>2700: LEVITATE</li> <li>2800: EFFECTSPORE</li> <li>2900: SYNCHRONIZE</li> <li>3000: CLEARBODY</li> <li>3100: NATURALCURE</li> <li>3200: LIGHTNINGROD</li> <li>3300: SERENEGRACE</li> <li>3400: SWIFTSWIM</li> <li>3500: CHLOROPHYLL</li> <li>3600: ILLUMINATE</li> <li>3700: TRACE</li> <li>3800: HUGEPOWER</li> <li>3900: POISONPOINT</li> <li>4000: INNERFOCUS</li> <li>4100: MAGMAARMOR</li> <li>4200: WATERVEIL</li> <li>4300: MAGNETPULL</li> <li>4400: SOUNDPROOF</li> <li>4500: RAINDISH</li> <li>4600: SANDSTREAM</li> <li>4700: PRESSURE</li> <li>4800: THICKFAT</li> <li>4900: EARLYBIRD</li> <li>5000: FLAMEBODY</li> <li>5100: RUNAWAY</li> <li>5200: KEENEYE</li> <li>5300: HYPERCUTTER</li> <li>5400: PICKUP</li> <li>5500: TRUANT</li> <li>5600: HUSTLE</li> <li>5700: CUTECHARM</li> <li>5800: PLUS</li> <li>5900: MINUS</li> <li>6000: FORECAST</li> <li>6100: STICKYHOLD</li> <li>6200: SHEDSKIN</li> <li>6300: GUTS</li> <li>6400: MARVELSCALE</li> <li>6500: LIQUIDOOZE</li> <li>6600: OVERGROW</li> <li>6700: BLAZE</li> <li>6800: TORRENT</li> <li>6900: SWARM</li> <li>7000: ROCKHEAD</li> <li>7100: DROUGHT</li> <li>7200: ARENATRAP</li> <li>7300: VITALSPIRIT</li> <li>7400: WHITESMOKE</li> <li>7500: PUREPOWER</li> <li>7600: SHELLARMOR</li> <li>7700: AIRLOCK</li> <li>7800: TANGLEDFEET</li> <li>7900: MOTORDRIVE</li> <li>8000: RIVALRY</li> <li>8100: STEADFAST</li> <li>8200: SNOWCLOAK</li> <li>8300: GLUTTONY</li> <li>8400: ANGERPOINT</li> <li>8500: UNBURDEN</li> <li>8600: HEATPROOF</li> <li>8700: SIMPLE</li> <li>8800: DRYSKIN</li> <li>8900: DOWNLOAD</li> <li>9000: IRONFIST</li> <li>9100: POISONHEAL</li> <li>9200: ADAPTABILITY</li> <li>9300: SKILLLINK</li> <li>9400: HYDRATION</li> <li>9500: SOLARPOWER</li> <li>9600: QUICKFEET</li> <li>9700: NORMALIZE</li> <li>9800: SNIPER</li> <li>9900: MAGICGUARD</li> <li>10000: NOGUARD</li> <li>10100: STALL</li> <li>10200: TECHNICIAN</li> <li>10300: LEAFGUARD</li> <li>10400: KLUTZ</li> <li>10500: MOLDBREAKER</li> <li>10600: SUPERLUCK</li> <li>10700: AFTERMATH</li> <li>10800: ANTICIPATION</li> <li>10900: FOREWARN</li> <li>11000: UNAWARE</li> <li>11100: TINTEDLENS</li> <li>11200: FILTER</li> <li>11300: SLOWSTART</li> <li>11400: SCRAPPY</li> <li>11500: STORMDRAIN</li> <li>11600: ICEBODY</li> <li>11700: SOLIDROCK</li> <li>11800: SNOWWARNING</li> <li>11900: HONEYGATHER</li> <li>12000: FRISK</li> <li>12100: RECKLESS</li> <li>12200: MULTITYPE</li> <li>12300: FLOWERGIFT</li> <li>12400: BADDREAMS</li> <li>12500: PICKPOCKET</li> <li>12600: SHEERFORCE</li> <li>12700: CONTRARY</li> <li>12800: UNNERVE</li> <li>12900: DEFIANT</li> <li>13000: DEFEATIST</li> <li>13100: CURSEDBODY</li> <li>13200: HEALER</li> <li>13300: FRIENDGUARD</li> <li>13400: WEAKARMOR</li> <li>13500: HEAVYMETAL</li> <li>13600: LIGHTMETAL</li> <li>13700: MULTISCALE</li> <li>13800: TOXICBOOST</li> <li>13900: FLAREBOOST</li> <li>14000: HARVEST</li> <li>14100: TELEPATHY</li> <li>14200: MOODY</li> <li>14300: OVERCOAT</li> <li>14400: POISONTOUCH</li> <li>14500: REGENERATOR</li> <li>14600: BIGPECKS</li> <li>14700: SANDRUSH</li> <li>14800: WONDERSKIN</li> <li>14900: ANALYTIC</li> <li>15000: ILLUSION</li> <li>15100: IMPOSTER</li> <li>15200: INFILTRATOR</li> <li>15300: MUMMY</li> <li>15400: MOXIE</li> <li>15500: JUSTIFIED</li> <li>15600: RATTLED</li> <li>15700: MAGICBOUNCE</li> <li>15800: SAPSIPPER</li> <li>15900: PRANKSTER</li> <li>16000: SANDFORCE</li> <li>16100: IRONBARBS</li> <li>16200: ZENMODE</li> <li>16300: VICTORYSTAR</li> <li>16400: TURBOBLAZE</li> <li>16500: TERAVOLT</li> <li>16600: AROMAVEIL</li> <li>16700: FLOWERVEIL</li> <li>16800: CHEEKPOUCH</li> <li>16900: PROTEAN</li> <li>17000: FURCOAT</li> <li>17100: MAGICIAN</li> <li>17200: BULLETPROOF</li> <li>17300: COMPETITIVE</li> <li>17400: STRONGJAW</li> <li>17500: REFRIGERATE</li> <li>17600: SWEETVEIL</li> <li>17700: STANCECHANGE</li> <li>17800: GALEWINGS</li> <li>17900: MEGALAUNCHER</li> <li>18000: GRASSPELT</li> <li>18100: SYMBIOSIS</li> <li>18200: TOUGHCLAWS</li> <li>18300: PIXILATE</li> <li>18400: GOOEY</li> <li>18500: AERILATE</li> <li>18600: PARENTALBOND</li> <li>18700: DARKAURA</li> <li>18800: FAIRYAURA</li> <li>18900: AURABREAK</li> <li>19000: PRIMORDIALSEA</li> <li>19100: DESOLATELAND</li> <li>19200: DELTASTREAM</li> <li>19300: STAMINA</li> <li>19400: WIMPOUT</li> <li>19500: EMERGENCYEXIT</li> <li>19600: WATERCOMPACTION</li> <li>19700: MERCILESS</li> <li>19800: SHIELDSDOWN</li> <li>19900: STAKEOUT</li> <li>20000: WATERBUBBLE</li> <li>20100: STEELWORKER</li> <li>20200: BERSERK</li> <li>20300: SLUSHRUSH</li> <li>20400: LONGREACH</li> <li>20500: LIQUIDVOICE</li> <li>20600: TRIAGE</li> <li>20700: GALVANIZE</li> <li>20800: SURGESURFER</li> <li>20900: SCHOOLING</li> <li>21000: DISGUISE</li> <li>21100: BATTLEBOND</li> <li>21200: POWERCONSTRUCT</li> <li>21300: CORROSION</li> <li>21400: COMATOSE</li> <li>21500: QUEENLYMAJESTY</li> <li>21600: INNARDSOUT</li> <li>21700: DANCER</li> <li>21800: BATTERY</li> <li>21900: FLUFFY</li> <li>22000: DAZZLING</li> <li>22100: SOULHEART</li> <li>22200: TANGLINGHAIR</li> <li>22300: RECEIVER</li> <li>22400: POWEROFALCHEMY</li> <li>22500: BEASTBOOST</li> <li>22600: RKSSYSTEM</li> <li>22700: ELECTRICSURGE</li> <li>22800: PSYCHICSURGE</li> <li>22900: MISTYSURGE</li> <li>23000: GRASSYSURGE</li> <li>23100: FULLMETALBODY</li> <li>23200: SHADOWSHIELD</li> <li>23300: PRISMARMOR</li> <li>23400: NEUROFORCE</li> <li>23500: INTREPIDSWORD</li> <li>23600: DAUNTLESSSHIELD</li> <li>23700: LIBERO</li> <li>23800: BALLFETCH</li> <li>23900: COTTONDOWN</li> <li>24000: PROPELLERTAIL</li> <li>24100: MIRRORARMOR</li> <li>24200: GULPMISSILE</li> <li>24300: STALWART</li> <li>24400: STEAMENGINE</li> <li>24500: PUNKROCK</li> <li>24600: SANDSPIT</li> <li>24700: ICESCALES</li> <li>24800: RIPEN</li> <li>24900: ICEFACE</li> <li>25000: POWERSPOT</li> <li>25100: MIMICRY</li> <li>25200: SCREENCLEANER</li> <li>25300: STEELYSPIRIT</li> <li>25400: PERISHBODY</li> <li>25500: WANDERINGSPIRIT</li> <li>25600: GORILLATACTICS</li> <li>25700: NEUTRALIZINGGAS</li> <li>25800: PASTELVEIL</li> <li>25900: HUNGERSWITCH</li> <li>26000: QUICKDRAW</li> <li>26100: UNSEENFIST</li> <li>26200: CURIOUSMEDICINE</li> <li>26300: TRANSISTOR</li> <li>26400: DRAGONSMAW</li> <li>26500: CHILLINGNEIGH</li> <li>26600: GRIMNEIGH</li> <li>26700: ASONE</li> <li>26701: ASONEGLASTRIER</li> <li>26702: ASONESPECTRIER</li> <li>26900: LINGERINGAROMA</li> <li>27000: SEEDSOWER</li> <li>27100: THERMALEXCHANGE</li> <li>27200: ANGERSHELL</li> <li>27300: PURIFYINGSALT</li> <li>27400: WELLBAKEDBODY</li> <li>27500: WINDRIDER</li> <li>27600: GUARDDOG</li> <li>27700: ROCKYPAYLOAD</li> <li>27800: WINDPOWER</li> <li>27900: ZEROTOHERO</li> <li>28000: COMMANDER</li> <li>28100: ELECTROMORPHOSIS</li> <li>28200: PROTOSYNTHESIS</li> <li>28300: QUARKDRIVE</li> <li>28400: GOODASGOLD</li> <li>28500: VESSELOFRUIN</li> <li>28501: TABLETSOFRUIN</li> <li>28502: BEADSOFRUIN</li> <li>28600: SWORDOFRUIN</li> <li>28900: ORICHALCUMPULSE</li> <li>29000: HADRONENGINE</li> <li>29100: OPPORTUNIST</li> <li>29200: CUDCHEW</li> <li>29300: SHARPNESS</li> <li>29400: SUPREMEOVERLORD</li> <li>29500: COSTAR</li> <li>29600: TOXICDEBRIS</li> <li>29700: ARMORTAIL</li> <li>29800: EARTHEATER</li> <li>29900: MYCELIUMMIGHT</li> <li>30000: HOSPITALITY</li> <li>30100: MINDSEYE</li> <li>30200: EMBODYASPECTTEAL</li> <li>30300: EMBODYASPECTWELLSPRING</li> <li>30400: EMBODYASPECTHEARTHFLAME</li> <li>30500: EMBODYASPECTCORNERSTONE</li> <li>30600: TOXICCHAIN</li> <li>30700: SUPERSWEETSYRUP</li> </ul>"},{"location":"dex/reference/pokedex-classes/","title":"The PokedexClass","text":"<p><code>poketypes.dex.pokedex</code> OR directly import from <code>poketypes.dex</code></p>"},{"location":"dex/reference/pokedex-classes/#basics","title":"Basics","text":"<p>Each PokedexClass is a pydantic BaseModel, holding every possibly-useful attribute sourced directly from pokemon showdown typescript files as the ground truth.</p>"},{"location":"dex/reference/pokedex-classes/#reference","title":"Reference","text":"<p>Provides BaseModels for accessing real information about specific items/pokemon/moves/etc.</p> <p>All Pokedex{NAME} classes are defined in this module, though you can also import these directly from poketypes.dex.</p>"},{"location":"dex/reference/pokedex-classes/#poketypes.dex.pokedex.PokedexMove","title":"<code>PokedexMove</code>","text":"<p>Pokedex class for Move information.</p> ATTRIBUTE DESCRIPTION <code>name</code> <p>The friendly string name of this move</p> <p> TYPE: <code>str</code> </p> <code>id</code> <p>The DexMove ID of this move</p> <p> TYPE: <code>DexMove.ValueType</code> </p> <code>base_power</code> <p>The base power of the move</p> <p> TYPE: <code>int</code> </p> <code>pp</code> <p>The pp of this move</p> <p> TYPE: <code>int</code> </p> <code>priority</code> <p>The priority of the move</p> <p> TYPE: <code>int</code> </p> <code>crit_ratio</code> <p>The crit ratio of the move (e.g. 2 = twice the chance to crit)</p> <p> TYPE: <code>int</code> </p> <code>category</code> <p>The move category as a DexMoveCategory</p> <p> TYPE: <code>DexMoveCategory.ValueType</code> </p> <code>target</code> <p>The target type of this move</p> <p> TYPE: <code>DexMoveTarget.ValueType</code> </p> <code>mtype</code> <p>The type of the move</p> <p> TYPE: <code>DexType.ValueType</code> </p> <code>breaks_protect</code> <p>Whether the move breaks target protect</p> <p> TYPE: <code>bool</code> </p> <code>ignore_ability</code> <p>Whether the move ignores target ability</p> <p> TYPE: <code>bool</code> </p> <code>ignore_defensive</code> <p>Whether the move ignores target defensive boosts</p> <p> TYPE: <code>bool</code> </p> <code>ignore_evasion</code> <p>Whether the move ignores target evasion boosts</p> <p> TYPE: <code>bool</code> </p> <code>ignore_immunity</code> <p>Whether the move ignores target immunity to this move type</p> <p> TYPE: <code>bool</code> </p> <code>multiaccuracy</code> <p>Whether the multihit move is all or nothing</p> <p> TYPE: <code>bool</code> </p> <code>ohko</code> <p>Whether the move is a one-hit-ko</p> <p> TYPE: <code>bool</code> </p> <code>stalling_move</code> <p>Whether the move is considered a stalling move</p> <p> TYPE: <code>bool</code> </p> <code>will_crit</code> <p>Whether the move will 100% crit if it lands</p> <p> TYPE: <code>bool</code> </p> <code>has_crash_damage</code> <p>Whether the move does damage to its user on failure</p> <p> TYPE: <code>bool</code> </p> <code>has_sheer_force</code> <p>The move is always boosted by sheer-force without losing benefit</p> <p> TYPE: <code>bool</code> </p> <code>selfdestruct_always</code> <p>Whether this move always causes the user to faint</p> <p> TYPE: <code>bool</code> </p> <code>selfdestruct_ifhit</code> <p>Whether the move causes the user to faint if and only if it hits</p> <p> TYPE: <code>bool</code> </p> <code>steals_boosts</code> <p>Whether the move steals the targets boosts</p> <p> TYPE: <code>bool</code> </p> <code>level_damage</code> <p>Whether the move does damage based on the level of the user</p> <p> TYPE: <code>bool</code> </p> <code>force_switch</code> <p>Whether the move forces the target to switch out</p> <p> TYPE: <code>bool</code> </p> <code>mindblown_recoil</code> <p>Whether the move has special 'Mind Blown' style recoil</p> <p> TYPE: <code>bool</code> </p> <code>struggle_recoil</code> <p>Whether the move has special 'Struggle' style recoil</p> <p> TYPE: <code>bool</code> </p> <code>smart_target</code> <p>Whether the move uses smart targetting</p> <p> TYPE: <code>bool</code> </p> <code>thaws_target</code> <p>Whether the move thaws target as a special effect</p> <p> TYPE: <code>bool</code> </p> <code>tracks_target</code> <p>Whether the move ignores <code>draw-in</code> move/abilities.</p> <p> TYPE: <code>bool</code> </p> <code>selfswitch_standard</code> <p>Whether the move is a typical self-switching move. Teleport/U-Turn/etc</p> <p> TYPE: <code>bool</code> </p> <code>selfswitch_volatile</code> <p>Whether the move is a volatile-keeping self-switching move. Baton Pass</p> <p> TYPE: <code>bool</code> </p> <code>selfswitch_shedtail</code> <p>Whether the move is a substitue creating self-switching move. Shed Tail</p> <p> TYPE: <code>bool</code> </p> <code>sleep_usable</code> <p>Whether the move can be used when sleeping</p> <p> TYPE: <code>bool</code> </p> <code>no_metronome</code> <p>Whether the move can NOT be used as a result of metronome</p> <p> TYPE: <code>bool</code> </p> <code>no_sketch</code> <p>Whether the move can NOT be copied as a result of sketch</p> <p> TYPE: <code>bool</code> </p> <code>no_ppboosts</code> <p>Whether the move can NOT have its pp boosted beyond default</p> <p> TYPE: <code>bool</code> </p> <code>accuracy</code> <p>The accuracy of this move. Optional if the move bypasses accuracy</p> <p> TYPE: <code>Optional[int]</code> </p> <code>multihit</code> <p>The move hits multiple times from slot0 - slot1 times inclusive. Optional</p> <p> TYPE: <code>Optional[Tuple[int, int]]</code> </p> <code>drain</code> <p>The move drains hp: (slot0 / slot1) times damage dealt. Optional</p> <p> TYPE: <code>Optional[Tuple[int, int]]</code> </p> <code>heal</code> <p>The move directly heals hp: (slot0 / slot1) times maximum health. Optional</p> <p> TYPE: <code>Optional[Tuple[int, int]]</code> </p> <code>recoil</code> <p>The move recoils back hp: (slot0 / slot1) times damage dealt. Optional</p> <p> TYPE: <code>Optional[Tuple[int, int]]</code> </p> <code>boosts</code> <p>Any boosts for the target this move provides (100%). Optional</p> <p> TYPE: <code>Optional[Dict[DexStat.ValueType, int]]</code> </p> <code>direct_damage</code> <p>An integer exact amount of damage the move does. Optional</p> <p> TYPE: <code>Optional[int]</code> </p> <code>weather</code> <p>The weather started by this move. Optional</p> <p> TYPE: <code>Optional[DexWeather.ValueType]</code> </p> <code>flag_allyanim</code> <p>MOVE FLAG: allyanim</p> <p> TYPE: <code>bool</code> </p> <code>flag_bite</code> <p>MOVE FLAG: bite</p> <p> TYPE: <code>bool</code> </p> <code>flag_bullet</code> <p>MOVE FLAG: bullet</p> <p> TYPE: <code>bool</code> </p> <code>flag_bypasssub</code> <p>MOVE FLAG: bypasssub</p> <p> TYPE: <code>bool</code> </p> <code>flag_cantusetwice</code> <p>MOVE FLAG: cantusetwice</p> <p> TYPE: <code>bool</code> </p> <code>flag_charge</code> <p>MOVE FLAG: charge</p> <p> TYPE: <code>bool</code> </p> <code>flag_contact</code> <p>MOVE FLAG: contact</p> <p> TYPE: <code>bool</code> </p> <code>flag_dance</code> <p>MOVE FLAG: dance</p> <p> TYPE: <code>bool</code> </p> <code>flag_defrost</code> <p>MOVE FLAG: defrost</p> <p> TYPE: <code>bool</code> </p> <code>flag_distance</code> <p>MOVE FLAG: distance</p> <p> TYPE: <code>bool</code> </p> <code>flag_failcopycat</code> <p>MOVE FLAG: failcopycat</p> <p> TYPE: <code>bool</code> </p> <code>flag_failencore</code> <p>MOVE FLAG: failencore</p> <p> TYPE: <code>bool</code> </p> <code>flag_failinstruct</code> <p>MOVE FLAG: failinstruct</p> <p> TYPE: <code>bool</code> </p> <code>flag_failmefirst</code> <p>MOVE FLAG: failmefirst</p> <p> TYPE: <code>bool</code> </p> <code>flag_failmimic</code> <p>MOVE FLAG: failmimic</p> <p> TYPE: <code>bool</code> </p> <code>flag_futuremove</code> <p>MOVE FLAG: futuremove</p> <p> TYPE: <code>bool</code> </p> <code>flag_gravity</code> <p>MOVE FLAG: gravity</p> <p> TYPE: <code>bool</code> </p> <code>flag_heal</code> <p>MOVE FLAG: heal</p> <p> TYPE: <code>bool</code> </p> <code>flag_mirror</code> <p>MOVE FLAG: mirror</p> <p> TYPE: <code>bool</code> </p> <code>flag_mustpressure</code> <p>MOVE FLAG: mustpressure</p> <p> TYPE: <code>bool</code> </p> <code>flag_noassist</code> <p>MOVE FLAG: noassist</p> <p> TYPE: <code>bool</code> </p> <code>flag_nonsky</code> <p>MOVE FLAG: nonsky</p> <p> TYPE: <code>bool</code> </p> <code>flag_noparentalbond</code> <p>MOVE FLAG: noparentalbond</p> <p> TYPE: <code>bool</code> </p> <code>flag_nosleeptalk</code> <p>MOVE FLAG: nosleeptalk</p> <p> TYPE: <code>bool</code> </p> <code>flag_pledgecombo</code> <p>MOVE FLAG: pledgecombo</p> <p> TYPE: <code>bool</code> </p> <code>flag_powder</code> <p>MOVE FLAG: powder</p> <p> TYPE: <code>bool</code> </p> <code>flag_protect</code> <p>MOVE FLAG: protect</p> <p> TYPE: <code>bool</code> </p> <code>flag_pulse</code> <p>MOVE FLAG: pulse</p> <p> TYPE: <code>bool</code> </p> <code>flag_punch</code> <p>MOVE FLAG: punch</p> <p> TYPE: <code>bool</code> </p> <code>flag_recharge</code> <p>MOVE FLAG: recharge</p> <p> TYPE: <code>bool</code> </p> <code>flag_reflectable</code> <p>MOVE FLAG: reflectable</p> <p> TYPE: <code>bool</code> </p> <code>flag_slicing</code> <p>MOVE FLAG: slicing</p> <p> TYPE: <code>bool</code> </p> <code>flag_snatch</code> <p>MOVE FLAG: snatch</p> <p> TYPE: <code>bool</code> </p> <code>flag_sound</code> <p>MOVE FLAG: sound</p> <p> TYPE: <code>bool</code> </p> <code>flag_wind</code> <p>MOVE FLAG: wind</p> <p> TYPE: <code>bool</code> </p>"},{"location":"dex/reference/pokedex-classes/#poketypes.dex.pokedex.PokedexItem","title":"<code>PokedexItem</code>","text":"<p>Pokedex class for Item information.</p> ATTRIBUTE DESCRIPTION <code>name</code> <p>The friendly string name of this item</p> <p> TYPE: <code>str</code> </p> <code>id</code> <p>The DexItem ID of this item</p> <p> TYPE: <code>DexItem.ValueType</code> </p> <code>is_gem</code> <p>Whether the item is a gem or not</p> <p> TYPE: <code>bool</code> </p> <code>is_berry</code> <p>Whether the item is a berry</p> <p> TYPE: <code>bool</code> </p> <code>naturalgift_base_power</code> <p>If this item is usable with Natural Gift, what is the base power</p> <p> TYPE: <code>Optional[int]</code> </p> <code>naturalgift_type</code> <p>If this item is usable with Natural Gift, what is the type</p> <p> TYPE: <code>Optional[DexType.ValueType]</code> </p> <code>item_users</code> <p>A list of intended holders of this item</p> <p> TYPE: <code>List[DexPokemon.ValueType]</code> </p> <code>zmove_to</code> <p>What move this zmove transforms the move into</p> <p> TYPE: <code>Optional[DexMove.ValueType]</code> </p> <code>zmove_from</code> <p>What special move this zmove transforms</p> <p> TYPE: <code>Optional[DexMove.ValueType]</code> </p> <code>mega_evolves</code> <p>Which base-forme pokemon this megastone evolves from. Optional</p> <p> TYPE: <code>Optional[DexPokemon.ValueType]</code> </p> <code>mega_forme</code> <p>Which mega-forme pokemon this megastone evolves into. Optional</p> <p> TYPE: <code>Optional[DexPokemon.ValueType]</code> </p> <code>ignore_klutz</code> <p>Whether the item ignores klutz</p> <p> TYPE: <code>bool</code> </p> <code>fling_basepower</code> <p>The basepower of fling when flinging this item. None if n/a</p> <p> TYPE: <code>Optional[int]</code> </p>"},{"location":"dex/reference/pokedex-classes/#poketypes.dex.pokedex.StatBlock","title":"<code>StatBlock</code>","text":"<p>Helper object for containing base stats information.</p> ATTRIBUTE DESCRIPTION <code>hp_stat</code> <p>The base hp of the pokemon</p> <p> TYPE: <code>int</code> </p> <code>atk_stat</code> <p>The base attack of the pokemon</p> <p> TYPE: <code>int</code> </p> <code>def_stat</code> <p>The base defence of the pokemon</p> <p> TYPE: <code>int</code> </p> <code>spa_stat</code> <p>The base special attack of the pokemon</p> <p> TYPE: <code>int</code> </p> <code>spd_stat</code> <p>The base special defence of the pokemon</p> <p> TYPE: <code>int</code> </p> <code>spe_stat</code> <p>The base speed of the pokemon</p> <p> TYPE: <code>int</code> </p>"},{"location":"dex/reference/pokedex-classes/#poketypes.dex.pokedex.PokedexPokemon","title":"<code>PokedexPokemon</code>","text":"<p>Pokedex class for Pokemon information.</p> ATTRIBUTE DESCRIPTION <code>name</code> <p>The friendly string name of this pokemon</p> <p> TYPE: <code>str</code> </p> <code>id</code> <p>The DexPokemon ID of this pokemon</p> <p> TYPE: <code>DexPokemon.ValueType</code> </p> <code>base_name</code> <p>The friendly string name of this pokemon's base forme</p> <p> TYPE: <code>str</code> </p> <code>base_id</code> <p>The DexPokemon ID of this pokemon's base forme</p> <p> TYPE: <code>DexPokemon.ValueType</code> </p> <code>types</code> <p>The types of this pokemon</p> <p> TYPE: <code>List[DexType.ValueType]</code> </p> <code>base_stats</code> <p>The base stat block of this pokemon</p> <p> TYPE: <code>StatBlock</code> </p> <code>abilities</code> <p>The list of abilities this pokemon can have</p> <p> TYPE: <code>List[DexAbility.ValueType]</code> </p>"},{"location":"dex/reference/utilities/","title":"Utilities","text":"<p>There are also a few utility functions provided to help the user convert typical string names to the relevant ID for their corresponding Dex Class.</p>"},{"location":"dex/reference/utilities/#dex-data-utilities","title":"Dex Data Utilities:","text":"<p>Provides tools for cleaning Dex IDs back and forth from strings, as well as other utility functions.</p>"},{"location":"dex/reference/utilities/#poketypes.dex.dexdata.cast2dex","title":"<code>cast2dex(name, dex_class)</code>","text":"<p>Clean and cast name to the corresponding entry in the given dex_class.</p> <p>EX: Magikarp -&gt; Cleaned to: MAGIKARP -&gt; DexPokemon.POKEMON_MAGIKARP (Which is secretly the int 129000)</p> <p>EX: Scizor-Mega -&gt; Cleaned to: SCIZORMEGA -&gt; DexPokemon.POKEMON_SCIZORMEGA (Which is secretly the int 208001)</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the entry.</p> required <code>dex_class</code> <code>AnyDex</code> <p>Which Dex Enum to use in labeling. Must be a valid Dex{NAME} class.</p> required <p>Returns:</p> Name Type Description <code>int</code> <code>int</code> <p>The corresponding value for this cleaned entry.</p> Source code in <code>poketypes\\dex\\dexdata.py</code> <pre><code>def cast2dex(name: str, dex_class: AnyDex) -&gt; int:\n    \"\"\"Clean and cast name to the corresponding entry in the given dex_class.\n\n    EX:\n    Magikarp -&gt; Cleaned to: MAGIKARP -&gt; DexPokemon.POKEMON_MAGIKARP (Which is secretly the int 129000)\n\n    EX:\n    Scizor-Mega -&gt; Cleaned to: SCIZORMEGA -&gt; DexPokemon.POKEMON_SCIZORMEGA (Which is secretly the int 208001)\n\n    Args:\n        name (str): The name of the entry.\n        dex_class (AnyDex): Which Dex Enum to use in labeling. Must be a valid Dex{NAME} class.\n\n    Returns:\n        int: The corresponding value for this cleaned entry.\n    \"\"\"\n    clean_id = clean_name(name)\n\n    if clean_id is None:\n        return clean_id\n\n    if dex_class == DexAbility:\n        return DexAbility.Value(f\"ABILITY_{clean_id}\")\n    elif dex_class == DexCondition:\n        return DexCondition.Value(f\"CONDITION_{clean_id}\")\n    elif dex_class == DexGen:\n        return DexGen.Value(f\"GEN_{clean_id}\")\n    elif dex_class == DexItem:\n        return DexItem.Value(f\"ITEM_{clean_id}\")\n    elif dex_class == DexMove:\n        return DexMove.Value(f\"MOVE_{clean_id}\")\n    elif dex_class == DexMoveCategory:\n        return DexMoveCategory.Value(f\"MOVECATEGORY_{clean_id}\")\n    elif dex_class == DexMoveTarget:\n        return DexMoveTarget.Value(f\"MOVETARGET_{clean_id}\")\n    elif dex_class == DexNature:\n        return DexNature.Value(f\"NATURE_{clean_id}\")\n    elif dex_class == DexPokemon:\n        return DexPokemon.Value(f\"POKEMON_{clean_id}\")\n    elif dex_class == DexStat:\n        return DexStat.Value(f\"STAT_{clean_id}\")\n    elif dex_class == DexStatus:\n        return DexStatus.Value(f\"STATUS_{clean_id}\")\n    elif dex_class == DexType:\n        return DexType.Value(f\"TYPE_{clean_id}\")\n    elif dex_class == DexWeather:\n        return DexWeather.Value(f\"WEATHER_{clean_id}\")\n</code></pre>"},{"location":"dex/reference/utilities/#poketypes.dex.dexdata.clean_forme","title":"<code>clean_forme(species)</code>","text":"<p>Transform a pokemon species (DexPokemon) into the string name of it's base forme.</p> <p>Makes use of the fact that DexPokemon are of the form {dex_number}{3-digit forme number}, and that the base forme is always forme-number <code>000</code>. If this changes, this function will no longer work.</p> <p>Parameters:</p> Name Type Description Default <code>species</code> <code>ValueType</code> <p>The input species to clean to base forme.</p> required <p>Returns:</p> Type Description <code>ValueType</code> <p>DexPokemon.ValueType: The corresponding ID of the base forme species.</p> Source code in <code>poketypes\\dex\\dexdata.py</code> <pre><code>def clean_forme(species: DexPokemon.ValueType) -&gt; DexPokemon.ValueType:\n    \"\"\"Transform a pokemon species (DexPokemon) into the string name of it's base forme.\n\n    Makes use of the fact that DexPokemon are of the form {dex_number}{3-digit forme number},\n    and that the base forme is always forme-number `000`.\n    If this changes, this function will no longer work.\n\n    Args:\n        species (DexPokemon.ValueType): The input species to clean to base forme.\n\n    Returns:\n        DexPokemon.ValueType: The corresponding ID of the base forme species.\n    \"\"\"\n    clean_species = (species // 1000) * 1000\n    return clean_species\n</code></pre>"},{"location":"dex/reference/utilities/#poketypes.dex.dexdata.clean_name","title":"<code>clean_name(name)</code>","text":"<p>Format a given uncleaned string name as the format needed for searching the corresponding Enum.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>Optional[str]</code> <p>An optional name to clean. If None is given, we immediately return None.</p> required <p>Returns:</p> Type Description <code>Optional[str]</code> <p>Optional[str]: The clean-form of the input name, if it wasn't None or blank.</p> Source code in <code>poketypes\\dex\\dexdata.py</code> <pre><code>def clean_name(name: Optional[str]) -&gt; Optional[str]:\n    \"\"\"Format a given uncleaned string name as the format needed for searching the corresponding Enum.\n\n    Args:\n        name (Optional[str]): An optional name to clean. If None is given, we immediately return None.\n\n    Returns:\n        Optional[str]: The clean-form of the input name, if it wasn't None or blank.\n    \"\"\"\n    if name is None or name == \"\":\n        return None\n\n    clean_id = (\n        unicodedata.normalize(\n            \"NFKD\",\n            name.upper()\n            .replace(\"-\", \"\")\n            .replace(\"\u2019\", \"\")\n            .replace(\"'\", \"\")\n            .replace(\" \", \"\")\n            .replace(\"*\", \"\")\n            .replace(\":\", \"\")\n            .replace(\"%\", \"\")\n            .replace(\".\", \"\")\n            .replace(\")\", \"\")\n            .replace(\"(\", \"\"),\n        )\n        .encode(\"ASCII\", \"ignore\")\n        .decode(\"ASCII\")\n    )\n    return clean_id\n</code></pre>"},{"location":"showdown/","title":"Showdown Intro","text":""},{"location":"showdown/#5-minute-summary","title":"5-Minute Summary","text":"<p>In the <code>poketypes</code> package, we include the module <code>showdown</code>, which contains pydantic <code>BaseModel</code> subclasses for General and Battle Message formats. This allows for a smoother communication process with Pokemon Showdown, as rather than needing to build a message parser yourself, relying on relatively limited documentation from Showdown directly, you can instead build logic to take as input either <code>Message</code> or <code>BattleMessage</code> objects, which will come pre-parsed, with full type-hinting and data validation built in.</p> <p>To start, you can import both from the module <code>showdown</code> like so:</p> <pre><code>from poketypes.showdown import Message, BattleMessage\n</code></pre> <p>Both <code>Message</code> and <code>BattleMessage</code> are subclasses of <code>pydantic.BaseModel</code>, and both also have an additional function called <code>from_message</code>, which takes as input a string, and returns an initialized and parsed object from the input string message.</p> <pre><code>message = BattleMessage.from_string(\"|poke|p1|Metagross, L80|item\")\n</code></pre> <p>At this point, <code>message</code> will automatically be identified as a <code>poke</code> battle message, and will be an instance of the class <code>poketypes.showdown.battlemessage.BattleMessage_poke</code>. Rather than checking with <code>isinstance</code>, however, we  recommend instead checking the <code>message.BMTYPE</code> (or <code>message.MTYPE</code> for general messages), which is of the type <code>poketypes.showdown.BMType</code>, an Enum of all the different battle message types you can receive. For type hinting purposes, such as in the signature of a function that would process a given <code>BattleMessage</code> subclass, you would do the following:</p> <pre><code>def process_bm_poke(message: poketypes.showdown.battlemessage.BattleMessage_poke):\n</code></pre> <p>This will ensure that your IDE will have type hinting support as you process the message, and in the specific example of <code>BattleMessage_poke</code>, will give support in directly accessing the data fields like <code>message.PLAYER</code> that are unique to this <code>BattleMessage</code> subclass.</p> <p>Check out the Guides in this section for some common use-cases of this module, eith step-by-step instructions on each part of the process. Or if you prefer to learn by reading docs, check out the Reference links below or on the sidebar to familiarize yourself with some of the different categories of messages.</p>"},{"location":"showdown/#reference-links","title":"Reference Links","text":"<p>For details on all the different kinds of <code>Message</code> subclasses, see the reference page here</p> <p>For details on all the different kinds of <code>BattleMessage</code> subclasses, see the reference page here</p>"},{"location":"showdown/explanations/","title":"Why Two Classes?","text":"<p>Once you've started using the showdown message classes, you might start wondering why there is even a split between <code>Message</code> and <code>BattleMessage</code> classes at all, why not just have one class called <code>Message</code> which works for both?</p> <p>The answer is really from a convenience standpoint, rather than any technical limitation.</p> <p>In theory, we could absolutely just have one larger <code>Message</code> class that encompasses both of our current message classes, however in practice we don't use the two that we have today in the same way at all. With Pokemon Showdown's webclient, battle messages are actually a special type of room-message, sent with a chunk formatting that looks something like:</p> <pre><code>\"\"\"&gt;battle-BATTLEID\n|init|battle\n|title|colress-gpt-test1 vs. colress-gpt-test2\n|j|\u2606colress-gpt-test1\n\"\"\"\n</code></pre> <p>Already, in order to process this in a parser, we will need special handling to identify that a certain message chunk is related to some specific room/battle, and then process each remaining line in the chunk as a message pertaining to that room. Since we're already checking for room information with the \"&gt;\" at the start, we may as well just check for \"&gt;battle\" instead, and parse everything that follows as though it is specific to a battle.</p> <p>It is theoretically possible that in the future we may decide that simplifying our two class structure into just a single <code>Message</code> class may make sense, but considering that other than some benefits in terms of code organization, there really isn't much reason to do so either. The <code>Message</code> and <code>BattleMessage</code> classes are complex enough as they are now, so if we tried to merge them into one we would really need to consider a different file formatting structure for writing subclasses, compared to our current solution of one file for <code>Message</code> and one file for <code>BattleMessage</code>.</p>"},{"location":"showdown/guides/basic-parser/","title":"Building a Replay Log Parser","text":""},{"location":"showdown/guides/basic-parser/#introduction","title":"Introduction","text":"<p>This tutorial will guide usage of <code>poketypes.showdown</code> to create a simple replay log parser, which can read any arbitrary Pokemon Showdown replay file, and turn it into a list of <code>BattleMessage</code> subclass objects, that you could then proceed to do some sort of analysis or transformation on.</p> <p>Since we'll be processing a Replay log in this example, we will only be using <code>poketypes.showdown.BattleMessage</code>, but similar concepts can be applied for processing any message sent by showdown, so long as you make the distinction between general messages and message chunks that target a specific battle.</p>"},{"location":"showdown/guides/basic-parser/#prerequisites","title":"Prerequisites","text":"<p>Make sure that you have <code>poketypes</code> installed to your virtual environment, which you can do with:</p> <pre><code>pip install poketypes\n</code></pre> <p>Additionally, go ahead and download the replay file here. If you click the Download button on this page, it should download a .html file called 'OUMonotype-2014-01-29-kdarewolf-onox.html', which we will use as an example, but any replay file should work.</p>"},{"location":"showdown/guides/basic-parser/#step-1-extracting-the-battle-log","title":"Step 1: Extracting the Battle Log","text":"<p>Replay files are stored in html files, which means we need to extract the text log that we want to parse first.</p> <p>To do that, since we only need very basic html extraction, we can </p>"},{"location":"showdown/reference/battle-messages/","title":"The Showdown Battle Message","text":""},{"location":"showdown/reference/battle-messages/#the-battlemessage-object","title":"The BattleMessage object","text":"<p>The base class for all specific BattleMessage subclasses to be built from.</p> <p>When parsing a string battle message, you should directly use this class's <code>from_message</code> function, which will auto-identify which subclass (if any) the given string belongs to.</p> <p>Across all BattleMessages, you will be able to access both BMTYPE and BATTLE_MESSAGE, though you shouldn't need to access BATTLE_MESSAGE directly. (If you do, then we must be missing some data that exists in the raw string)</p> ATTRIBUTE DESCRIPTION <code>BMTYPE</code> <p>The message type of this battle message. Must be a vaild showdown battle message.</p> <p> TYPE: <code>BMType</code> </p> <code>BATTLE_MESSAGE</code> <p>The raw message line as sent from showdown. Shouldn't need to be used but worth keeping.</p> <p> TYPE: <code>str</code> </p> <code>ERR_STATE</code> <p>The error type of this battle message if it failed to parse</p> <p> TYPE: <code>Optional[Literal['UNKNOWN_BMTYPE', 'MISSING_DICT_CLASS', 'IMPLEMENTATION_NOT_READY', 'PARSE_ERROR']]</code> </p>"},{"location":"showdown/reference/battle-messages/#poketypes.showdown.battlemessage.BattleMessage.from_message","title":"<code>from_message(battle_message)</code>  <code>staticmethod</code>","text":"<p>Create a specific BattleMessage object from a raw message.</p> <p>For example, given a message '|faint|p2a: Umbreon', this will create a new BattleMessage_faint with fields extracted from the text properly.</p>"},{"location":"showdown/reference/battle-messages/#battlemessage-subclasses","title":"BattleMessage Subclasses","text":"<p>Contains BaseModels for BattleMessage parsing and processing.</p> <p>Remember to use BattleMessage.from_message directly, unless you are building test cases where you want to assert that a given message leads to a certain subclass of BattleMessage. <code>from_message</code> will auto-detect which BMType the given message corresponds to, and return the associated subclass (or an error detailing what went wrong) for you.</p>"},{"location":"showdown/reference/battle-messages/#poketypes.showdown.battlemessage.BattleMessage_player","title":"<code>BattleMessage_player</code>","text":"<p>Message containing player information.</p> ATTRIBUTE DESCRIPTION <code>PLAYER</code> <p>The player id of this player</p> <p> TYPE: <code>str</code> </p> <code>USERNAME</code> <p>The username of the player</p> <p> TYPE: <code>str</code> </p> <code>AVATAR</code> <p>Either a number id of the user's avatar or a custom value</p> <p> TYPE: <code>Union[int, str]</code> </p> <code>RATING</code> <p>The elo of the player in the current format, if applicable</p> <p> TYPE: <code>Optional[int]</code> </p> Use Case(s) <ul> <li>To communicate player username/avatar/rating information.</li> </ul> Message Format(s) <ul> <li>|player|PLAYER|USERNAME|AVATAR|RATING</li> </ul> Input Example(s) <ul> <li>|player|p1|colress-gpt-test1|colress|1520</li> <li>|player|p2|colress-gpt-test2|265|1229</li> </ul>"},{"location":"showdown/reference/battle-messages/#poketypes.showdown.battlemessage.BattleMessage_teamsize","title":"<code>BattleMessage_teamsize</code>","text":"<p>Message containing teamsize information.</p> ATTRIBUTE DESCRIPTION <code>PLAYER</code> <p>The player id of this player</p> <p> TYPE: <code>str</code> </p> <code>NUMBER</code> <p>The number of pokemon your opponent has.</p> <p> TYPE: <code>int</code> </p> Use Case(s) <ul> <li>To communicate player team size.</li> </ul> Message Format(s) <ul> <li>|teamsize|PLAYER|NUMBER</li> </ul> Input Example(s) <ul> <li>|teamsize|p1|6</li> </ul>"},{"location":"showdown/reference/battle-messages/#poketypes.showdown.battlemessage.BattleMessage_gametype","title":"<code>BattleMessage_gametype</code>","text":"<p>Message containing gametype information.</p> ATTRIBUTE DESCRIPTION <code>GAMETYPE</code> <p>The gametype of this format</p> <p> TYPE: <code>Literal['singles', 'doubles', 'triples', 'multi', 'freeforall']</code> </p> Use Case(s) <ul> <li>To communicate the game type (singles, doubles, triples, etc.)</li> </ul> Message Format(s) <ul> <li>|gametype|GAMETYPE</li> </ul> Input Example(s) <ul> <li>|gametype|singles</li> </ul>"},{"location":"showdown/reference/battle-messages/#poketypes.showdown.battlemessage.BattleMessage_gen","title":"<code>BattleMessage_gen</code>","text":"<p>Message containing gen information.</p> ATTRIBUTE DESCRIPTION <code>GENNUM</code> <p>The integer generation number of this format</p> <p> TYPE: <code>DexGen.ValueType</code> </p> Use Case(s) <ul> <li>To communicate the generation number.</li> </ul> Message Format(s) <ul> <li>|gen|GENNUM</li> </ul> Input Example(s) <ul> <li>|gen|5</li> </ul>"},{"location":"showdown/reference/battle-messages/#poketypes.showdown.battlemessage.BattleMessage_tier","title":"<code>BattleMessage_tier</code>","text":"<p>Message containing format information.</p> ATTRIBUTE DESCRIPTION <code>FORMATNAME</code> <p>The game format of this match</p> <p> TYPE: <code>str</code> </p> Use Case(s) <ul> <li>To communicate the format of this battle.</li> </ul> Message Format(s) <ul> <li>|tier|FORMATNAME</li> </ul> Input Example(s) <ul> <li>|tier|[Gen 5] Random Battle</li> </ul>"},{"location":"showdown/reference/battle-messages/#poketypes.showdown.battlemessage.BattleMessage_rated","title":"<code>BattleMessage_rated</code>","text":"<p>Message containing rating information.</p> ATTRIBUTE DESCRIPTION <code>MESSAGE</code> <p>An optional message used in tournaments</p> <p> TYPE: <code>Optional[str]</code> </p> Use Case(s) <ul> <li>To communicate any extra rules/clauses for this format.</li> </ul> Message Format(s) <ul> <li>|rated|MESSAGE</li> </ul> Input Example(s) <ul> <li>|rated|</li> </ul>"},{"location":"showdown/reference/battle-messages/#poketypes.showdown.battlemessage.BattleMessage_rule","title":"<code>BattleMessage_rule</code>","text":"<p>Message containing extra rule information.</p> ATTRIBUTE DESCRIPTION <code>RULE</code> <p>The name of the rule</p> <p> TYPE: <code>str</code> </p> <code>DESCRIPTION</code> <p>A description of this rule</p> <p> TYPE: <code>str</code> </p> Use Case(s) <ul> <li>To communicate any extra rules/clauses for this format.</li> </ul> Message Format(s) <ul> <li>|rule|RULE: DESCRIPTION</li> </ul> Input Example(s) <ul> <li>|rule|HP Percentage Mod: HP is shown in percentages</li> </ul>"},{"location":"showdown/reference/battle-messages/#poketypes.showdown.battlemessage.BattleMessage_clearpoke","title":"<code>BattleMessage_clearpoke</code>","text":"<p>Message containing a clearpoke notification.</p> Use Case(s) <ul> <li>To signal that teampreview is starting.</li> </ul> Message Format(s) <ul> <li>|clearpoke</li> </ul> Input Example(s) <ul> <li>|clearpoke</li> </ul>"},{"location":"showdown/reference/battle-messages/#poketypes.showdown.battlemessage.BattleMessage_poke","title":"<code>BattleMessage_poke</code>","text":"<p>Message containing base-forme-only information about a pokemon, presented in teampreview.</p> ATTRIBUTE DESCRIPTION <code>PLAYER</code> <p>The player id of this player</p> <p> TYPE: <code>str</code> </p> <code>SPECIES</code> <p>The forme-less species for this pokemon</p> <p> TYPE: <code>DexPokemon.ValueType</code> </p> <code>LEVEL</code> <p>The level of this pokemon</p> <p> TYPE: <code>int</code> </p> <code>GENDER</code> <p>The gender of this pokemon</p> <p> TYPE: <code>Optional[Literal['M', 'F']]</code> </p> <code>SHINY</code> <p>Whether the pokemon is shiny or not</p> <p> TYPE: <code>bool</code> </p> <code>TERA</code> <p>If this pokemon is teratyped, the string type of the new type. Else None.</p> <p> TYPE: <code>Optional[DexType.ValueType]</code> </p> <code>HAS_ITEM</code> <p>Whether or not the pokemon is holding an item</p> <p> TYPE: <code>bool</code> </p> Use Case(s) <ul> <li>To communicate base-forme, simple pokemon information for teampreview</li> </ul> Message Format(s) <ul> <li>|poke|PLAYER|DETAILS|ITEM</li> </ul> Input Example(s) <ul> <li>|poke|p1|Metagross, L80|item</li> </ul>"},{"location":"showdown/reference/battle-messages/#poketypes.showdown.battlemessage.BattleMessage_start","title":"<code>BattleMessage_start</code>","text":"<p>Message signaling the start of a battle.</p> Use Case(s) <ul> <li>To communicate that the battle has started (teampreview is over)</li> </ul> Message Format(s) <ul> <li>|start</li> </ul> Input Example(s) <ul> <li>|start</li> </ul>"},{"location":"showdown/reference/battle-messages/#poketypes.showdown.battlemessage.BattleMessage_teampreview","title":"<code>BattleMessage_teampreview</code>","text":"<p>Message signaling to make a teampreview team-order decision.</p> Use Case(s) <ul> <li>To communicate that the user needs to select a team-order.</li> </ul> Message Format(s) <ul> <li>|teampreview</li> </ul> Input Example(s) <ul> <li>|teampreview</li> </ul>"},{"location":"showdown/reference/battle-messages/#poketypes.showdown.battlemessage.BattleMessage_empty","title":"<code>BattleMessage_empty</code>","text":"<p>Completely blank message.</p> Use Case(s) <ul> <li>To separate sections in a battle log</li> </ul> Message Format(s) <ul> <li>|</li> </ul> Input Example(s) <ul> <li>|</li> </ul>"},{"location":"showdown/reference/battle-messages/#poketypes.showdown.battlemessage.BattleMessage_request","title":"<code>BattleMessage_request</code>","text":"<p>Message communicating options the user has in an upcoming choice.</p> ATTRIBUTE DESCRIPTION <code>REQUEST_TYPE</code> <p>Which type of request this request is between TEAMPREVIEW, ACTIVE, and FORCESWITCH</p> <p> TYPE: <code>Literal['TEAMPREVIEW', 'ACTIVE', 'FORCESWITCH', 'WAIT']</code> </p> <code>USERNAME</code> <p>The player's username</p> <p> TYPE: <code>str</code> </p> <code>PLAYER</code> <p>The player id of this player</p> <p> TYPE: <code>str</code> </p> <code>RQID</code> <p>The id number of this request, for the purpose of an undo function</p> <p> TYPE: <code>Optional[int]</code> </p> <code>POKEMON</code> <p>The pokemon details for each pokemon in this player's side</p> <p> TYPE: <code>List[RequestPoke]</code> </p> <code>ACTIVE_OPTIONS</code> <p>A list of actions available for each active pokemon. Will be None if switch/teampreview</p> <p> TYPE: <code>Optional[List[ActiveOption]]</code> </p> <code>FORCESWITCH_SLOTS</code> <p>A list of bool for each slot whether they are being forced to switch</p> <p> TYPE: <code>Optional[List[bool]]</code> </p> Use Case(s) <ul> <li>To inform the user about their team so that a team-order decision can be made.</li> <li>To inform the user about their available moves/switches so that a standard decision can be made.</li> <li>To request the user to switch out a Pokemon due to a forced operation (fainted/forced out).</li> <li>To inform the user that their opponent is making a decision and that the user has to wait for them.</li> </ul> Message Format(s) <ul> <li>|request|REQUEST_JSON</li> </ul> Input Example(s) <ul> <li>See logs for examples, there are a lot of variations.</li> </ul> Tips <p>This does not necessarily mean it is time for the user to respond to a choice, as teampreview and move requests are sent before the details of the previous turn are sent, and thus you should wait until it is the correct time to send your decision.</p> <p>For FORCESWITCH requests, however, a decision should be sent once you receive this message.</p>"},{"location":"showdown/reference/battle-messages/#poketypes.showdown.battlemessage.BattleMessage_inactive","title":"<code>BattleMessage_inactive</code>","text":"<p>Message communicating that the inactivity timer has been set.</p> ATTRIBUTE DESCRIPTION <code>MESSAGE</code> <p>A message related to the battle timer notification</p> <p> TYPE: <code>str</code> </p> Use Case(s) <ul> <li>To signal that there is a time-limit for descisions to be made.</li> </ul> Message Format(s) <ul> <li>|inactive|MESSAGE</li> </ul> Input Example(s) <ul> <li>TODO</li> </ul>"},{"location":"showdown/reference/battle-messages/#poketypes.showdown.battlemessage.BattleMessage_inactiveoff","title":"<code>BattleMessage_inactiveoff</code>","text":"<p>Message communicating that the inactivity timer has been turned off.</p> ATTRIBUTE DESCRIPTION <code>MESSAGE</code> <p>A message related to the battle timer notification</p> <p> TYPE: <code>str</code> </p> Use Case(s) <ul> <li>To signal that there is no longer a time-limit for descisions to be made.</li> </ul> Message Format(s) <ul> <li>|inactiveoff|MESSAGE</li> </ul> Input Example(s) <ul> <li>TODO</li> </ul>"},{"location":"showdown/reference/battle-messages/#poketypes.showdown.battlemessage.BattleMessage_upkeep","title":"<code>BattleMessage_upkeep</code>","text":"<p>Message communicating upkeep notice.</p> Use Case(s) <ul> <li>To signal that the upkeep stage has happened</li> </ul> Message Format(s) <ul> <li>|upkeep</li> </ul> Input Example(s) <ul> <li>|upkeep</li> </ul>"},{"location":"showdown/reference/battle-messages/#poketypes.showdown.battlemessage.BattleMessage_turn","title":"<code>BattleMessage_turn</code>","text":"<p>Message communicating that a turn has begun, and that move choices should be made.</p> ATTRIBUTE DESCRIPTION <code>NUMBER</code> <p>The current turn number</p> <p> TYPE: <code>int</code> </p> Use Case(s) <ul> <li>To signal to the players to make a move.</li> </ul> Message Format(s) <ul> <li>|turn|NUMBER</li> </ul> Input Example(s) <ul> <li>|turn|2</li> </ul>"},{"location":"showdown/reference/battle-messages/#poketypes.showdown.battlemessage.BattleMessage_win","title":"<code>BattleMessage_win</code>","text":"<p>Message communicating that a player has won the battle.</p> ATTRIBUTE DESCRIPTION <code>USERNAME</code> <p>The username of the winning player</p> <p> TYPE: <code>str</code> </p> Use Case(s) <ul> <li>To signal which player has won.</li> </ul> Message Format(s) <ul> <li>|win|USER</li> </ul> Input Example(s) <ul> <li>|win|colress-gpt-test2</li> </ul>"},{"location":"showdown/reference/battle-messages/#poketypes.showdown.battlemessage.BattleMessage_tie","title":"<code>BattleMessage_tie</code>","text":"<p>Message communicating that neither player has won the battle.</p> Use Case(s) <ul> <li>To signal the battle has ended in a tie</li> </ul> Message Format(s) <ul> <li>|tie</li> </ul> Input Example(s) <ul> <li>|tie</li> </ul>"},{"location":"showdown/reference/battle-messages/#poketypes.showdown.battlemessage.BattleMessage_expire","title":"<code>BattleMessage_expire</code>","text":"<p>Message communicating that the battle has ended due to mutual inactivity.</p> Use Case(s) <ul> <li>To signal the battle has ended due to mutual inactivity</li> </ul> Message Format(s) <ul> <li>|expire|</li> </ul> Input Example(s) <ul> <li>|expire|</li> </ul>"},{"location":"showdown/reference/battle-messages/#poketypes.showdown.battlemessage.BattleMessage_t","title":"<code>BattleMessage_t</code>","text":"<p>Message communicating the current timestamp.</p> ATTRIBUTE DESCRIPTION <code>TIMESTAMP</code> <p>The time of this turn as a datetime (conv from unix seconds)</p> <p> TYPE: <code>datetime</code> </p> Use Case(s) <ul> <li>Gives current timestamp of this set of messages</li> </ul> Message Format(s) <ul> <li>|t:|TIMESTAMP</li> </ul> Input Example(s) <ul> <li>|t:|1696832299</li> </ul>"},{"location":"showdown/reference/battle-messages/#poketypes.showdown.battlemessage.BattleMessage_move","title":"<code>BattleMessage_move</code>","text":"<p>Message communicating that a pokemon successfully used a move.</p> ATTRIBUTE DESCRIPTION <code>POKEMON</code> <p>The pokemon using the move</p> <p> TYPE: <code>PokemonIdentifier</code> </p> <code>MOVE</code> <p>The name of the move used</p> <p> TYPE: <code>str</code> </p> <code>TARGET</code> <p>The primary target of this move. This can be None when applicable</p> <p> TYPE: <code>Optional[PokemonIdentifier]</code> </p> <code>EFFECT</code> <p>An optional effect that the move is taken from (Magic bounce, Sleep Talk, etc)</p> <p> TYPE: <code>Optional[Effect]</code> </p> Use Case(s) <ul> <li>Communicating which move was used, including source/target information.</li> </ul> Message Format(s) <ul> <li>|move|POKEMON|MOVE|TARGET</li> <li>|move|POKEMON|MOVE|TARGET|[from]</li> <li>TODO: Add more</li> </ul> Input Example(s) <ul> <li>|move|p1a: Sceptile|Acrobatics|p2a: Espeon</li> <li>|move|p1a: Kangaskhan|Fake Out||[still]</li> <li>TODO: Add more</li> </ul>"},{"location":"showdown/reference/battle-messages/#poketypes.showdown.battlemessage.BattleMessage_switch","title":"<code>BattleMessage_switch</code>","text":"<p>Message communicating that a pokemon has switched in.</p> ATTRIBUTE DESCRIPTION <code>POKEMON</code> <p>The pokemon swapping in, potentially replacing the slot</p> <p> TYPE: <code>PokemonIdentifier</code> </p> <code>SPECIES</code> <p>The species for this pokemon, including forme</p> <p> TYPE: <code>DexPokemon.ValueType</code> </p> <code>LEVEL</code> <p>The level of this pokemon</p> <p> TYPE: <code>int</code> </p> <code>GENDER</code> <p>The gender of this pokemon</p> <p> TYPE: <code>Optional[Literal['M', 'F']]</code> </p> <code>SHINY</code> <p>Whether the pokemon is shiny or not</p> <p> TYPE: <code>bool</code> </p> <code>TERA</code> <p>If this pokemon is teratyped, the string type of the new type. Else None.</p> <p> TYPE: <code>Optional[str]</code> </p> <code>CUR_HP</code> <p>The current HP of the pokemon</p> <p> TYPE: <code>int</code> </p> <code>MAX_HP</code> <p>The maximum HP of the pokemon</p> <p> TYPE: <code>int</code> </p> <code>STATUS</code> <p>The status of the pokemon. Can be None if there is no status</p> <p> TYPE: <code>Optional[str]</code> </p> Use Case(s) <ul> <li>Communicating which pokemon switched in, as well as info about the pokemon.</li> </ul> Message Format(s) <ul> <li>|switch|POKEMON|DETAILS|HP STATUS</li> </ul> Input Example(s) <ul> <li>|switch|p2a: Toxicroak|Toxicroak, L81, F|100/100</li> </ul>"},{"location":"showdown/reference/battle-messages/#poketypes.showdown.battlemessage.BattleMessage_drag","title":"<code>BattleMessage_drag</code>","text":"<p>Message communicating that a pokemon has switched in.</p> ATTRIBUTE DESCRIPTION <code>POKEMON</code> <p>The pokemon being dragged in</p> <p> TYPE: <code>PokemonIdentifier</code> </p> <code>SPECIES</code> <p>The species for this pokemon, including forme</p> <p> TYPE: <code>DexPokemon.ValueType</code> </p> <code>LEVEL</code> <p>The level of this pokemon</p> <p> TYPE: <code>int</code> </p> <code>GENDER</code> <p>The gender of this pokemon</p> <p> TYPE: <code>Optional[Literal['M', 'F']]</code> </p> <code>SHINY</code> <p>Whether the pokemon is shiny or not</p> <p> TYPE: <code>bool</code> </p> <code>TERA</code> <p>If this pokemon is teratyped, the string type of the new type. Else None.</p> <p> TYPE: <code>Optional[str]</code> </p> <code>CUR_HP</code> <p>The current HP of the pokemon</p> <p> TYPE: <code>int</code> </p> <code>MAX_HP</code> <p>The maximum HP of the pokemon</p> <p> TYPE: <code>int</code> </p> <code>STATUS</code> <p>The status of the pokemon. Can be None if there is no status</p> <p> TYPE: <code>Optional[str]</code> </p> Use Case(s) <ul> <li>Communicating which pokemon was dragged in, as well as info about the pokemon.</li> </ul> Message Format(s) <ul> <li>|drag|POKEMON|DETAILS|HP STATUS</li> </ul> Input Example(s) <ul> <li>TODO</li> </ul>"},{"location":"showdown/reference/battle-messages/#poketypes.showdown.battlemessage.BattleMessage_detailschange","title":"<code>BattleMessage_detailschange</code>","text":"<p>Message communicating that a pokemon has changed formes in a permanent way.</p> ATTRIBUTE DESCRIPTION <code>POKEMON</code> <p>The pokemon changing formes</p> <p> TYPE: <code>PokemonIdentifier</code> </p> <code>SPECIES</code> <p>The species for this pokemon, including forme</p> <p> TYPE: <code>DexPokemon.ValueType</code> </p> <code>LEVEL</code> <p>The level of this pokemon</p> <p> TYPE: <code>int</code> </p> <code>GENDER</code> <p>The gender of this pokemon</p> <p> TYPE: <code>Optional[Literal['M', 'F']]</code> </p> <code>SHINY</code> <p>Whether the pokemon is shiny or not</p> <p> TYPE: <code>bool</code> </p> <code>TERA</code> <p>If this pokemon is teratyped, the string type of the new type. Else None.</p> <p> TYPE: <code>Optional[str]</code> </p> <code>CUR_HP</code> <p>The current HP of the pokemon</p> <p> TYPE: <code>Optional[str]</code> </p> <code>MAX_HP</code> <p>The maximum HP of the pokemon</p> <p> TYPE: <code>Optional[str]</code> </p> <code>STATUS</code> <p>The status of the pokemon. Can be None if there is no status</p> <p> TYPE: <code>Optional[str]</code> </p> Use Case(s) <ul> <li>Communicating that a certain pokemon changed forme.</li> </ul> Message Format(s) <ul> <li>|detailschange|POKEMON|DETAILS</li> </ul> Input Example(s) <ul> <li>TODO</li> </ul>"},{"location":"showdown/reference/battle-messages/#poketypes.showdown.battlemessage.BattleMessage_replace","title":"<code>BattleMessage_replace</code>","text":"<p>Message communicating that a pokemon has been replaced (Zoroark illusion ability).</p> ATTRIBUTE DESCRIPTION <code>POKEMON</code> <p>The pokemon being revealed (Zoroark)</p> <p> TYPE: <code>PokemonIdentifier</code> </p> <code>SPECIES</code> <p>The species for this pokemon, including forme</p> <p> TYPE: <code>DexPokemon.ValueType</code> </p> <code>LEVEL</code> <p>The level of this pokemon</p> <p> TYPE: <code>int</code> </p> <code>GENDER</code> <p>The gender of this pokemon</p> <p> TYPE: <code>Optional[Literal['M', 'F']]</code> </p> <code>SHINY</code> <p>Whether the pokemon is shiny or not</p> <p> TYPE: <code>bool</code> </p> <code>TERA</code> <p>If this pokemon is teratyped, the string type of the new type. Else None.</p> <p> TYPE: <code>Optional[str]</code> </p> <code>CUR_HP</code> <p>The current HP of the pokemon</p> <p> TYPE: <code>Optional[str]</code> </p> <code>MAX_HP</code> <p>The maximum HP of the pokemon</p> <p> TYPE: <code>Optional[str]</code> </p> <code>STATUS</code> <p>The status of the pokemon. Can be None if there is no status</p> <p> TYPE: <code>Optional[str]</code> </p> Use Case(s) <ul> <li>Communicating that a certain pokemon has been replaced.</li> </ul> Message Format(s) <ul> <li>|replace|POKEMON|DETAILS</li> </ul> Input Example(s) <ul> <li>TODO</li> </ul>"},{"location":"showdown/reference/battle-messages/#poketypes.showdown.battlemessage.BattleMessage_swap","title":"<code>BattleMessage_swap</code>","text":"<p>Message communicating that a certain active slot has had its pokemon swapped with another.</p> ATTRIBUTE DESCRIPTION <code>POKEMON</code> <p>The pokemon being swapped <code>before</code> swapping</p> <p> TYPE: <code>PokemonIdentifier</code> </p> <code>POSITION</code> <p>The slot that this Pokemon is being swapped to, as an integer</p> <p> TYPE: <code>int</code> </p> <code>EFFECT</code> <p>An optional effect explaining what caused the swapping</p> <p> TYPE: <code>Optional[Effect]</code> </p> Use Case(s) <ul> <li>Communicating that two pokemon have swapped active slots.</li> </ul> Message Format(s) <ul> <li>|swap|POKEMON|POSITION</li> <li>|swap|POKEMON|POSITION|[from]</li> </ul> Input Example(s) <ul> <li>TODO</li> </ul>"},{"location":"showdown/reference/battle-messages/#poketypes.showdown.battlemessage.BattleMessage_cant","title":"<code>BattleMessage_cant</code>","text":"<p>Message communicating that a pokemon was unable to do something.</p> ATTRIBUTE DESCRIPTION <code>POKEMON</code> <p>The pokemon that was unable to act</p> <p> TYPE: <code>PokemonIdentifier</code> </p> <code>REASON</code> <p>The reason that the pokemon was unable to do what it was trying to do</p> <p> TYPE: <code>str</code> </p> <code>MOVE</code> <p>The move being used that was unable to be used. None if not applicable</p> <p> TYPE: <code>Optional[str]</code> </p> Use Case(s) <ul> <li>Communicating that a pokemon failed to do something, with the reason it failed.</li> </ul> Message Format(s) <ul> <li>|cant|POKEMON|REASON|MOVE</li> </ul> Input Example(s) <ul> <li>TODO</li> </ul>"},{"location":"showdown/reference/battle-messages/#poketypes.showdown.battlemessage.BattleMessage_faint","title":"<code>BattleMessage_faint</code>","text":"<p>Message communicating that a pokemon has fainted.</p> ATTRIBUTE DESCRIPTION <code>POKEMON</code> <p>The pokemon that fainted</p> <p> TYPE: <code>PokemonIdentifier</code> </p> Use Case(s) <ul> <li>Communicating that a pokemon fainted.</li> </ul> Message Format(s) <ul> <li>|faint|POKEMON</li> </ul> Input Example(s) <ul> <li>TODO</li> </ul>"},{"location":"showdown/reference/battle-messages/#poketypes.showdown.battlemessage.BattleMessage_fail","title":"<code>BattleMessage_fail</code>","text":"<p>Message communicating that a pokemon has failed to do something.</p> ATTRIBUTE DESCRIPTION <code>POKEMON</code> <p>The pokemon that failed to do something</p> <p> TYPE: <code>PokemonIdentifier</code> </p> <code>EFFECT</code> <p>The effect causing/explaining the fail. Is Optional since sometimes it fails with no explanation</p> <p> TYPE: <code>Optional[Effect]</code> </p> Use Case(s) <ul> <li>Communicating that a pokemon failed to do something</li> <li>Communicate what effect caused the failure</li> <li>Communicate if a status caused the failure.</li> </ul> Message Format(s) <ul> <li>|-fail|POKEMON</li> <li>|-fail|POKEMON|EFFECT</li> <li>|-fail|POKEMON|STATUS</li> </ul> Input Example(s) <ul> <li>TODO</li> </ul>"},{"location":"showdown/reference/battle-messages/#poketypes.showdown.battlemessage.BattleMessage_block","title":"<code>BattleMessage_block</code>","text":"<p>Message communicating that a pokemon has blocked an opposing action.</p> ATTRIBUTE DESCRIPTION <code>POKEMON</code> <p>The pokemon that was targeted but blocked something</p> <p> TYPE: <code>PokemonIdentifier</code> </p> <code>EFFECT</code> <p>The reason this was able to be blocked</p> <p> TYPE: <code>Effect</code> </p> Use Case(s) <ul> <li>Communicating that a pokemon was able to block some other action.</li> </ul> Message Format(s) <ul> <li>|-block|POKEMON|EFFECT</li> </ul> Input Example(s) <ul> <li>TODO</li> </ul>"},{"location":"showdown/reference/battle-messages/#poketypes.showdown.battlemessage.BattleMessage_notarget","title":"<code>BattleMessage_notarget</code>","text":"<p>Message communicating that no target was available at move-use time.</p> ATTRIBUTE DESCRIPTION <code>POKEMON</code> <p>The pokemon that had no target available</p> <p> TYPE: <code>PokemonIdentifier</code> </p> Use Case(s) <ul> <li>Communicating that a pokemon had no target available.</li> </ul> Message Format(s) <ul> <li>|-notarget|POKEMON</li> </ul> Input Example(s) <ul> <li>TODO</li> </ul>"},{"location":"showdown/reference/battle-messages/#poketypes.showdown.battlemessage.BattleMessage_miss","title":"<code>BattleMessage_miss</code>","text":"<p>Message communicating that a given source pokemon missed its action.</p> ATTRIBUTE DESCRIPTION <code>SOURCE</code> <p>The pokemon missing the attack</p> <p> TYPE: <code>PokemonIdentifier</code> </p> <code>TARGET</code> <p>The pokemon evading (If applicable, can be None)</p> <p> TYPE: <code>Optional[PokemonIdentifier]</code> </p> Use Case(s) <ul> <li>Communicating that a pokemon missed.</li> <li>Communicating which pokemon was targeted but avoided the action.</li> </ul> Message Format(s) <ul> <li>|-miss|SOURCE</li> <li>|-miss|SOURCE|TARGET</li> </ul> Input Example(s) <ul> <li>TODO</li> </ul>"},{"location":"showdown/reference/battle-messages/#poketypes.showdown.battlemessage.BattleMessage_damage","title":"<code>BattleMessage_damage</code>","text":"<p>Message communicating that a pokemon has taken damage.</p> ATTRIBUTE DESCRIPTION <code>POKEMON</code> <p>The pokemon being hurt</p> <p> TYPE: <code>PokemonIdentifier</code> </p> <code>CUR_HP</code> <p>The current HP of the pokemon</p> <p> TYPE: <code>int</code> </p> <code>MAX_HP</code> <p>The maximum HP of the pokemon. None if the pokemon is fainted</p> <p> TYPE: <code>Optional[int]</code> </p> <code>STATUS</code> <p>The status of the pokemon. Can be None if there is no status</p> <p> TYPE: <code>Optional[str]</code> </p> <code>EFFECT</code> <p>The reason this damage was dealt, if not from a move</p> <p> TYPE: <code>Optional[Effect]</code> </p> Use Case(s) <ul> <li>Communicating that a pokemon took damage in some way.</li> </ul> Message Format(s) <ul> <li>|-damage|POKEMON|HP STATUS</li> </ul> Input Example(s) <ul> <li>TODO</li> </ul>"},{"location":"showdown/reference/battle-messages/#poketypes.showdown.battlemessage.BattleMessage_heal","title":"<code>BattleMessage_heal</code>","text":"<p>Message communicating that a pokemon has healed some health.</p> ATTRIBUTE DESCRIPTION <code>POKEMON</code> <p>The pokemon being healed</p> <p> TYPE: <code>PokemonIdentifier</code> </p> <code>CUR_HP</code> <p>The current HP of the pokemon</p> <p> TYPE: <code>int</code> </p> <code>MAX_HP</code> <p>The maximum HP of the pokemon</p> <p> TYPE: <code>int</code> </p> <code>STATUS</code> <p>The status of the pokemon. Can be None if there is no status</p> <p> TYPE: <code>Optional[str]</code> </p> <code>EFFECT</code> <p>The reason this health was healed, if not from a move</p> <p> TYPE: <code>Optional[Effect]</code> </p> Use Case(s) <ul> <li>Communicating that a pokemon healed in some way.</li> </ul> Message Format(s) <ul> <li>|-heal|POKEMON|HP STATUS</li> </ul> Input Example(s) <ul> <li>TODO</li> </ul>"},{"location":"showdown/reference/battle-messages/#poketypes.showdown.battlemessage.BattleMessage_sethp","title":"<code>BattleMessage_sethp</code>","text":"<p>Message communicating that a pokemon has an exact hp amount.</p> ATTRIBUTE DESCRIPTION <code>POKEMON</code> <p>The pokemon getting the HP set</p> <p> TYPE: <code>PokemonIdentifier</code> </p> <code>CUR_HP</code> <p>The current HP of the pokemon</p> <p> TYPE: <code>int</code> </p> <code>MAX_HP</code> <p>The maximum HP of the pokemon</p> <p> TYPE: <code>int</code> </p> <code>STATUS</code> <p>The status of the pokemon. Can be None if there is no status</p> <p> TYPE: <code>Optional[str]</code> </p> <code>EFFECT</code> <p>The reason this health was healed</p> <p> TYPE: <code>Optional[Effect]</code> </p> Use Case(s) <ul> <li>Communicating that a pokemon had its health directly set.</li> </ul> Message Format(s) <ul> <li>|-sethp|POKEMON|HP STATUS|EFFECT</li> </ul> Input Example(s) <ul> <li>TODO</li> </ul>"},{"location":"showdown/reference/battle-messages/#poketypes.showdown.battlemessage.BattleMessage_status","title":"<code>BattleMessage_status</code>","text":"<p>Message communicating that a pokemon has gained a status.</p> ATTRIBUTE DESCRIPTION <code>POKEMON</code> <p>The pokemon gaining the status</p> <p> TYPE: <code>PokemonIdentifier</code> </p> <code>STATUS</code> <p>The status being gained</p> <p> TYPE: <code>DexStatus.ValueType</code> </p> Use Case(s) <ul> <li>Communicating that a pokemon has gained a status condition.</li> </ul> Message Format(s) <ul> <li>|-status|POKEMON|STATUS</li> </ul> Input Example(s) <ul> <li>TODO</li> </ul>"},{"location":"showdown/reference/battle-messages/#poketypes.showdown.battlemessage.BattleMessage_curestatus","title":"<code>BattleMessage_curestatus</code>","text":"<p>Message communicating that a pokemon has lost a status.</p> ATTRIBUTE DESCRIPTION <code>POKEMON</code> <p>The pokemon losing the status</p> <p> TYPE: <code>PokemonIdentifier</code> </p> <code>STATUS</code> <p>The status being lost</p> <p> TYPE: <code>DexStatus.ValueType</code> </p> Use Case(s) <ul> <li>Communicating that a pokemon has lost a status condition.</li> </ul> Message Format(s) <ul> <li>|-curestatus|POKEMON|STATUS</li> </ul> Input Example(s) <ul> <li>TODO</li> </ul>"},{"location":"showdown/reference/battle-messages/#poketypes.showdown.battlemessage.BattleMessage_cureteam","title":"<code>BattleMessage_cureteam</code>","text":"<p>Message communicating that a team has been cured of all status conditions.</p> ATTRIBUTE DESCRIPTION <code>EFFECT</code> <p>The effect causing the team to be healed</p> <p> TYPE: <code>Effect</code> </p> Use Case(s) <ul> <li>Communicating that all pokemon have been cured.</li> </ul> Message Format(s) <ul> <li>|-cureteam|POKEMON|EFFECT</li> </ul> Input Example(s) <ul> <li>TODO</li> </ul>"},{"location":"showdown/reference/battle-messages/#poketypes.showdown.battlemessage.BattleMessage_boost","title":"<code>BattleMessage_boost</code>","text":"<p>Message communicating that a pokemon has gained some stat boost.</p> ATTRIBUTE DESCRIPTION <code>POKEMON</code> <p>The pokemon getting the boost</p> <p> TYPE: <code>PokemonIdentifier</code> </p> <code>STAT</code> <p>Which stat is being boosted</p> <p> TYPE: <code>PokeStat</code> </p> <code>AMOUNT</code> <p>By how much this stat is being boosted, as an integer. Can be 0 if at cap</p> <p> TYPE: <code>int</code> </p> Use Case(s) <ul> <li>Communicating that a pokemon received a single stat boost.</li> </ul> Message Format(s) <ul> <li>|-boost|POKEMON|STAT|AMOUNT</li> </ul> Input Example(s) <ul> <li>TODO</li> </ul>"},{"location":"showdown/reference/battle-messages/#poketypes.showdown.battlemessage.BattleMessage_unboost","title":"<code>BattleMessage_unboost</code>","text":"<p>Message communicating that a pokemon has had some stat lowered.</p> ATTRIBUTE DESCRIPTION <code>POKEMON</code> <p>The pokemon getting the boost</p> <p> TYPE: <code>PokemonIdentifier</code> </p> <code>STAT</code> <p>Which stat is being boosted</p> <p> TYPE: <code>PokeStat</code> </p> <code>AMOUNT</code> <p>By how much this stat is being unboosted, as an integer. Can be 0 if at cap</p> <p> TYPE: <code>int</code> </p> Use Case(s) <ul> <li>Communicating that a pokemon received a single stat unboost.</li> </ul> Message Format(s) <ul> <li>|-unboost|POKEMON|STAT|AMOUNT</li> </ul> Input Example(s) <ul> <li>TODO</li> </ul>"},{"location":"showdown/reference/battle-messages/#poketypes.showdown.battlemessage.BattleMessage_setboost","title":"<code>BattleMessage_setboost</code>","text":"<p>Message communicating that a pokemon has had some stat set to a certain boost value.</p> ATTRIBUTE DESCRIPTION <code>POKEMON</code> <p>The pokemon getting the boost</p> <p> TYPE: <code>PokemonIdentifier</code> </p> <code>STAT</code> <p>Which stat is being boosted</p> <p> TYPE: <code>PokeStat</code> </p> <code>AMOUNT</code> <p>The new value being assigned for this stat boost</p> <p> TYPE: <code>int</code> </p> Use Case(s) <ul> <li>Communicating that a pokemon received a set stat boost value.</li> </ul> Message Format(s) <ul> <li>|-setboost|POKEMON|STAT|AMOUNT</li> </ul> Input Example(s) <ul> <li>TODO</li> </ul>"},{"location":"showdown/reference/battle-messages/#poketypes.showdown.battlemessage.BattleMessage_swapboost","title":"<code>BattleMessage_swapboost</code>","text":"<p>Message communicating that two specific pokemon have had their stat boosts switched.</p> Warning <p>Not yet implemented!</p> ATTRIBUTE DESCRIPTION <code>POKEMON</code> <p>The pokemon getting the boost</p> <p> TYPE: <code>str</code> </p> Use Case(s) <ul> <li>Communicating that two pokemon have had their respective stat boosts swapped.</li> </ul> Message Format(s) <ul> <li>|-swapboost|SOURCE|TARGET|STATS</li> </ul> Input Example(s) <ul> <li>TODO</li> </ul>"},{"location":"showdown/reference/battle-messages/#poketypes.showdown.battlemessage.BattleMessage_invertboost","title":"<code>BattleMessage_invertboost</code>","text":"<p>Message communicating that a pokemon has had its stat boosts inverted.</p> ATTRIBUTE DESCRIPTION <code>POKEMON</code> <p>The pokemon getting the boost inverted</p> <p> TYPE: <code>PokemonIdentifier</code> </p> Use Case(s) <ul> <li>Communicating that a pokemon has had its stat boosts inverted.</li> </ul> Message Format(s) <ul> <li>|-invertboost|POKEMON</li> </ul> Input Example(s) <ul> <li>TODO</li> </ul>"},{"location":"showdown/reference/battle-messages/#poketypes.showdown.battlemessage.BattleMessage_clearboost","title":"<code>BattleMessage_clearboost</code>","text":"<p>Message communicating that a pokemon has had its stat boosts cleared.</p> ATTRIBUTE DESCRIPTION <code>POKEMON</code> <p>The pokemon that had its stat boosts cleared.</p> <p> TYPE: <code>PokemonIdentifier</code> </p> Use Case(s): <ul> <li>Communicating that a pokemon has had its stat boosts cleared.</li> </ul> Message Format(s): <ul> <li>|-clearboost|POKEMON</li> </ul> Input Example(s) <ul> <li>|-clearboost|p1a: Pikachu</li> </ul>"},{"location":"showdown/reference/battle-messages/#poketypes.showdown.battlemessage.BattleMessage_clearallboost","title":"<code>BattleMessage_clearallboost</code>","text":"<p>Message communicating that all pokemon have had their stat boosts cleared.</p> Use Case(s): <ul> <li>Communicating that all pokemon have had their stat boosts cleared.</li> </ul> Message Format(s): <ul> <li>|-clearallboost</li> </ul> Input Example(s) <ul> <li>|-clearallboost</li> </ul>"},{"location":"showdown/reference/battle-messages/#poketypes.showdown.battlemessage.BattleMessage_clearpositiveboost","title":"<code>BattleMessage_clearpositiveboost</code>","text":"<p>Message communicating that a pokemon has had its positive stat boosts cleared.</p> ATTRIBUTE DESCRIPTION <code>POKEMON</code> <p>The pokemon that had its positive stat boosts cleared.</p> <p> TYPE: <code>PokemonIdentifier</code> </p> <code>EFFECT</code> <p>The effect causing this positive boost clearance</p> <p> TYPE: <code>Effect</code> </p> Use Case(s): <ul> <li>Communicating that a pokemon has had its positive stat boosts cleared.</li> </ul> Message Format(s): <ul> <li>|-clearpositiveboost|TARGET|EFF_SOURCE|EFFECT</li> </ul> Input Example(s) <ul> <li>TODO</li> </ul>"},{"location":"showdown/reference/battle-messages/#poketypes.showdown.battlemessage.BattleMessage_clearnegativeboost","title":"<code>BattleMessage_clearnegativeboost</code>","text":"<p>Message communicating that a pokemon has had its negative stat boosts cleared.</p> ATTRIBUTE DESCRIPTION <code>POKEMON</code> <p>The pokemon that had its negative stat boosts cleared.</p> <p> TYPE: <code>PokemonIdentifier</code> </p> Use Case(s): <ul> <li>Communicating that a pokemon has had its negative stat boosts cleared.</li> </ul> Message Format(s): <ul> <li>|-clearnegativeboost|POKEMON</li> </ul> Input Example(s) <ul> <li>TODO</li> </ul>"},{"location":"showdown/reference/battle-messages/#poketypes.showdown.battlemessage.BattleMessage_copyboost","title":"<code>BattleMessage_copyboost</code>","text":"<p>Message communicating that a pokemon has had its stat boosts copied.</p> Warning <p>Not yet implemented!</p> ATTRIBUTE DESCRIPTION <code>POKEMON</code> <p>The pokemon that had its stat boosts copied.</p> <p> TYPE: <code>str</code> </p> Use Case(s): <ul> <li>Communicating that a pokemon has had its stat boosts copied.</li> </ul> Message Format(s): <ul> <li>|-copyboost|SOURCE|TARGET</li> </ul> Input Example(s) <ul> <li>TODO</li> </ul>"},{"location":"showdown/reference/battle-messages/#poketypes.showdown.battlemessage.BattleMessage_weather","title":"<code>BattleMessage_weather</code>","text":"<p>Message communicating that the weather has changed.</p> ATTRIBUTE DESCRIPTION <code>WEATHER</code> <p>The weather being set</p> <p> TYPE: <code>DexWeather.ValueType</code> </p> Use Case(s): <ul> <li>Communicating that the weather has changed.</li> </ul> Message Format(s): <ul> <li>|-weather|WEATHER|EFFECT</li> </ul> Input Example(s) <ul> <li>TODO</li> </ul>"},{"location":"showdown/reference/battle-messages/#poketypes.showdown.battlemessage.BattleMessage_fieldstart","title":"<code>BattleMessage_fieldstart</code>","text":"<p>Message communicating that a field condition has started.</p> ATTRIBUTE DESCRIPTION <code>EFFECT</code> <p>The effect starting for the field.</p> <p> TYPE: <code>Effect</code> </p> Use Case(s): <ul> <li>Communicating that a field condition has started.</li> </ul> Message Format(s): <ul> <li>|-fieldstart|CONDITION</li> </ul> Input Example(s) <ul> <li>TODO</li> </ul>"},{"location":"showdown/reference/battle-messages/#poketypes.showdown.battlemessage.BattleMessage_fieldend","title":"<code>BattleMessage_fieldend</code>","text":"<p>Message communicating that a field condition has ended.</p> ATTRIBUTE DESCRIPTION <code>EFFECT</code> <p>The effect ending for the field.</p> <p> TYPE: <code>Effect</code> </p> Use Case(s): <ul> <li>Communicating that a field condition has ended.</li> </ul> Message Format(s): <ul> <li>|-fieldend|CONDITION</li> </ul> Input Example(s) <ul> <li>TODO</li> </ul>"},{"location":"showdown/reference/battle-messages/#poketypes.showdown.battlemessage.BattleMessage_sidestart","title":"<code>BattleMessage_sidestart</code>","text":"<p>Message communicating that a side condition has started.</p> ATTRIBUTE DESCRIPTION <code>PLAYER</code> <p>The player id of the impacted player</p> <p> TYPE: <code>str</code> </p> <code>CONDITION</code> <p>The field condition starting</p> <p> TYPE: <code>str</code> </p> Use Case(s): <ul> <li>Communicating that a side condition has started.</li> </ul> Message Format(s): <ul> <li>|-sidestart|SIDE|CONDITION</li> </ul> Input Example(s) <ul> <li>TODO</li> </ul>"},{"location":"showdown/reference/battle-messages/#poketypes.showdown.battlemessage.BattleMessage_sideend","title":"<code>BattleMessage_sideend</code>","text":"<p>Message communicating that a side condition has ended.</p> ATTRIBUTE DESCRIPTION <code>PLAYER</code> <p>The player id of the impacted player</p> <p> TYPE: <code>str</code> </p> <code>CONDITION</code> <p>The field condition starting</p> <p> TYPE: <code>str</code> </p> <code>EFFECT</code> <p>The effect that is causing the conditon to end</p> <p> TYPE: <code>Optional[Effect]</code> </p> Use Case(s): <ul> <li>Communicating that a side condition has ended.</li> </ul> Message Format(s): <ul> <li>|-sideend|SIDE|CONDITION</li> <li>|-sideend|SIDE|CONDITION|[from]</li> <li>|-sideend|SIDE|CONDITION|[of]</li> </ul> Input Example(s) <ul> <li>TODO</li> </ul>"},{"location":"showdown/reference/battle-messages/#poketypes.showdown.battlemessage.BattleMessage_swapsideconditions","title":"<code>BattleMessage_swapsideconditions</code>","text":"<p>Message communicating that a side condition has been swapped.</p> Use Case(s): <ul> <li>Communicating that a side condition has been swapped.</li> </ul> Message Format(s): <ul> <li>|-swapsideconditions</li> </ul> Input Example(s) <ul> <li>TODO</li> </ul>"},{"location":"showdown/reference/battle-messages/#poketypes.showdown.battlemessage.BattleMessage_volstart","title":"<code>BattleMessage_volstart</code>","text":"<p>Message communicating that a volatile effect has started.</p> ATTRIBUTE DESCRIPTION <code>POKEMON</code> <p>The pokemon this volatile effect is started for</p> <p> TYPE: <code>PokemonIdentifier</code> </p> <code>EFFECT</code> <p>The effect that caused this volatile status</p> <p> TYPE: <code>Optional[Effect]</code> </p> Use Case(s): <ul> <li>Communicating that a volatile effect has started.</li> </ul> Message Format(s): <ul> <li>|-start|POKEMON|VOLATILE</li> <li>|-start|POKEMON|MOVE</li> <li>|-start|POKEMON|MOVE|MOVE</li> <li>|-start|POKEMON|MOVE|[from]</li> <li>|-start|POKEMON|MOVE|[from]|[of]</li> <li>|-start|POKEMON|typechange|TYPE</li> <li>|-start|POKEMON|typechange|TYPE|[from]</li> <li>|-start|POKEMON|typechange|TYPE|[from]|[of]</li> </ul> Input Example(s) <ul> <li>TODO</li> </ul>"},{"location":"showdown/reference/battle-messages/#poketypes.showdown.battlemessage.BattleMessage_volend","title":"<code>BattleMessage_volend</code>","text":"<p>Message communicating that a volatile effect has ended.</p> ATTRIBUTE DESCRIPTION <code>POKEMON</code> <p>The pokemon this volatile effect is ended for</p> <p> TYPE: <code>PokemonIdentifier</code> </p> <code>EFFECT</code> <p>The effect that caused this volatile status</p> <p> TYPE: <code>Effect</code> </p> <code>SILENT</code> <p>Whether this message is silent or not</p> <p> TYPE: <code>bool</code> </p> Use Case(s): <ul> <li>Communicating that a volatile effect has ended.</li> </ul> Message Format(s): <ul> <li>|-end|POKEMON|EFFECT</li> </ul> Input Example(s) <ul> <li>TODO</li> </ul>"},{"location":"showdown/reference/battle-messages/#poketypes.showdown.battlemessage.BattleMessage_crit","title":"<code>BattleMessage_crit</code>","text":"<p>Message communicating that a pokemon has had a critical hit.</p> ATTRIBUTE DESCRIPTION <code>POKEMON</code> <p>The pokemon that had a critical hit</p> <p> TYPE: <code>PokemonIdentifier</code> </p> Use Case(s): <ul> <li>Communicating that a pokemon has had a critical hit.</li> </ul> Message Format(s): <ul> <li>|-crit|POKEMON</li> </ul> Input Example(s) <ul> <li>TODO</li> </ul>"},{"location":"showdown/reference/battle-messages/#poketypes.showdown.battlemessage.BattleMessage_supereffective","title":"<code>BattleMessage_supereffective</code>","text":"<p>Message communicating that a pokemon has been hit super effectively.</p> ATTRIBUTE DESCRIPTION <code>POKEMON</code> <p>The pokemon that was hit super effectively</p> <p> TYPE: <code>PokemonIdentifier</code> </p> Use Case(s): <ul> <li>Communicating that a pokemon has been hit super effectively.</li> </ul> Message Format(s): <ul> <li>|-supereffective|POKEMON</li> </ul> Input Example(s) <ul> <li>TODO</li> </ul>"},{"location":"showdown/reference/battle-messages/#poketypes.showdown.battlemessage.BattleMessage_resisted","title":"<code>BattleMessage_resisted</code>","text":"<p>Message communicating that a pokemon has resisted an attack.</p> ATTRIBUTE DESCRIPTION <code>POKEMON</code> <p>The pokemon that resisted the attack</p> <p> TYPE: <code>PokemonIdentifier</code> </p> Use Case(s): <ul> <li>Communicating that a pokemon has resisted an attack.</li> </ul> Message Format(s): <ul> <li>|-resisted|POKEMON</li> </ul> Input Example(s) <ul> <li>TODO</li> </ul>"},{"location":"showdown/reference/battle-messages/#poketypes.showdown.battlemessage.BattleMessage_immune","title":"<code>BattleMessage_immune</code>","text":"<p>Message communicating that a pokemon has been immune to an attack.</p> ATTRIBUTE DESCRIPTION <code>POKEMON</code> <p>The pokemon that was immune to the attack</p> <p> TYPE: <code>PokemonIdentifier</code> </p> Use Case(s): <ul> <li>Communicating that a pokemon has been immune to an attack.</li> </ul> Message Format(s): <ul> <li>|-immune|POKEMON</li> </ul> Input Example(s) <ul> <li>TODO</li> </ul>"},{"location":"showdown/reference/battle-messages/#poketypes.showdown.battlemessage.BattleMessage_item","title":"<code>BattleMessage_item</code>","text":"<p>Message communicating that a pokemon has had its item revealed.</p> ATTRIBUTE DESCRIPTION <code>POKEMON</code> <p>The pokemon whose item is revealed</p> <p> TYPE: <code>PokemonIdentifier</code> </p> <code>ITEM</code> <p>The item being revealed</p> <p> TYPE: <code>str</code> </p> <code>EFFECT</code> <p>The effect that revealed the item, if applicable. Not used when auto-revealed (air balloon)</p> <p> TYPE: <code>Optional[Effect]</code> </p> Use Case(s): <ul> <li>Communicating that a pokemon has had its item revealed.</li> </ul> Message Format(s): <ul> <li>|-item|POKEMON|ITEM</li> <li>|-item|POKEMON|ITEM|[from]EFFECT</li> </ul> Input Example(s) <ul> <li>TODO</li> </ul>"},{"location":"showdown/reference/battle-messages/#poketypes.showdown.battlemessage.BattleMessage_enditem","title":"<code>BattleMessage_enditem</code>","text":"<p>Message communicating that a pokemon has had its item destroyed.</p> ATTRIBUTE DESCRIPTION <code>POKEMON</code> <p>The pokemon whose item is destroyed</p> <p> TYPE: <code>PokemonIdentifier</code> </p> <code>ITEM</code> <p>The item being destroyed</p> <p> TYPE: <code>str</code> </p> <code>EFFECT</code> <p>The effect that destroyed the item, if applicable.</p> <p> TYPE: <code>Optional[Effect]</code> </p> Use Case(s): <ul> <li>Communicating that a pokemon has had its item destroyed.</li> </ul> Message Format(s): <ul> <li>|-enditem|POKEMON|ITEM</li> <li>|-enditem|POKEMON|ITEM|[from]EFFECT</li> </ul> Input Example(s) <ul> <li>TODO</li> </ul>"},{"location":"showdown/reference/battle-messages/#poketypes.showdown.battlemessage.BattleMessage_ability","title":"<code>BattleMessage_ability</code>","text":"<p>Message communicating that a pokemon has had its ability revealed.</p> ATTRIBUTE DESCRIPTION <code>POKEMON</code> <p>The pokemon whose ability is revealed</p> <p> TYPE: <code>PokemonIdentifier</code> </p> <code>ABILITY</code> <p>The ability being revealed</p> <p> TYPE: <code>DexAbility.ValueType</code> </p> <code>EFFECT</code> <p>The effect that revealed the ability, if applicable.</p> <p> TYPE: <code>Optional[Effect]</code> </p> Use Case(s): <ul> <li>Communicating that a pokemon has had its ability revealed.</li> </ul> Message Format(s): <ul> <li>|-ability|POKEMON|ABILITY</li> <li>|-ability|POKEMON|ABILITY|[from] EFFECT</li> <li>|-ability|POKEMON|ABILITY|[from] EFFECT|[of] POKEMON</li> </ul> Input Example(s) <ul> <li>TODO</li> </ul>"},{"location":"showdown/reference/battle-messages/#poketypes.showdown.battlemessage.BattleMessage_endability","title":"<code>BattleMessage_endability</code>","text":"<p>Message communicating that a pokemon has had its ability suppressed.</p> ATTRIBUTE DESCRIPTION <code>POKEMON</code> <p>The pokemon whose ability is suppressed</p> <p> TYPE: <code>PokemonIdentifier</code> </p> Use Case(s): <ul> <li>Communicating that a pokemon has had its ability suppressed.</li> </ul> Message Format(s): <ul> <li>|-endability|POKEMON</li> </ul> Input Example(s) <ul> <li>TODO</li> </ul>"},{"location":"showdown/reference/battle-messages/#poketypes.showdown.battlemessage.BattleMessage_transform","title":"<code>BattleMessage_transform</code>","text":"<p>Message communicating that a pokemon has transformed into another pokemon.</p> ATTRIBUTE DESCRIPTION <code>SOURCE</code> <p>The pokemon transforming</p> <p> TYPE: <code>PokemonIdentifier</code> </p> <code>TARGET</code> <p>The pokemon it's transforming into</p> <p> TYPE: <code>PokemonIdentifier</code> </p> <code>EFFECT</code> <p>The optional effect explaining the transformation</p> <p> TYPE: <code>Optional[Effect]</code> </p> Use Case(s): <ul> <li>Communicating that a pokemon has transformed into another pokemon.</li> </ul> Message Format(s): <ul> <li>|-transform|SOURCE|TARGET|</li> <li>|-transform|SOURCE|TARGET|[from]</li> </ul> Input Example(s) <ul> <li>TODO</li> </ul>"},{"location":"showdown/reference/battle-messages/#poketypes.showdown.battlemessage.BattleMessage_mega","title":"<code>BattleMessage_mega</code>","text":"<p>Message communicating that a pokemon has mega evolved.</p> Warning <p>Not implemented yet.</p> ATTRIBUTE DESCRIPTION <code>POKEMON</code> <p>The pokemon that mega evolved</p> <p> TYPE: <code>PokemonIdentifier</code> </p> Use Case(s): <ul> <li>Communicating that a pokemon has mega evolved.</li> </ul> Message Format(s): <ul> <li>|-mega|POKEMON|MEGASTONE</li> </ul> Input Example(s) <ul> <li>TODO</li> </ul>"},{"location":"showdown/reference/battle-messages/#poketypes.showdown.battlemessage.BattleMessage_primal","title":"<code>BattleMessage_primal</code>","text":"<p>Message communicating that a pokemon has gone primal.</p> ATTRIBUTE DESCRIPTION <code>POKEMON</code> <p>The pokemon going primal</p> <p> TYPE: <code>PokemonIdentifier</code> </p> <code>ITEM</code> <p>The held item that is being used</p> <p> TYPE: <code>str</code> </p> Use Case(s): <ul> <li>Communicating that a pokemon has gone primal.</li> </ul> Message Format(s): <ul> <li>|-primal|POKEMON|ITEM</li> </ul> Input Example(s) <ul> <li>TODO</li> </ul>"},{"location":"showdown/reference/battle-messages/#poketypes.showdown.battlemessage.BattleMessage_burst","title":"<code>BattleMessage_burst</code>","text":"<p>Message communicating that a pokemon has burst.</p> Warning <p>Not implemented yet.</p> ATTRIBUTE DESCRIPTION <code>POKEMON</code> <p>The pokemon that burst</p> <p> TYPE: <code>PokemonIdentifier</code> </p> Use Case(s): <ul> <li>Communicating that a pokemon has burst.</li> </ul> Message Format(s): <ul> <li>|-burst|POKEMON|SPECIES|ITEM</li> </ul> Input Example(s) <ul> <li>TODO</li> </ul>"},{"location":"showdown/reference/battle-messages/#poketypes.showdown.battlemessage.BattleMessage_zpower","title":"<code>BattleMessage_zpower</code>","text":"<p>Message communicating that a pokemon has used a Z move.</p> ATTRIBUTE DESCRIPTION <code>POKEMON</code> <p>The pokemon using the Z move</p> <p> TYPE: <code>PokemonIdentifier</code> </p> Use Case(s): <ul> <li>Communicating that a pokemon has used a Z move.</li> </ul> Message Format(s): <ul> <li>|-zpower|POKEMON</li> </ul> Input Example(s) <ul> <li>TODO</li> </ul>"},{"location":"showdown/reference/battle-messages/#poketypes.showdown.battlemessage.BattleMessage_zbroken","title":"<code>BattleMessage_zbroken</code>","text":"<p>Message communicating that a pokemon's Z move is over.</p> ATTRIBUTE DESCRIPTION <code>POKEMON</code> <p>The pokemon whose Z move is over</p> <p> TYPE: <code>PokemonIdentifier</code> </p> Use Case(s): <ul> <li>Communicating that a pokemon's Z move is over.</li> </ul> Message Format(s): <ul> <li>|-zbroken|POKEMON</li> </ul> Input Example(s) <ul> <li>TODO</li> </ul>"},{"location":"showdown/reference/battle-messages/#poketypes.showdown.battlemessage.BattleMessage_activate","title":"<code>BattleMessage_activate</code>","text":"<p>Message communicating that a pokemon has activated an effect.</p> ATTRIBUTE DESCRIPTION <code>POKEMON</code> <p>The pokemon activating the effect</p> <p> TYPE: <code>PokemonIdentifier</code> </p> <code>EFFECT</code> <p>The effect being activated</p> <p> TYPE: <code>Effect</code> </p> Use Case(s): <ul> <li>Communicating that a pokemon has activated an effect.</li> </ul> Message Format(s): <ul> <li>|-activate|POKEMON|EFFECT</li> <li>|-activate|POKEMON|VOLATILE</li> <li>|-activate|POKEMON|MOVE|EFFECT</li> <li>|-activate|POKEMON|ABILITY|EFFECT</li> <li>|-activate|POKEMON|ITEM|EFFECT</li> </ul> Input Example(s) <ul> <li>TODO</li> </ul>"},{"location":"showdown/reference/battle-messages/#poketypes.showdown.battlemessage.BattleMessage_hint","title":"<code>BattleMessage_hint</code>","text":"<p>Message communicating that a hint has been sent to the player.</p> ATTRIBUTE DESCRIPTION <code>MESSAGE</code> <p>The message sent to you as a hint</p> <p> TYPE: <code>str</code> </p> Use Case(s): <ul> <li>Communicating that a hint has been sent to the player.</li> </ul> Message Format(s): <ul> <li>|-hint|MESSAGE</li> </ul> Input Example(s) <ul> <li>TODO</li> </ul>"},{"location":"showdown/reference/battle-messages/#poketypes.showdown.battlemessage.BattleMessage_center","title":"<code>BattleMessage_center</code>","text":"<p>Message communicating that the pokemon in a triple battle have been centered.</p> Use Case(s): <ul> <li>Communicating that the pokemon in a triple battle have been centered.</li> </ul> Message Format(s): <ul> <li>|-center</li> </ul> Input Example(s) <ul> <li>TODO</li> </ul>"},{"location":"showdown/reference/battle-messages/#poketypes.showdown.battlemessage.BattleMessage_message","title":"<code>BattleMessage_message</code>","text":"<p>Message communicating that a message has been sent.</p> ATTRIBUTE DESCRIPTION <code>MESSAGE</code> <p>The message sent as part of this notification</p> <p> TYPE: <code>str</code> </p> Use Case(s): <ul> <li>Communicating that a message has been sent.</li> </ul> Message Format(s): <ul> <li>|-message|MESSAGE</li> </ul> Input Example(s) <ul> <li>TODO</li> </ul>"},{"location":"showdown/reference/battle-messages/#poketypes.showdown.battlemessage.BattleMessage_combine","title":"<code>BattleMessage_combine</code>","text":"<p>Message communicating that two moves have been combined.</p> Use Case(s): <ul> <li>Communicating that two moves have been combined.</li> </ul> Message Format(s): <ul> <li>|-combine</li> </ul> Input Example(s) <ul> <li>TODO</li> </ul>"},{"location":"showdown/reference/battle-messages/#poketypes.showdown.battlemessage.BattleMessage_waiting","title":"<code>BattleMessage_waiting</code>","text":"<p>Message communicating that a pokemon is waiting for the target.</p> Warning <p>Not implemented yet.</p> ATTRIBUTE DESCRIPTION <code>POKEMON</code> <p>The main pokemon identifier relevant</p> <p> TYPE: <code>str</code> </p> Use Case(s): <ul> <li>Communicating that a pokemon is waiting for the target.</li> </ul> Message Format(s): <ul> <li>|-waiting|SOURCE|TARGET</li> </ul> Input Example(s) <ul> <li>TODO</li> </ul>"},{"location":"showdown/reference/battle-messages/#poketypes.showdown.battlemessage.BattleMessage_prepare","title":"<code>BattleMessage_prepare</code>","text":"<p>Message communicating that a pokemon is preparing a move.</p> ATTRIBUTE DESCRIPTION <code>POKEMON</code> <p>The pokemon preparing the move</p> <p> TYPE: <code>PokemonIdentifier</code> </p> <code>MOVE</code> <p>The move being prepared</p> <p> TYPE: <code>str</code> </p> Use Case(s): <ul> <li>Communicating that a pokemon is preparing a move.</li> </ul> Message Format(s): <ul> <li>|-prepare|POKEMON|MOVE</li> </ul> Input Example(s) <ul> <li>TODO</li> </ul>"},{"location":"showdown/reference/battle-messages/#poketypes.showdown.battlemessage.BattleMessage_mustrecharge","title":"<code>BattleMessage_mustrecharge</code>","text":"<p>Message communicating that a pokemon must recharge.</p> ATTRIBUTE DESCRIPTION <code>POKEMON</code> <p>The pokemon that must recharge</p> <p> TYPE: <code>str</code> </p> Use Case(s): <ul> <li>Communicating that a pokemon must recharge.</li> </ul> Message Format(s): <ul> <li>|-mustrecharge|POKEMON</li> </ul> Input Example(s) <ul> <li>TODO</li> </ul>"},{"location":"showdown/reference/battle-messages/#poketypes.showdown.battlemessage.BattleMessage_nothing","title":"<code>BattleMessage_nothing</code>","text":"<p>Message communicating that nothing happened.</p> Use Case(s): <ul> <li>Communicating that nothing happened.</li> </ul> Message Format(s): <ul> <li>|-nothing</li> </ul> Input Example(s) <ul> <li>|-nothing</li> </ul>"},{"location":"showdown/reference/battle-messages/#poketypes.showdown.battlemessage.BattleMessage_hitcount","title":"<code>BattleMessage_hitcount</code>","text":"<p>Message communicating that a pokemon has been hit multiple times.</p> ATTRIBUTE DESCRIPTION <code>POKEMON</code> <p>The Pokemon being hit multiple times. Can be slotless</p> <p> TYPE: <code>PokemonIdentifier</code> </p> <code>NUM</code> <p>The number of hits as an integer</p> <p> TYPE: <code>int</code> </p> Use Case(s): <ul> <li>Communicating that a pokemon has been hit multiple times.</li> </ul> Message Format(s): <ul> <li>|-hitcount|POKEMON|NUM</li> </ul> Input Example(s) <ul> <li>TODO</li> </ul>"},{"location":"showdown/reference/battle-messages/#poketypes.showdown.battlemessage.BattleMessage_singlemove","title":"<code>BattleMessage_singlemove</code>","text":"<p>Message communicating that a pokemon has used a single move.</p> ATTRIBUTE DESCRIPTION <code>POKEMON</code> <p>The Pokemon using this single move</p> <p> TYPE: <code>PokemonIdentifier</code> </p> <code>MOVE</code> <p>The move being used</p> <p> TYPE: <code>DexMove.ValueType</code> </p> Use Case(s): <ul> <li>TODO</li> </ul> Message Format(s): <ul> <li>|-singlemove|POKEMON|MOVE</li> </ul> Input Example(s) <ul> <li>TODO</li> </ul>"},{"location":"showdown/reference/battle-messages/#poketypes.showdown.battlemessage.BattleMessage_singleturn","title":"<code>BattleMessage_singleturn</code>","text":"<p>Message communicating that a pokemon has used a single turn move.</p> ATTRIBUTE DESCRIPTION <code>POKEMON</code> <p>The Pokemon using this single move</p> <p> TYPE: <code>PokemonIdentifier</code> </p> <code>MOVE</code> <p>The move being used</p> <p> TYPE: <code>DexMove.ValueType</code> </p> Use Case(s): <ul> <li>Communicating that a pokemon has used a single turn move.</li> </ul> Message Format(s): <ul> <li>|-singleturn|POKEMON|MOVE</li> </ul> Input Example(s) <ul> <li>TODO</li> </ul>"},{"location":"showdown/reference/battle-messages/#poketypes.showdown.battlemessage.BattleMessage_formechange","title":"<code>BattleMessage_formechange</code>","text":"<p>Message communicating that a pokemon has changed formes.</p> ATTRIBUTE DESCRIPTION <code>POKEMON</code> <p>The pokemon changing formes in some temporary way</p> <p> TYPE: <code>PokemonIdentifier</code> </p> <code>SPECIES</code> <p>The species for this pokemon, including forme</p> <p> TYPE: <code>DexPokemon.ValueType</code> </p> <code>EFFECT</code> <p>Optionally, what caused the formechange</p> <p> TYPE: <code>Optional[Effect]</code> </p> Use Case(s): <ul> <li>Communicating that a pokemon has changed formes.</li> </ul> Message Format(s): <ul> <li>|-formechange|POKEMON|SPECIES</li> </ul> Input Example(s) <ul> <li>TODO</li> </ul>"},{"location":"showdown/reference/battle-messages/#poketypes.showdown.battlemessage.BattleMessage_terastallize","title":"<code>BattleMessage_terastallize</code>","text":"<p>Message communicating that a pokemon has terastallized.</p> ATTRIBUTE DESCRIPTION <code>POKEMON</code> <p>The pokemon doing the terastallization</p> <p> TYPE: <code>PokemonIdentifier</code> </p> <code>TYPE</code> <p>The type being terastallized</p> <p> TYPE: <code>DexType.ValueType</code> </p> Use Case(s): <ul> <li>Communicating that a pokemon has terastallized.</li> </ul> Message Format(s): <ul> <li>|terastallize|POKEMON|TYPE</li> </ul> Input Example(s) <ul> <li>TODO</li> </ul>"},{"location":"showdown/reference/battle-messages/#poketypes.showdown.battlemessage.BattleMessage_fieldactivate","title":"<code>BattleMessage_fieldactivate</code>","text":"<p>Message communicating that a field effect has been activated.</p> ATTRIBUTE DESCRIPTION <code>EFFECT</code> <p>The effect causing the field activation</p> <p> TYPE: <code>Effect</code> </p> Use Case(s): <ul> <li>Communicating that a field effect has been activated.</li> </ul> Message Format(s): <ul> <li>|-fieldactivate|EFFECT</li> </ul> Input Example(s) <ul> <li>TODO</li> </ul>"},{"location":"showdown/reference/battle-messages/#poketypes.showdown.battlemessage.BattleMessage_error","title":"<code>BattleMessage_error</code>","text":"<p>Message communicating that an error has occurred.</p> ATTRIBUTE DESCRIPTION <code>MESSAGE</code> <p>The error message sent by showdown</p> <p> TYPE: <code>str</code> </p> Use Case(s): <ul> <li>Communicating that an error has occurred.</li> </ul> Message Format(s): <ul> <li>|error|MESSAGE</li> </ul> Input Example(s) <ul> <li>TODO</li> </ul>"},{"location":"showdown/reference/battle-messages/#poketypes.showdown.battlemessage.BattleMessage_bigerror","title":"<code>BattleMessage_bigerror</code>","text":"<p>Message communicating that a big error has occurred.</p> ATTRIBUTE DESCRIPTION <code>MESSAGE</code> <p>The error message sent by showdown</p> <p> TYPE: <code>str</code> </p> Use Case(s): <ul> <li>Communicating that a big error has occurred.</li> </ul> Message Format(s): <ul> <li>|bigerror|MESSAGE</li> </ul> Input Example(s) <ul> <li>TODO</li> </ul>"},{"location":"showdown/reference/battle-messages/#poketypes.showdown.battlemessage.BattleMessage_init","title":"<code>BattleMessage_init</code>","text":"<p>Message communicating that a battle has been initialized.</p> Use Case(s): <ul> <li>Communicating that a battle has been initialized.</li> </ul> Message Format(s): <ul> <li>|init|battle</li> </ul> Input Example(s) <ul> <li>|init|battle</li> </ul>"},{"location":"showdown/reference/battle-messages/#poketypes.showdown.battlemessage.BattleMessage_deinit","title":"<code>BattleMessage_deinit</code>","text":"<p>Message communicating that a battle has been deinitialized.</p> Use Case(s): <ul> <li>Communicating that a battle has been deinitialized.</li> </ul> Message Format(s): <ul> <li>|deinit</li> </ul> Input Example(s) <ul> <li>|deinit</li> </ul>"},{"location":"showdown/reference/battle-messages/#poketypes.showdown.battlemessage.BattleMessage_title","title":"<code>BattleMessage_title</code>","text":"<p>Message communicating that a title has been sent for this battle.</p> ATTRIBUTE DESCRIPTION <code>TITLE</code> <p>The title of this match as shown on pokemon showdown</p> <p> TYPE: <code>str</code> </p> Use Case(s): <ul> <li>Communicating that a title has been sent for this battle.</li> </ul> Message Format(s): <ul> <li>|title|TITLE</li> </ul> Input Example(s) <ul> <li>TODO</li> </ul>"},{"location":"showdown/reference/battle-messages/#poketypes.showdown.battlemessage.BattleMessage_join","title":"<code>BattleMessage_join</code>","text":"<p>Message communicating that a player has joined the battle.</p> ATTRIBUTE DESCRIPTION <code>USERNAME</code> <p>The username of the joining player</p> <p> TYPE: <code>str</code> </p> Use Case(s): <ul> <li>Communicating that a player has joined the battle.</li> </ul> Message Format(s): <ul> <li>|join|USERNAME</li> </ul> Input Example(s) <ul> <li>TODO</li> </ul>"},{"location":"showdown/reference/battle-messages/#poketypes.showdown.battlemessage.BattleMessage_leave","title":"<code>BattleMessage_leave</code>","text":"<p>Message communicating that a player has left the battle.</p> ATTRIBUTE DESCRIPTION <code>USERNAME</code> <p>The username of the leaving player</p> <p> TYPE: <code>str</code> </p> Use Case(s): <ul> <li>Communicating that a player has left the battle.</li> </ul> Message Format(s): <ul> <li>|leave|USERNAME</li> </ul> Input Example(s) <ul> <li>TODO</li> </ul>"},{"location":"showdown/reference/battle-messages/#poketypes.showdown.battlemessage.BattleMessage_raw","title":"<code>BattleMessage_raw</code>","text":"<p>Message communicating that a raw message has been sent.</p> ATTRIBUTE DESCRIPTION <code>MESSAGE</code> <p>The raw message from Showdown. Typically used for rating changes.</p> <p> TYPE: <code>str</code> </p> Use Case(s): <ul> <li>Communicating that a raw message has been sent.</li> </ul> Message Format(s): <ul> <li>|raw|MESSAGE</li> </ul> Input Example(s) <ul> <li>TODO</li> </ul>"},{"location":"showdown/reference/battle-messages/#poketypes.showdown.battlemessage.BattleMessage_anim","title":"<code>BattleMessage_anim</code>","text":"<p>Message communicating that an override animation has been sent.</p> Warning <p>This has not been fully implemented / tested on large data yet.</p> ATTRIBUTE DESCRIPTION <code>SOURCE</code> <p>The pokemon using the move</p> <p> TYPE: <code>PokemonIdentifier</code> </p> <code>TARGET</code> <p>The pokemon being targeted by the move. If there is no target then this will instead be slotless</p> <p> TYPE: <code>PokemonIdentifier</code> </p> <code>MOVE</code> <p>The move being used</p> <p> TYPE: <code>DexMove.ValueType</code> </p> <code>NO_TARGET</code> <p>Whether the move is labeled as notarget or not</p> <p> TYPE: <code>bool</code> </p> Use Case(s): <ul> <li>Communicating that a move should use a different animation from typical.</li> </ul> Message Format(s): <ul> <li>|-anim|SOURCE|MOVE|TARGET|[notarget]</li> </ul> Input Example(s) <ul> <li>TODO</li> </ul>"},{"location":"showdown/reference/battle-messages/#message-utility-classes","title":"Message Utility Classes","text":"<p>Contains BaseModels for BattleMessage parsing and processing.</p> <p>Remember to use BattleMessage.from_message directly, unless you are building test cases where you want to assert that a given message leads to a certain subclass of BattleMessage. <code>from_message</code> will auto-detect which BMType the given message corresponds to, and return the associated subclass (or an error detailing what went wrong) for you.</p>"},{"location":"showdown/reference/battle-messages/#poketypes.showdown.battlemessage.BMType","title":"<code>BMType</code>","text":"<p>String-Enum for holding all unique categories of Showdown Battle Messages.</p> <p>See https://github.com/smogon/pokemon-showdown/blob/master/sim/SIM-PROTOCOL.md for the full list of battle messages</p>"},{"location":"showdown/reference/battle-messages/#poketypes.showdown.battlemessage.PokeStat","title":"<code>PokeStat</code>","text":"<p>Helper enum for identifying valid stats.</p>"},{"location":"showdown/reference/battle-messages/#poketypes.showdown.battlemessage.PokemonIdentifier","title":"<code>PokemonIdentifier</code>","text":"<p>A BaseModel giving details about which Pokemon is being talked about.</p> <p>Attributes:</p> Name Type Description <code>IDENTITY</code> <code>str</code> <p>The unique identifier for a pokemon. Looks like <code>ARCANINE</code> if the input is <code>p1: Arcanine</code></p> <code>PLAYER</code> <code>str</code> <p>The player this pokemon belongs to</p> <code>SLOT</code> <code>Optional[str]</code> <p>Optionally, the slot this pokemon is in. Will be None if slot info isn't given in the message</p>"},{"location":"showdown/reference/battle-messages/#poketypes.showdown.battlemessage.PokemonIdentifier.from_ident_string","title":"<code>from_ident_string(ident)</code>  <code>staticmethod</code>","text":"<p>Create a new PokemonIdentifier from an identifier string without slot information.</p> <p>Parameters:</p> Name Type Description Default <code>ident</code> <code>str</code> <p>An input string to extract field information from. Looks like \"p1: Arcanine\"</p> required <p>Returns:</p> Name Type Description <code>PokemonIdentifier</code> <code>PokemonIdentifier</code> <p>A newly created PokemonIdentifier object from this string</p>"},{"location":"showdown/reference/battle-messages/#poketypes.showdown.battlemessage.PokemonIdentifier.from_slot_string","title":"<code>from_slot_string(slot)</code>  <code>staticmethod</code>","text":"<p>Create a new PokemonIdentifier from an identifier string with slot information.</p> <p>Parameters:</p> Name Type Description Default <code>slot</code> <code>str</code> <p>An input string to extract field information from. Looks like \"p1a: Arcanine\"</p> required <p>Returns:</p> Name Type Description <code>PokemonIdentifier</code> <code>PokemonIdentifier</code> <p>A newly created PokemonIdentifier object from this string</p>"},{"location":"showdown/reference/battle-messages/#poketypes.showdown.battlemessage.PokemonIdentifier.from_string","title":"<code>from_string(string)</code>  <code>staticmethod</code>","text":"<p>Auto-Create a new PokemonIdentifier based on which type of identity string is given.</p> <p>Parameters:</p> Name Type Description Default <code>string</code> <code>str</code> <p>An input string to extract field information from. Looks like \"p1a: Arcanine\"</p> required <p>Returns:</p> Name Type Description <code>PokemonIdentifier</code> <code>PokemonIdentifier</code> <p>A newly created PokemonIdentifier object from this string</p>"},{"location":"showdown/reference/battle-messages/#poketypes.showdown.battlemessage.EffectType","title":"<code>EffectType</code>","text":"<p>Helper class to identify which category of effect is being activated.</p>"},{"location":"showdown/reference/battle-messages/#poketypes.showdown.battlemessage.Effect","title":"<code>Effect</code>","text":"<p>A helper class for many Battle Message types that rely on something happening to cause the message effect.</p>"},{"location":"showdown/reference/battle-messages/#poketypes.showdown.battlemessage.RequestPoke","title":"<code>RequestPoke</code>","text":"<p>A helper class to contain details about a pokemon held in the <code>side</code> data of a request.</p> <p>Attributes:</p> Name Type Description <code>IDENT</code> <code>PokemonIdentifier</code> <p>The string pokemon identifier (without slot information)</p> <code>SPECIES</code> <code>DexPokemon.ValueType</code> <p>The species for this pokemon, including forme</p> <code>LEVEL</code> <code>int</code> <p>The level of this pokemon</p> <code>GENDER</code> <code>Optional[Literal['M', 'F']]</code> <p>The gender of this pokemon</p> <code>SHINY</code> <code>bool</code> <p>Whether the pokemon is shiny or not</p> <code>TERA</code> <code>Optional[DexType.ValueType]</code> <p>If this pokemon is teratyped, the DexType of the new type. Else None.</p> <code>CUR_HP</code> <code>int</code> <p>The current HP of the pokemon</p> <code>MAX_HP</code> <code>Optional[int]</code> <p>The maximum HP of the pokemon, None if the pokemon is fainted</p> <code>STATUS</code> <code>Optional[DexStatus.ValueType]</code> <p>The status of the pokemon. Can be None if there is no status</p> <code>ACTIVE</code> <code>bool</code> <p>Whether the pokemon is active or not</p> <code>STATS</code> <code>Dict[PokeStat, int]</code> <p>A dictionary of stat-&gt;values for each stat of this pokemon (before modifiers)</p> <code>MOVES</code> <code>List[DexMove.ValueType]</code> <p>The list of moves this pokemon knows, without pp information</p> <code>BASE_ABILITY</code> <code>DexAbility.ValueType</code> <p>The base ability of this pokemon, ignoring any ability switching shenanigans</p> <code>ABILITY</code> <code>Optional[DexAbility.ValueType]</code> <p>The current ability of this pokemon. Only used in certain gens, can be None</p> <code>ITEM</code> <code>Optional[DexItem.ValueType]</code> <p>The held item of this pokemon. None if no item is held</p> <code>POKEBALL</code> <code>str</code> <p>Which pokeball this pokemon is contained in</p> <code>COMMANDING</code> <code>Optional[bool]</code> <p>Tatsugiri commander mechanic. True if active, false if not, None if older gen</p> <code>REVIVING</code> <code>Optional[bool]</code> <p>Revival Blessing flag (I think?)</p> <code>TERATYPE</code> <code>Optional[DexType.ValueType]</code> <p>The type that this pokemon can teratype into</p> <code>TERASTALLIZED</code> <code>Optional[DexType.ValueType]</code> <p>The type that this pokemon is teratyped into. None if not applicable</p>"},{"location":"showdown/reference/battle-messages/#poketypes.showdown.battlemessage.MoveData","title":"<code>MoveData</code>","text":"<p>A helper class to contain details about a move held in the active data for a request.</p> <p>Attributes:</p> Name Type Description <code>NAME</code> <code>str</code> <p>The friendly name of the move</p> <code>ID</code> <code>DexMove.ValueType</code> <p>The id of the move</p> <code>CUR_PP</code> <code>Optional[int]</code> <p>The integer amount of times this move can still be used. None if Trapped</p> <code>MAX_PP</code> <code>Optional[int]</code> <p>The integer amount of times this move can ever be used. None if Trapped</p> <code>TARGET</code> <code>Optional[DexMoveTarget.ValueType]</code> <p>The targetting type of this move. None if Trapped</p> <code>DISABLED</code> <code>Optional[bool]</code> <p>Whether this move is disabled or not. None if Trapped</p>"},{"location":"showdown/reference/battle-messages/#poketypes.showdown.battlemessage.ActiveOption","title":"<code>ActiveOption</code>","text":"<p>A helper class to contain details about all moves available for an active pokemon in a request.</p> <p>Attributes:</p> Name Type Description <code>MOVES</code> <code>List[MoveData]</code> <p>A list of available moves for this slot</p> <code>CAN_MEGA</code> <code>bool</code> <p>Whether the pokemon can mega evolve</p> <code>CAN_ZMOVE</code> <code>bool</code> <p>Whether the pokemon can zmove</p> <code>CAN_DYNA</code> <code>bool</code> <p>Whether the pokemon can dynamax</p> <code>CAN_TERA</code> <code>bool</code> <p>Whether the pokemon can teratype</p> <code>TRAPPED</code> <code>bool</code> <p>Whether the user is trapped</p>"},{"location":"showdown/reference/standard-messages/","title":"The Standard Showdown Message","text":""},{"location":"showdown/reference/standard-messages/#the-message-object","title":"The Message object","text":"<p>The base class for all specific Message subclasses to be built from.</p> <p>When parsing a string message, you should directly use this class's <code>from_message</code> function, which will auto-identify which subclass (if any) the given string belongs to.</p> <p>Across all Messages, you will be able to access both MTYPE and MESSAGE, though you shouldn't need to access MESSAGE directly. (If you do, then we must be missing some data that exists in the raw string)</p> ATTRIBUTE DESCRIPTION <code>MTYPE</code> <p>The message type of this message. Must be a vaild showdown general message.</p> <p> TYPE: <code>MType</code> </p> <code>MESSAGE</code> <p>The raw message line as sent from showdown. Shouldn't need to be used but worth keeping.</p> <p> TYPE: <code>str</code> </p>"},{"location":"showdown/reference/standard-messages/#poketypes.showdown.showdownmessage.Message.from_message","title":"<code>from_message(message)</code>  <code>staticmethod</code>","text":"<p>Create a specific Message object from a raw string message.</p> <p>This is used for general Showdown Messages, compared to the BattleMessage class meant for battle details.</p> PARAMETER  DESCRIPTION <code>message</code> <p>The newline-stripped single string message as sent by the server.</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>Message</code> <p>An initialized subclass of <code>Message</code>, for the corresponding class for this message type.</p> <p> TYPE: <code>'Message'</code> </p>"},{"location":"showdown/reference/standard-messages/#message-subclasses","title":"Message Subclasses","text":"<p>Contains BaseModels for Message parsing and processing.</p> <p>Remember to use Message.from_message directly, unless you are building test cases where you want to assert that a given message leads to a certain subclass of Message. <code>from_message</code> will auto-detect which MType the given message corresponds to, and return the associated subclass (or an error detailing what went wrong) for you.</p>"},{"location":"showdown/reference/standard-messages/#poketypes.showdown.showdownmessage.Message_challstr","title":"<code>Message_challstr</code>","text":"<p>Message containing a login challenge string.</p> ATTRIBUTE DESCRIPTION <code>CHALLSTR</code> <p>The string challenge string</p> <p> TYPE: <code>str</code> </p> Use Case(s) <ul> <li>Gives the user a challenge string to submit to the login server to get a token</li> </ul> Message Format(s) <ul> <li>|challstr|CHALLSTR</li> </ul> Input Example(s) <ul> <li>TODO</li> </ul>"},{"location":"showdown/reference/standard-messages/#poketypes.showdown.showdownmessage.Message_customgroups","title":"<code>Message_customgroups</code>","text":"<p>Message containing info about server custom groups.</p> ATTRIBUTE DESCRIPTION <code>CUSTOM_GROUPS</code> <p>The list of custom groups</p> <p> TYPE: <code>List[CustomGroup]</code> </p> Use Case(s) <ul> <li>To communicate all usergroups</li> </ul> Message Format(s) <ul> <li>|customgroups|CUSTOMGROUPS</li> </ul> Input Example(s) <ul> <li>TODO</li> </ul>"},{"location":"showdown/reference/standard-messages/#poketypes.showdown.showdownmessage.Message_formats","title":"<code>Message_formats</code>","text":"<p>Message containing info about server enabled formats.</p> ATTRIBUTE DESCRIPTION <code>FORMATS</code> <p>The list of formats</p> <p> TYPE: <code>List[str]</code> </p> Use Case(s) <ul> <li>To communicate all available formats the user can play</li> </ul> Message Format(s) <ul> <li>|formats|FORMATSLIST</li> </ul> Input Example(s) <ul> <li>TODO</li> </ul>"},{"location":"showdown/reference/standard-messages/#poketypes.showdown.showdownmessage.Message_init","title":"<code>Message_init</code>","text":"<p>Message notifying about a battle starting.</p> Use Case(s) <ul> <li>To communicate battle initialization notice.</li> </ul> Message Format(s) <ul> <li>|init|battle</li> </ul> Input Example(s) <ul> <li>TODO</li> </ul>"},{"location":"showdown/reference/standard-messages/#poketypes.showdown.showdownmessage.Message_join","title":"<code>Message_join</code>","text":"<p>Message containing info about a joining user.</p> ATTRIBUTE DESCRIPTION <code>USERNAME</code> <p>The username of the joining player</p> <p> TYPE: <code>str</code> </p> Use Case(s) <ul> <li>To communicate player room user entry.</li> </ul> Message Format(s) <ul> <li>|join|USERNAME</li> </ul> Input Example(s) <ul> <li>|j|\u2606colress-gpt-test1</li> </ul>"},{"location":"showdown/reference/standard-messages/#poketypes.showdown.showdownmessage.Message_leave","title":"<code>Message_leave</code>","text":"<p>Message containing info about a leaving user.</p> ATTRIBUTE DESCRIPTION <code>USERNAME</code> <p>The username of the leaving player</p> <p> TYPE: <code>str</code> </p> Use Case(s) <ul> <li>To communicate player room user exit.</li> </ul> Message Format(s) <ul> <li>|leave|USERNAME</li> <li>|l|USERNAME</li> </ul> Input Example(s) <ul> <li>|l|\u2606colress-gpt-test1</li> </ul>"},{"location":"showdown/reference/standard-messages/#poketypes.showdown.showdownmessage.Message_pm","title":"<code>Message_pm</code>","text":"<p>Message containing a PM to/from the user.</p> ATTRIBUTE DESCRIPTION <code>SOURCE</code> <p>The username of the user who sent the pm</p> <p> TYPE: <code>str</code> </p> <code>TARGET</code> <p>The username of the user who received the pm</p> <p> TYPE: <code>str</code> </p> <code>PM</code> <p>The message. Newlines are denoted with |</p> <p> TYPE: <code>str</code> </p> <code>IS_CHALLENGE</code> <p>Whether this PM is a challenge to a battle</p> <p> TYPE: <code>bool</code> </p> <code>CHALLENGE_FORMAT</code> <p>The format of the challenge if it is a challenge</p> <p> TYPE: <code>Optional[str]</code> </p> Use Case(s) <ul> <li>Notify the user about a PM received.</li> </ul> Message Format(s) <ul> <li>|pm|SOURCE|TARGET|PM</li> </ul> Input Example(s) <ul> <li>TODO</li> </ul>"},{"location":"showdown/reference/standard-messages/#poketypes.showdown.showdownmessage.Message_title","title":"<code>Message_title</code>","text":"<p>Message notifying about the title of a room.</p> ATTRIBUTE DESCRIPTION <code>TITLE</code> <p>The title of this match as shown on pokemon showdown</p> <p> TYPE: <code>str</code> </p> Use Case(s) <ul> <li>To communicate room title info.</li> </ul> Message Format(s) <ul> <li>|title|TITLE</li> </ul> Input Example(s) <ul> <li>|title|colress-gpt-test1 vs. colress-gpt-test2</li> </ul>"},{"location":"showdown/reference/standard-messages/#poketypes.showdown.showdownmessage.Message_updatechallenges","title":"<code>Message_updatechallenges</code>","text":"<p>Message containing a current challenge searches, if any.</p> ATTRIBUTE DESCRIPTION <code>OUTGOING</code> <p>A dictionary of username-&gt;format for each outgoing challenge</p> <p> TYPE: <code>Dict[str, str]</code> </p> <code>INCOMING</code> <p>A dictionary of username-&gt;format for each incoming challenge</p> <p> TYPE: <code>Dict[str, str]</code> </p> Use Case(s) <ul> <li>Gives the user an update about all of their current battle challenge requests.</li> </ul> Message Format(s) <ul> <li>|updatechallenges|JSON</li> </ul> Input Example(s) <ul> <li>TODO</li> </ul>"},{"location":"showdown/reference/standard-messages/#poketypes.showdown.showdownmessage.Message_updatesearch","title":"<code>Message_updatesearch</code>","text":"<p>Message containing a current ladder searches, if any.</p> ATTRIBUTE DESCRIPTION <code>SEARCHING</code> <p>A list of formats currently searching for a ladder match</p> <p> TYPE: <code>List[str]</code> </p> <code>GAMES</code> <p>A optional dictionary of game-id-&gt;format of currently ongoing games</p> <p> TYPE: <code>Optional[Dict[str, str]]</code> </p> Use Case(s) <ul> <li>Gives the user an update about all of their current battle search requests.</li> </ul> Message Format(s) <ul> <li>|updatesearch|JSON</li> </ul> Input Example(s) <ul> <li>TODO</li> </ul>"},{"location":"showdown/reference/standard-messages/#poketypes.showdown.showdownmessage.Message_updateuser","title":"<code>Message_updateuser</code>","text":"<p>Message containing info about your user settings / login information.</p> ATTRIBUTE DESCRIPTION <code>USERNAME</code> <p>The username of your current login</p> <p> TYPE: <code>str</code> </p> <code>NAMED</code> <p>Whether you are currently logged in or not</p> <p> TYPE: <code>bool</code> </p> <code>AVATAR</code> <p>Either a number id of the user's avatar or a custom value</p> <p> TYPE: <code>Union[int, str]</code> </p> <code>SETTINGS</code> <p>The user settings for your current user session</p> <p> TYPE: <code>UserSettings</code> </p> Use Case(s) <ul> <li>To communicate any changes to your login / user session.</li> </ul> Message Format(s) <ul> <li>|updateuser|USER|NAMED|AVATAR|SETTINGS</li> </ul> Input Example(s) <ul> <li>TODO</li> </ul>"},{"location":"showdown/reference/standard-messages/#message-utility-classes","title":"Message Utility Classes","text":"<p>Contains BaseModels for Message parsing and processing.</p> <p>Remember to use Message.from_message directly, unless you are building test cases where you want to assert that a given message leads to a certain subclass of Message. <code>from_message</code> will auto-detect which MType the given message corresponds to, and return the associated subclass (or an error detailing what went wrong) for you.</p>"},{"location":"showdown/reference/standard-messages/#poketypes.showdown.showdownmessage.CustomGroup","title":"<code>CustomGroup</code>","text":"<p>A helper class to contain information about server custom groups.</p>"},{"location":"showdown/reference/standard-messages/#poketypes.showdown.showdownmessage.MType","title":"<code>MType</code>","text":"<p>String-Enum for holding all unique categories of Showdown Generic Messages.</p> <p>See https://github.com/smogon/pokemon-showdown/blob/master/PROTOCOL.md for the (partial) list of message types</p>"},{"location":"showdown/reference/standard-messages/#poketypes.showdown.showdownmessage.UserSettings","title":"<code>UserSettings</code>","text":"<p>A helper class to contain information about user settings.</p> <p>Attributes:</p> Name Type Description <code>BLOCK_CHALLENGES</code> <code>bool</code> <p>Whether you are currently blocking challenges</p> <code>BLOCK_PMS</code> <code>bool</code> <p>Whether you are currently blocking PMs</p> <code>IGNORE_TICKETS</code> <code>bool</code> <p>Whether you are currently ignoring tickets</p> <code>HIDE_BATTLES</code> <code>bool</code> <p>Whether you are currently hiding battles on your trainer card</p> <code>BLOCK_INVITES</code> <code>bool</code> <p>Whether you are currently blocking invites</p> <code>DO_NOT_DISTURB</code> <code>bool</code> <p>Your current do not disturb setting</p> <code>BLOCK_FRIEND_REQUESTS</code> <code>bool</code> <p>Whether you are currently blocking friend requests</p> <code>ALLOW_FRIEND_NOTIFICATIONS</code> <code>bool</code> <p>Whether you are currently allowing friend notifications</p> <code>DISPLAY_BATTLES</code> <code>bool</code> <p>Whether you are currently displaying battles to friends</p> <code>HIDE_LOGINS</code> <code>bool</code> <p>Whether you are currently hiding logins</p> <code>HIDDEN_NEXT_BATTLE</code> <code>bool</code> <p>Whether you are hiding your next battle or not</p> <code>INVITE_ONLY_NEXT_BATTLE</code> <code>bool</code> <p>Whether you are limiting your next battle to invite only or not</p> <code>LANGUAGE</code> <code>Optional[str]</code> <p>The language set by your user</p>"}]}